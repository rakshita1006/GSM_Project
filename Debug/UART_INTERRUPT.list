
UART_INTERRUPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fa8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08002130  08002130  00012130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002184  08002184  00020050  2**0
                  CONTENTS
  4 .ARM          00000008  08002184  08002184  00012184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800218c  0800218c  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800218c  0800218c  0001218c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002190  08002190  00012190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08002194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d34  20000050  080021e4  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d84  080021e4  00020d84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008cac  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a0b  00000000  00000000  00028d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000740  00000000  00000000  0002a738  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000678  00000000  00000000  0002ae78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fad4  00000000  00000000  0002b4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000699a  00000000  00000000  0004afc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bef56  00000000  00000000  0005195e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001108b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c18  00000000  00000000  00110930  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000050 	.word	0x20000050
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002118 	.word	0x08002118

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000054 	.word	0x20000054
 80001c4:	08002118 	.word	0x08002118

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <PeripheralInit>:

#include "Peripheral_Init.h"


void PeripheralInit()
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	      SystemClock_Config();
 80004cc:	f000 fb52 	bl	8000b74 <SystemClock_Config>
		  MX_GPIO_Init();
 80004d0:	f000 f80a 	bl	80004e8 <MX_GPIO_Init>
		  gsm.Flags.Start= true;
 80004d4:	4a03      	ldr	r2, [pc, #12]	; (80004e4 <PeripheralInit+0x1c>)
 80004d6:	7813      	ldrb	r3, [r2, #0]
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	7013      	strb	r3, [r2, #0]
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	200000b0 	.word	0x200000b0

080004e8 <MX_GPIO_Init>:
	  HAL_UART_Receive_IT(&huart2,&Uart_Rx_Buffer, sizeof(Uart_Rx_Buffer));
	  gsm.Flags.GsmInitialised= true;
}

void MX_GPIO_Init(void)
  {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08c      	sub	sp, #48	; 0x30
 80004ec:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 031c 	add.w	r3, r7, #28
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	61bb      	str	r3, [r7, #24]
 8000502:	4b71      	ldr	r3, [pc, #452]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a70      	ldr	r2, [pc, #448]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000508:	f043 0310 	orr.w	r3, r3, #16
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b6e      	ldr	r3, [pc, #440]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0310 	and.w	r3, r3, #16
 8000516:	61bb      	str	r3, [r7, #24]
 8000518:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	4b6a      	ldr	r3, [pc, #424]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a69      	ldr	r2, [pc, #420]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b67      	ldr	r3, [pc, #412]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	617b      	str	r3, [r7, #20]
 8000534:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	613b      	str	r3, [r7, #16]
 800053a:	4b63      	ldr	r3, [pc, #396]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a62      	ldr	r2, [pc, #392]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b60      	ldr	r3, [pc, #384]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054e:	613b      	str	r3, [r7, #16]
 8000550:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	4b5c      	ldr	r3, [pc, #368]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a5b      	ldr	r2, [pc, #364]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b59      	ldr	r3, [pc, #356]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	4b55      	ldr	r3, [pc, #340]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a54      	ldr	r2, [pc, #336]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b52      	ldr	r3, [pc, #328]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	4b4e      	ldr	r3, [pc, #312]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a4d      	ldr	r2, [pc, #308]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b4b      	ldr	r3, [pc, #300]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0308 	and.w	r3, r3, #8
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2108      	movs	r1, #8
 80005aa:	4848      	ldr	r0, [pc, #288]	; (80006cc <MX_GPIO_Init+0x1e4>)
 80005ac:	f000 feb0 	bl	8001310 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2101      	movs	r1, #1
 80005b4:	4846      	ldr	r0, [pc, #280]	; (80006d0 <MX_GPIO_Init+0x1e8>)
 80005b6:	f000 feab 	bl	8001310 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005ba:	2200      	movs	r2, #0
 80005bc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005c0:	4844      	ldr	r0, [pc, #272]	; (80006d4 <MX_GPIO_Init+0x1ec>)
 80005c2:	f000 fea5 	bl	8001310 <HAL_GPIO_WritePin>
                            |Audio_RST_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin : CS_I2C_SPI_Pin */
    GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005c6:	2308      	movs	r3, #8
 80005c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	4619      	mov	r1, r3
 80005dc:	483b      	ldr	r0, [pc, #236]	; (80006cc <MX_GPIO_Init+0x1e4>)
 80005de:	f000 fcfd 	bl	8000fdc <HAL_GPIO_Init>

    /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
    GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005e2:	2301      	movs	r3, #1
 80005e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e6:	2301      	movs	r3, #1
 80005e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	4619      	mov	r1, r3
 80005f8:	4835      	ldr	r0, [pc, #212]	; (80006d0 <MX_GPIO_Init+0x1e8>)
 80005fa:	f000 fcef 	bl	8000fdc <HAL_GPIO_Init>

    /*Configure GPIO pin : PDM_OUT_Pin */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005fe:	2308      	movs	r3, #8
 8000600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000602:	2302      	movs	r3, #2
 8000604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2300      	movs	r3, #0
 800060c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800060e:	2305      	movs	r3, #5
 8000610:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000612:	f107 031c 	add.w	r3, r7, #28
 8000616:	4619      	mov	r1, r3
 8000618:	482d      	ldr	r0, [pc, #180]	; (80006d0 <MX_GPIO_Init+0x1e8>)
 800061a:	f000 fcdf 	bl	8000fdc <HAL_GPIO_Init>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 800061e:	2301      	movs	r3, #1
 8000620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <MX_GPIO_Init+0x1f0>)
 8000624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	482a      	ldr	r0, [pc, #168]	; (80006dc <MX_GPIO_Init+0x1f4>)
 8000632:	f000 fcd3 	bl	8000fdc <HAL_GPIO_Init>

    /*Configure GPIO pin : BOOT1_Pin */
    GPIO_InitStruct.Pin = BOOT1_Pin;
 8000636:	2304      	movs	r3, #4
 8000638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063a:	2300      	movs	r3, #0
 800063c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	4619      	mov	r1, r3
 8000648:	4825      	ldr	r0, [pc, #148]	; (80006e0 <MX_GPIO_Init+0x1f8>)
 800064a:	f000 fcc7 	bl	8000fdc <HAL_GPIO_Init>

    /*Configure GPIO pin : CLK_IN_Pin */
    GPIO_InitStruct.Pin = CLK_IN_Pin;
 800064e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000654:	2302      	movs	r3, #2
 8000656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2300      	movs	r3, #0
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000660:	2305      	movs	r3, #5
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4619      	mov	r1, r3
 800066a:	481d      	ldr	r0, [pc, #116]	; (80006e0 <MX_GPIO_Init+0x1f8>)
 800066c:	f000 fcb6 	bl	8000fdc <HAL_GPIO_Init>

    /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                             Audio_RST_Pin */
    GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000670:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000674:	61fb      	str	r3, [r7, #28]
                            |Audio_RST_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	4619      	mov	r1, r3
 8000688:	4812      	ldr	r0, [pc, #72]	; (80006d4 <MX_GPIO_Init+0x1ec>)
 800068a:	f000 fca7 	bl	8000fdc <HAL_GPIO_Init>

    /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
    GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800068e:	2320      	movs	r3, #32
 8000690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000692:	2300      	movs	r3, #0
 8000694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <MX_GPIO_Init+0x1ec>)
 80006a2:	f000 fc9b 	bl	8000fdc <HAL_GPIO_Init>

    /*Configure GPIO pin : MEMS_INT2_Pin */
    GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80006a6:	2302      	movs	r3, #2
 80006a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_GPIO_Init+0x1f0>)
 80006ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_GPIO_Init+0x1e4>)
 80006ba:	f000 fc8f 	bl	8000fdc <HAL_GPIO_Init>

  }
 80006be:	bf00      	nop
 80006c0:	3730      	adds	r7, #48	; 0x30
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40020800 	.word	0x40020800
 80006d4:	40020c00 	.word	0x40020c00
 80006d8:	10120000 	.word	0x10120000
 80006dc:	40020000 	.word	0x40020000
 80006e0:	40020400 	.word	0x40020400

080006e4 <str_copy_ram_lim_ret>:
char Status_Port[5] = "9000";			// 4000
char Command_Port[5] = "8000";			// 8000
char Modem_data_status[2] = "1";

uint32_t str_copy_ram_lim_ret( char *rec_src_ram_add,  char *rec_dest_ram_add,  char rec_delimitter,char src_dest)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b087      	sub	sp, #28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	4611      	mov	r1, r2
 80006f0:	461a      	mov	r2, r3
 80006f2:	460b      	mov	r3, r1
 80006f4:	71fb      	strb	r3, [r7, #7]
 80006f6:	4613      	mov	r3, r2
 80006f8:	71bb      	strb	r3, [r7, #6]
     char *rec_src_add = rec_src_ram_add;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	617b      	str	r3, [r7, #20]
    while(*rec_src_ram_add != rec_delimitter)
 80006fe:	e007      	b.n	8000710 <str_copy_ram_lim_ret+0x2c>
        *rec_dest_ram_add++ = *rec_src_ram_add++;
 8000700:	68fa      	ldr	r2, [r7, #12]
 8000702:	1c53      	adds	r3, r2, #1
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	1c59      	adds	r1, r3, #1
 800070a:	60b9      	str	r1, [r7, #8]
 800070c:	7812      	ldrb	r2, [r2, #0]
 800070e:	701a      	strb	r2, [r3, #0]
    while(*rec_src_ram_add != rec_delimitter)
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	79fa      	ldrb	r2, [r7, #7]
 8000716:	429a      	cmp	r2, r3
 8000718:	d1f2      	bne.n	8000700 <str_copy_ram_lim_ret+0x1c>
    return (rec_src_ram_add - rec_src_add + src_dest);
 800071a:	68fa      	ldr	r2, [r7, #12]
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	1ad2      	subs	r2, r2, r3
 8000720:	79bb      	ldrb	r3, [r7, #6]
 8000722:	4413      	add	r3, r2
}
 8000724:	4618      	mov	r0, r3
 8000726:	371c      	adds	r7, #28
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <GenerateStausPacket>:
//        *rec_dest_ram_add++ = *rec_src_ram_add++;
//}
//

void GenerateStausPacket()
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
//    memcpy(Gsm.GsmDataUni.GsmDataStru.utc_timeStamp,TimeStmp , sizeof(TimeStmp));

      memcpy(gsm.gsm_data.DeviceID,DeviceID, sizeof(DeviceID));
 8000736:	4b7a      	ldr	r3, [pc, #488]	; (8000920 <GenerateStausPacket+0x1f0>)
 8000738:	4a7a      	ldr	r2, [pc, #488]	; (8000924 <GenerateStausPacket+0x1f4>)
 800073a:	f203 4477 	addw	r4, r3, #1143	; 0x477
 800073e:	4613      	mov	r3, r2
 8000740:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000742:	6020      	str	r0, [r4, #0]
 8000744:	6061      	str	r1, [r4, #4]
 8000746:	60a2      	str	r2, [r4, #8]
 8000748:	881a      	ldrh	r2, [r3, #0]
 800074a:	789b      	ldrb	r3, [r3, #2]
 800074c:	81a2      	strh	r2, [r4, #12]
 800074e:	73a3      	strb	r3, [r4, #14]
      memcpy(gsm.gsm_data.SwVer ,SwVer, sizeof(SwVer));
 8000750:	4b73      	ldr	r3, [pc, #460]	; (8000920 <GenerateStausPacket+0x1f0>)
 8000752:	4a75      	ldr	r2, [pc, #468]	; (8000928 <GenerateStausPacket+0x1f8>)
 8000754:	f203 4386 	addw	r3, r3, #1158	; 0x486
 8000758:	6810      	ldr	r0, [r2, #0]
 800075a:	6018      	str	r0, [r3, #0]
 800075c:	7912      	ldrb	r2, [r2, #4]
 800075e:	711a      	strb	r2, [r3, #4]
      memcpy(gsm.gsm_data.RecordID ,RecordID, sizeof(RecordID));
 8000760:	4b6f      	ldr	r3, [pc, #444]	; (8000920 <GenerateStausPacket+0x1f0>)
 8000762:	4972      	ldr	r1, [pc, #456]	; (800092c <GenerateStausPacket+0x1fc>)
 8000764:	f203 428b 	addw	r2, r3, #1163	; 0x48b
 8000768:	460b      	mov	r3, r1
 800076a:	cb03      	ldmia	r3!, {r0, r1}
 800076c:	6010      	str	r0, [r2, #0]
 800076e:	6051      	str	r1, [r2, #4]
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	8113      	strh	r3, [r2, #8]
      memcpy(gsm.gsm_data.Status_Port,Status_Port , sizeof(Status_Port));
 8000774:	4b6a      	ldr	r3, [pc, #424]	; (8000920 <GenerateStausPacket+0x1f0>)
 8000776:	4a6e      	ldr	r2, [pc, #440]	; (8000930 <GenerateStausPacket+0x200>)
 8000778:	f203 43a9 	addw	r3, r3, #1193	; 0x4a9
 800077c:	6810      	ldr	r0, [r2, #0]
 800077e:	6018      	str	r0, [r3, #0]
 8000780:	7912      	ldrb	r2, [r2, #4]
 8000782:	711a      	strb	r2, [r3, #4]
      memcpy(gsm.gsm_data.Command_Port,Command_Port , sizeof(Command_Port));
 8000784:	4b66      	ldr	r3, [pc, #408]	; (8000920 <GenerateStausPacket+0x1f0>)
 8000786:	4a6b      	ldr	r2, [pc, #428]	; (8000934 <GenerateStausPacket+0x204>)
 8000788:	f203 43ae 	addw	r3, r3, #1198	; 0x4ae
 800078c:	6810      	ldr	r0, [r2, #0]
 800078e:	6018      	str	r0, [r3, #0]
 8000790:	7912      	ldrb	r2, [r2, #4]
 8000792:	711a      	strb	r2, [r3, #4]
      memcpy(gsm.gsm_data.Server_name,Server_name , sizeof(Server_name));
 8000794:	4b62      	ldr	r3, [pc, #392]	; (8000920 <GenerateStausPacket+0x1f0>)
 8000796:	4a68      	ldr	r2, [pc, #416]	; (8000938 <GenerateStausPacket+0x208>)
 8000798:	f203 4495 	addw	r4, r3, #1173	; 0x495
 800079c:	4613      	mov	r3, r2
 800079e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80007a0:	6020      	str	r0, [r4, #0]
 80007a2:	6061      	str	r1, [r4, #4]
 80007a4:	60a2      	str	r2, [r4, #8]
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	7323      	strb	r3, [r4, #12]
////    Gsm.GsmDataUni.GsmDataStru.VehicalID = "NER12345";
////    Gsm.GsmDataUni.GsmDataStru.RecordID = "12345";
////    Gsm.GsmDataUni.GsmDataStru.SwVer = "1.01";
////    Gsm.GsmDataUni.GsmDataStru.modem_data_status = "1";
//    // start frame
    unsigned char  *char_dest_ptr = &gsm.TxData[L_FRAME_INIT];
 80007aa:	4b64      	ldr	r3, [pc, #400]	; (800093c <GenerateStausPacket+0x20c>)
 80007ac:	607b      	str	r3, [r7, #4]
        // Device ID
    	char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.DeviceID,char_dest_ptr,0,0);
 80007ae:	2300      	movs	r3, #0
 80007b0:	2200      	movs	r2, #0
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	4862      	ldr	r0, [pc, #392]	; (8000940 <GenerateStausPacket+0x210>)
 80007b6:	f7ff ff95 	bl	80006e4 <str_copy_ram_lim_ret>
 80007ba:	4602      	mov	r2, r0
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4413      	add	r3, r2
 80007c0:	607b      	str	r3, [r7, #4]
    	*char_dest_ptr++ = ','; // try once
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	1c5a      	adds	r2, r3, #1
 80007c6:	607a      	str	r2, [r7, #4]
 80007c8:	222c      	movs	r2, #44	; 0x2c
 80007ca:	701a      	strb	r2, [r3, #0]
        // Record ID
		char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.RecordID,char_dest_ptr,0,0);
 80007cc:	2300      	movs	r3, #0
 80007ce:	2200      	movs	r2, #0
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	485c      	ldr	r0, [pc, #368]	; (8000944 <GenerateStausPacket+0x214>)
 80007d4:	f7ff ff86 	bl	80006e4 <str_copy_ram_lim_ret>
 80007d8:	4602      	mov	r2, r0
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	607b      	str	r3, [r7, #4]
		*char_dest_ptr++ = ','; // try once
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	607a      	str	r2, [r7, #4]
 80007e6:	222c      	movs	r2, #44	; 0x2c
 80007e8:	701a      	strb	r2, [r3, #0]
        // Software Version
		char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.SwVer,char_dest_ptr,0,0);
 80007ea:	2300      	movs	r3, #0
 80007ec:	2200      	movs	r2, #0
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	4855      	ldr	r0, [pc, #340]	; (8000948 <GenerateStausPacket+0x218>)
 80007f2:	f7ff ff77 	bl	80006e4 <str_copy_ram_lim_ret>
 80007f6:	4602      	mov	r2, r0
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4413      	add	r3, r2
 80007fc:	607b      	str	r3, [r7, #4]
		*char_dest_ptr++ = ','; // try once
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	607a      	str	r2, [r7, #4]
 8000804:	222c      	movs	r2, #44	; 0x2c
 8000806:	701a      	strb	r2, [r3, #0]
    	// imei
        char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.imei,char_dest_ptr,0,0);
 8000808:	2300      	movs	r3, #0
 800080a:	2200      	movs	r2, #0
 800080c:	6879      	ldr	r1, [r7, #4]
 800080e:	484f      	ldr	r0, [pc, #316]	; (800094c <GenerateStausPacket+0x21c>)
 8000810:	f7ff ff68 	bl	80006e4 <str_copy_ram_lim_ret>
 8000814:	4602      	mov	r2, r0
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	607b      	str	r3, [r7, #4]
        *char_dest_ptr++ = ','; // try once
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	607a      	str	r2, [r7, #4]
 8000822:	222c      	movs	r2, #44	; 0x2c
 8000824:	701a      	strb	r2, [r3, #0]
        // IMSI
		char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.imsi,char_dest_ptr,0,0);
 8000826:	2300      	movs	r3, #0
 8000828:	2200      	movs	r2, #0
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	4848      	ldr	r0, [pc, #288]	; (8000950 <GenerateStausPacket+0x220>)
 800082e:	f7ff ff59 	bl	80006e4 <str_copy_ram_lim_ret>
 8000832:	4602      	mov	r2, r0
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4413      	add	r3, r2
 8000838:	607b      	str	r3, [r7, #4]
        *char_dest_ptr++ = ','; // try once
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	1c5a      	adds	r2, r3, #1
 800083e:	607a      	str	r2, [r7, #4]
 8000840:	222c      	movs	r2, #44	; 0x2c
 8000842:	701a      	strb	r2, [r3, #0]
        // CCID
        char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.ccid,char_dest_ptr,0,0);
 8000844:	2300      	movs	r3, #0
 8000846:	2200      	movs	r2, #0
 8000848:	6879      	ldr	r1, [r7, #4]
 800084a:	4842      	ldr	r0, [pc, #264]	; (8000954 <GenerateStausPacket+0x224>)
 800084c:	f7ff ff4a 	bl	80006e4 <str_copy_ram_lim_ret>
 8000850:	4602      	mov	r2, r0
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	607b      	str	r3, [r7, #4]
        *char_dest_ptr++ = ','; // try once
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	1c5a      	adds	r2, r3, #1
 800085c:	607a      	str	r2, [r7, #4]
 800085e:	222c      	movs	r2, #44	; 0x2c
 8000860:	701a      	strb	r2, [r3, #0]
        // Vendor Name
//		char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.GsmDataStru.ccid,char_dest_ptr,0,0);
//		*char_dest_ptr++ = ','; // try once
		//signal strength
		char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.network_strength,char_dest_ptr,0,0);
 8000862:	2300      	movs	r3, #0
 8000864:	2200      	movs	r2, #0
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	483b      	ldr	r0, [pc, #236]	; (8000958 <GenerateStausPacket+0x228>)
 800086a:	f7ff ff3b 	bl	80006e4 <str_copy_ram_lim_ret>
 800086e:	4602      	mov	r2, r0
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4413      	add	r3, r2
 8000874:	607b      	str	r3, [r7, #4]
		*char_dest_ptr++ = ','; // try once
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	1c5a      	adds	r2, r3, #1
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	222c      	movs	r2, #44	; 0x2c
 800087e:	701a      	strb	r2, [r3, #0]
//	    *char_dest_ptr++ = ','; // try once
	    //  Module(LTE)
//	     char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.gsm_band,char_dest_ptr,0,0);
//	     *char_dest_ptr++ = ','; // try once
		 //Server Name
		 char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.Server_name,char_dest_ptr,0,0);
 8000880:	2300      	movs	r3, #0
 8000882:	2200      	movs	r2, #0
 8000884:	6879      	ldr	r1, [r7, #4]
 8000886:	4835      	ldr	r0, [pc, #212]	; (800095c <GenerateStausPacket+0x22c>)
 8000888:	f7ff ff2c 	bl	80006e4 <str_copy_ram_lim_ret>
 800088c:	4602      	mov	r2, r0
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	607b      	str	r3, [r7, #4]
		 *char_dest_ptr++ = ','; // try once
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	1c5a      	adds	r2, r3, #1
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	222c      	movs	r2, #44	; 0x2c
 800089c:	701a      	strb	r2, [r3, #0]
		 // Status Port
		 char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.Status_Port,char_dest_ptr,0,0);
 800089e:	2300      	movs	r3, #0
 80008a0:	2200      	movs	r2, #0
 80008a2:	6879      	ldr	r1, [r7, #4]
 80008a4:	482e      	ldr	r0, [pc, #184]	; (8000960 <GenerateStausPacket+0x230>)
 80008a6:	f7ff ff1d 	bl	80006e4 <str_copy_ram_lim_ret>
 80008aa:	4602      	mov	r2, r0
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4413      	add	r3, r2
 80008b0:	607b      	str	r3, [r7, #4]
		 *char_dest_ptr++ = ','; // try once
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	1c5a      	adds	r2, r3, #1
 80008b6:	607a      	str	r2, [r7, #4]
 80008b8:	222c      	movs	r2, #44	; 0x2c
 80008ba:	701a      	strb	r2, [r3, #0]
		 // Command Port
		 char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.Command_Port,char_dest_ptr,0,0);
 80008bc:	2300      	movs	r3, #0
 80008be:	2200      	movs	r2, #0
 80008c0:	6879      	ldr	r1, [r7, #4]
 80008c2:	4828      	ldr	r0, [pc, #160]	; (8000964 <GenerateStausPacket+0x234>)
 80008c4:	f7ff ff0e 	bl	80006e4 <str_copy_ram_lim_ret>
 80008c8:	4602      	mov	r2, r0
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	607b      	str	r3, [r7, #4]
		 *char_dest_ptr++ = ','; // try once
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	1c5a      	adds	r2, r3, #1
 80008d4:	607a      	str	r2, [r7, #4]
 80008d6:	222c      	movs	r2, #44	; 0x2c
 80008d8:	701a      	strb	r2, [r3, #0]
		 // date
		 char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.date,char_dest_ptr,0,0);
 80008da:	2300      	movs	r3, #0
 80008dc:	2200      	movs	r2, #0
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	4821      	ldr	r0, [pc, #132]	; (8000968 <GenerateStausPacket+0x238>)
 80008e2:	f7ff feff 	bl	80006e4 <str_copy_ram_lim_ret>
 80008e6:	4602      	mov	r2, r0
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4413      	add	r3, r2
 80008ec:	607b      	str	r3, [r7, #4]
		 *char_dest_ptr++ = ','; // try once
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	1c5a      	adds	r2, r3, #1
 80008f2:	607a      	str	r2, [r7, #4]
 80008f4:	222c      	movs	r2, #44	; 0x2c
 80008f6:	701a      	strb	r2, [r3, #0]
		// time
        char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.time,char_dest_ptr,0,0);
 80008f8:	2300      	movs	r3, #0
 80008fa:	2200      	movs	r2, #0
 80008fc:	6879      	ldr	r1, [r7, #4]
 80008fe:	481b      	ldr	r0, [pc, #108]	; (800096c <GenerateStausPacket+0x23c>)
 8000900:	f7ff fef0 	bl	80006e4 <str_copy_ram_lim_ret>
 8000904:	4602      	mov	r2, r0
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	607b      	str	r3, [r7, #4]
        *char_dest_ptr++ = ','; // try once
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	607a      	str	r2, [r7, #4]
 8000912:	222c      	movs	r2, #44	; 0x2c
 8000914:	701a      	strb	r2, [r3, #0]
//        str_copy_ram_lim("ETX",&Gsm.socketTxData[char_dest_ptr - Gsm.socketTxData+6],0);
//        Gsm.TxDataCnt = char_dest_ptr - Gsm.socketTxData + L_CRC + L_ETX;
////        GSM.Params.socket[socket].updated = 1;
//        Gsm.Flags.DataPacketReady = 1;
//        Gsm.TxOperation = 1;
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	bd90      	pop	{r4, r7, pc}
 800091e:	bf00      	nop
 8000920:	200000b0 	.word	0x200000b0
 8000924:	20000000 	.word	0x20000000
 8000928:	2000001c 	.word	0x2000001c
 800092c:	20000010 	.word	0x20000010
 8000930:	20000034 	.word	0x20000034
 8000934:	2000003c 	.word	0x2000003c
 8000938:	20000024 	.word	0x20000024
 800093c:	20000588 	.word	0x20000588
 8000940:	20000527 	.word	0x20000527
 8000944:	2000053b 	.word	0x2000053b
 8000948:	20000536 	.word	0x20000536
 800094c:	200000b3 	.word	0x200000b3
 8000950:	200000c3 	.word	0x200000c3
 8000954:	200000d3 	.word	0x200000d3
 8000958:	200000e7 	.word	0x200000e7
 800095c:	20000545 	.word	0x20000545
 8000960:	20000559 	.word	0x20000559
 8000964:	2000055e 	.word	0x2000055e
 8000968:	20000563 	.word	0x20000563
 800096c:	20000571 	.word	0x20000571

08000970 <date>:
	else
		return false;
}

void date(void)
{
 8000970:	b5b0      	push	{r4, r5, r7, lr}
 8000972:	b08c      	sub	sp, #48	; 0x30
 8000974:	af00      	add	r7, sp, #0
		unsigned char Data[]="+CCLK: ""\"04/01/2001,00:14:12+22""\"";  // AT+CIPOPEN=0,""\"TCP""\",""\"13.126.165.4""\",4000"
 8000976:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <date+0x9c>)
 8000978:	1d3c      	adds	r4, r7, #4
 800097a:	461d      	mov	r5, r3
 800097c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000980:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000984:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		int j=0;
 8000988:	2300      	movs	r3, #0
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
		while(true)
		{
			if(Data[j]!='\0'){
 800098c:	1d3a      	adds	r2, r7, #4
 800098e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000990:	4413      	add	r3, r2
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d00e      	beq.n	80009b6 <date+0x46>
			gsm.RxData[j] = Data[j];
 8000998:	1d3a      	adds	r2, r7, #4
 800099a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800099c:	4413      	add	r3, r2
 800099e:	7819      	ldrb	r1, [r3, #0]
 80009a0:	4a1b      	ldr	r2, [pc, #108]	; (8000a10 <date+0xa0>)
 80009a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009a4:	4413      	add	r3, r2
 80009a6:	f603 03ce 	addw	r3, r3, #2254	; 0x8ce
 80009aa:	460a      	mov	r2, r1
 80009ac:	701a      	strb	r2, [r3, #0]
			j++;
 80009ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b0:	3301      	adds	r3, #1
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009b4:	e7ea      	b.n	800098c <date+0x1c>
			}
			else{
				gsm.RxData[j] = Data[j];
 80009b6:	1d3a      	adds	r2, r7, #4
 80009b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ba:	4413      	add	r3, r2
 80009bc:	7819      	ldrb	r1, [r3, #0]
 80009be:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <date+0xa0>)
 80009c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c2:	4413      	add	r3, r2
 80009c4:	f603 03ce 	addw	r3, r3, #2254	; 0x8ce
 80009c8:	460a      	mov	r2, r1
 80009ca:	701a      	strb	r2, [r3, #0]
				break;
 80009cc:	bf00      	nop
			}

		}
	//Send_AT_Command(&GSM_Date_time);
	int i=0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned char *pktptr = &gsm.RxData[0];
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <date+0xa4>)
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
	pktptr = jump_char_fixed(pktptr,'"');
 80009d6:	2122      	movs	r1, #34	; 0x22
 80009d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80009da:	f000 f871 	bl	8000ac0 <jump_char_fixed>
 80009de:	6278      	str	r0, [r7, #36]	; 0x24
	//pktptr++;
		while(*pktptr != ',')
 80009e0:	e00c      	b.n	80009fc <date+0x8c>
		{
			gsm.gsm_data.date[i++] = *pktptr;
 80009e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e4:	1c5a      	adds	r2, r3, #1
 80009e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80009e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ea:	7811      	ldrb	r1, [r2, #0]
 80009ec:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <date+0xa0>)
 80009ee:	4413      	add	r3, r2
 80009f0:	460a      	mov	r2, r1
 80009f2:	f883 24b3 	strb.w	r2, [r3, #1203]	; 0x4b3
			pktptr++;
 80009f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f8:	3301      	adds	r3, #1
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
		while(*pktptr != ',')
 80009fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b2c      	cmp	r3, #44	; 0x2c
 8000a02:	d1ee      	bne.n	80009e2 <date+0x72>
		}
}
 8000a04:	bf00      	nop
 8000a06:	3730      	adds	r7, #48	; 0x30
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a0c:	08002130 	.word	0x08002130
 8000a10:	200000b0 	.word	0x200000b0
 8000a14:	2000097e 	.word	0x2000097e

08000a18 <time>:
void time(void)
{
 8000a18:	b5b0      	push	{r4, r5, r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af00      	add	r7, sp, #0
		char Data[]="+CCLK: “04/01/2001,00:14:12+22”";
 8000a1e:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <time+0x9c>)
 8000a20:	463c      	mov	r4, r7
 8000a22:	461d      	mov	r5, r3
 8000a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a2c:	682b      	ldr	r3, [r5, #0]
 8000a2e:	6023      	str	r3, [r4, #0]
		int j=0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
		while(true)
		{
			if(Data[j]!='\0'){
 8000a34:	463a      	mov	r2, r7
 8000a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a38:	4413      	add	r3, r2
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d00e      	beq.n	8000a5e <time+0x46>
			gsm.RxData[j] = Data[j];
 8000a40:	463a      	mov	r2, r7
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	4413      	add	r3, r2
 8000a46:	7819      	ldrb	r1, [r3, #0]
 8000a48:	4a1b      	ldr	r2, [pc, #108]	; (8000ab8 <time+0xa0>)
 8000a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4c:	4413      	add	r3, r2
 8000a4e:	f603 03ce 	addw	r3, r3, #2254	; 0x8ce
 8000a52:	460a      	mov	r2, r1
 8000a54:	701a      	strb	r2, [r3, #0]
			j++;
 8000a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a58:	3301      	adds	r3, #1
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a5c:	e7ea      	b.n	8000a34 <time+0x1c>
			}
			else{
				gsm.RxData[j] = Data[j];
 8000a5e:	463a      	mov	r2, r7
 8000a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a62:	4413      	add	r3, r2
 8000a64:	7819      	ldrb	r1, [r3, #0]
 8000a66:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <time+0xa0>)
 8000a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a6a:	4413      	add	r3, r2
 8000a6c:	f603 03ce 	addw	r3, r3, #2254	; 0x8ce
 8000a70:	460a      	mov	r2, r1
 8000a72:	701a      	strb	r2, [r3, #0]
				break;
 8000a74:	bf00      	nop
			}

		}
		//Send_AT_Command(&GSM_Date_time);
		int i=0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
		unsigned char *pktptr = &gsm.RxData[0];
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <time+0xa4>)
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
		pktptr = jump_char_fixed(pktptr,',');
 8000a7e:	212c      	movs	r1, #44	; 0x2c
 8000a80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a82:	f000 f81d 	bl	8000ac0 <jump_char_fixed>
 8000a86:	6278      	str	r0, [r7, #36]	; 0x24
		while(*pktptr != '+')
 8000a88:	e00c      	b.n	8000aa4 <time+0x8c>
		{
			gsm.gsm_data.time[i++] = *pktptr;
 8000a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8c:	1c5a      	adds	r2, r3, #1
 8000a8e:	62ba      	str	r2, [r7, #40]	; 0x28
 8000a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a92:	7811      	ldrb	r1, [r2, #0]
 8000a94:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <time+0xa0>)
 8000a96:	4413      	add	r3, r2
 8000a98:	460a      	mov	r2, r1
 8000a9a:	f883 24c1 	strb.w	r2, [r3, #1217]	; 0x4c1
			pktptr++;
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
		while(*pktptr != '+')
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b2b      	cmp	r3, #43	; 0x2b
 8000aaa:	d1ee      	bne.n	8000a8a <time+0x72>
		}
}
 8000aac:	bf00      	nop
 8000aae:	3730      	adds	r7, #48	; 0x30
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ab4:	08002150 	.word	0x08002150
 8000ab8:	200000b0 	.word	0x200000b0
 8000abc:	2000097e 	.word	0x2000097e

08000ac0 <jump_char_fixed>:
		return 0;
	}
}

unsigned char* jump_char_fixed(unsigned char *pktPtr, char character)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	70fb      	strb	r3, [r7, #3]
    while(*pktPtr++ !=  character);
 8000acc:	bf00      	nop
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	1c5a      	adds	r2, r3, #1
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	78fa      	ldrb	r2, [r7, #3]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d1f8      	bne.n	8000ace <jump_char_fixed+0xe>
    return pktPtr;
 8000adc:	687b      	ldr	r3, [r7, #4]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <gsmtask>:

void gsmtask()
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	af00      	add	r7, sp, #0
	date();
 8000aee:	f7ff ff3f 	bl	8000970 <date>
	time();
 8000af2:	f7ff ff91 	bl	8000a18 <time>
	GenerateStausPacket();
 8000af6:	f7ff fe1b 	bl	8000730 <GenerateStausPacket>
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <HAL_UART_RxCpltCallback>:
//	}
//}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	gsm.Flags.Server_Response_Flag = true;
 8000b08:	4a13      	ldr	r2, [pc, #76]	; (8000b58 <HAL_UART_RxCpltCallback+0x58>)
 8000b0a:	7893      	ldrb	r3, [r2, #2]
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	7093      	strb	r3, [r2, #2]
	gsm.RxData[gsm.RxDataCnt]=Uart_Rx_Buffer;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <HAL_UART_RxCpltCallback+0x58>)
 8000b14:	f8b3 34ca 	ldrh.w	r3, [r3, #1226]	; 0x4ca
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <HAL_UART_RxCpltCallback+0x5c>)
 8000b1c:	781a      	ldrb	r2, [r3, #0]
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_UART_RxCpltCallback+0x58>)
 8000b20:	440b      	add	r3, r1
 8000b22:	f883 28ce 	strb.w	r2, [r3, #2254]	; 0x8ce
	gsm.RxDataCnt=(1+ gsm.RxDataCnt) % MAX_Buff_Size;
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <HAL_UART_RxCpltCallback+0x58>)
 8000b28:	f8b3 34ca 	ldrh.w	r3, [r3, #1226]	; 0x4ca
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	425a      	negs	r2, r3
 8000b30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b34:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000b38:	bf58      	it	pl
 8000b3a:	4253      	negpl	r3, r2
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_UART_RxCpltCallback+0x58>)
 8000b40:	f8a3 24ca 	strh.w	r2, [r3, #1226]	; 0x4ca
	HAL_UART_Receive_IT(&huart2,&Uart_Rx_Buffer, sizeof(Uart_Rx_Buffer));
 8000b44:	2201      	movs	r2, #1
 8000b46:	4905      	ldr	r1, [pc, #20]	; (8000b5c <HAL_UART_RxCpltCallback+0x5c>)
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <HAL_UART_RxCpltCallback+0x60>)
 8000b4a:	f001 f829 	bl	8001ba0 <HAL_UART_Receive_IT>

}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000b0 	.word	0x200000b0
 8000b5c:	2000006d 	.word	0x2000006d
 8000b60:	20000070 	.word	0x20000070

08000b64 <main>:




int main(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	  PeripheralInit();
 8000b68:	f7ff fcae 	bl	80004c8 <PeripheralInit>
	  //gsmtask();

	  while (true)
	  {
		   gsmtask();
 8000b6c:	f7ff ffbd 	bl	8000aea <gsmtask>
 8000b70:	e7fc      	b.n	8000b6c <main+0x8>
	...

08000b74 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b094      	sub	sp, #80	; 0x50
 8000b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7a:	f107 0320 	add.w	r3, r7, #32
 8000b7e:	2230      	movs	r2, #48	; 0x30
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 fac0 	bl	8002108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <SystemClock_Config+0xb4>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	4a21      	ldr	r2, [pc, #132]	; (8000c28 <SystemClock_Config+0xb4>)
 8000ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <SystemClock_Config+0xb4>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <SystemClock_Config+0xb8>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a1b      	ldr	r2, [pc, #108]	; (8000c2c <SystemClock_Config+0xb8>)
 8000bbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <SystemClock_Config+0xb8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd8:	2310      	movs	r3, #16
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be0:	f107 0320 	add.w	r3, r7, #32
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 fbad 	bl	8001344 <HAL_RCC_OscConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000bf0:	f000 f81e 	bl	8000c30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf4:	230f      	movs	r3, #15
 8000bf6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 fe08 	bl	8001824 <HAL_RCC_ClockConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c1a:	f000 f809 	bl	8000c30 <Error_Handler>
  }
}
 8000c1e:	bf00      	nop
 8000c20:	3750      	adds	r7, #80	; 0x50
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40007000 	.word	0x40007000

08000c30 <Error_Handler>:

}


void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <HardFault_Handler+0x4>

08000c52 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <MemManage_Handler+0x4>

08000c58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <BusFault_Handler+0x4>

08000c5e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <UsageFault_Handler+0x4>

08000c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c92:	f000 f87f 	bl	8000d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <USART2_IRQHandler>:
  * @brief This function handles USART2 global interrupt.
  */


void USART2_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */


    HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 8000ca0:	2026      	movs	r0, #38	; 0x26
 8000ca2:	f000 f96b 	bl	8000f7c <HAL_NVIC_ClearPendingIRQ>

  HAL_UART_IRQHandler(&huart2);
 8000ca6:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <USART2_IRQHandler+0x14>)
 8000ca8:	f000 ffd0 	bl	8001c4c <HAL_UART_IRQHandler>


  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000070 	.word	0x20000070

08000cb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <SystemInit+0x28>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cbe:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <SystemInit+0x28>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <SystemInit+0x28>)
 8000cca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cce:	609a      	str	r2, [r3, #8]
#endif
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ce0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ce4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ce6:	e003      	b.n	8000cf0 <LoopCopyDataInit>

08000ce8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cee:	3104      	adds	r1, #4

08000cf0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cf0:	480b      	ldr	r0, [pc, #44]	; (8000d20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cf4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cf6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cf8:	d3f6      	bcc.n	8000ce8 <CopyDataInit>
  ldr  r2, =_sbss
 8000cfa:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cfc:	e002      	b.n	8000d04 <LoopFillZerobss>

08000cfe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cfe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d00:	f842 3b04 	str.w	r3, [r2], #4

08000d04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d08:	d3f9      	bcc.n	8000cfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d0a:	f7ff ffd3 	bl	8000cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d0e:	f001 f9d7 	bl	80020c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d12:	f7ff ff27 	bl	8000b64 <main>
  bx  lr    
 8000d16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d18:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d1c:	08002194 	.word	0x08002194
  ldr  r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d24:	20000050 	.word	0x20000050
  ldr  r2, =_sbss
 8000d28:	20000050 	.word	0x20000050
  ldr  r3, = _ebss
 8000d2c:	20000d84 	.word	0x20000d84

08000d30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC_IRQHandler>
	...

08000d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_InitTick+0x54>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x58>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4619      	mov	r1, r3
 8000d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f906 	bl	8000f64 <HAL_SYSTICK_Config>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00e      	b.n	8000d80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	d80a      	bhi.n	8000d7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f000 f8dc 	bl	8000f2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d74:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <HAL_InitTick+0x5c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e000      	b.n	8000d80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000044 	.word	0x20000044
 8000d8c:	2000004c 	.word	0x2000004c
 8000d90:	20000048 	.word	0x20000048

08000d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x20>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x24>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <HAL_IncTick+0x24>)
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	2000004c 	.word	0x2000004c
 8000db8:	20000d80 	.word	0x20000d80

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_GetTick+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000d80 	.word	0x20000d80

08000dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <__NVIC_GetPriorityGrouping+0x18>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 0307 	and.w	r3, r3, #7
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	db0c      	blt.n	8000e1c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	f003 021f 	and.w	r2, r3, #31
 8000e08:	4907      	ldr	r1, [pc, #28]	; (8000e28 <__NVIC_ClearPendingIRQ+0x38>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	095b      	lsrs	r3, r3, #5
 8000e10:	2001      	movs	r0, #1
 8000e12:	fa00 f202 	lsl.w	r2, r0, r2
 8000e16:	3360      	adds	r3, #96	; 0x60
 8000e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100

08000e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db0a      	blt.n	8000e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	490c      	ldr	r1, [pc, #48]	; (8000e78 <__NVIC_SetPriority+0x4c>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	0112      	lsls	r2, r2, #4
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	440b      	add	r3, r1
 8000e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e54:	e00a      	b.n	8000e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4908      	ldr	r1, [pc, #32]	; (8000e7c <__NVIC_SetPriority+0x50>)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	3b04      	subs	r3, #4
 8000e64:	0112      	lsls	r2, r2, #4
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	440b      	add	r3, r1
 8000e6a:	761a      	strb	r2, [r3, #24]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000e100 	.word	0xe000e100
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	; 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f1c3 0307 	rsb	r3, r3, #7
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	bf28      	it	cs
 8000e9e:	2304      	movcs	r3, #4
 8000ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	2b06      	cmp	r3, #6
 8000ea8:	d902      	bls.n	8000eb0 <NVIC_EncodePriority+0x30>
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3b03      	subs	r3, #3
 8000eae:	e000      	b.n	8000eb2 <NVIC_EncodePriority+0x32>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	43d9      	mvns	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	4313      	orrs	r3, r2
         );
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3724      	adds	r7, #36	; 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef8:	d301      	bcc.n	8000efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00f      	b.n	8000f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <SysTick_Config+0x40>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f06:	210f      	movs	r1, #15
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f7ff ff8e 	bl	8000e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <SysTick_Config+0x40>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <SysTick_Config+0x40>)
 8000f18:	2207      	movs	r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3e:	f7ff ff49 	bl	8000dd4 <__NVIC_GetPriorityGrouping>
 8000f42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	68b9      	ldr	r1, [r7, #8]
 8000f48:	6978      	ldr	r0, [r7, #20]
 8000f4a:	f7ff ff99 	bl	8000e80 <NVIC_EncodePriority>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ff68 	bl	8000e2c <__NVIC_SetPriority>
}
 8000f5c:	bf00      	nop
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ffbb 	bl	8000ee8 <SysTick_Config>
 8000f72:	4603      	mov	r3, r0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff30 	bl	8000df0 <__NVIC_ClearPendingIRQ>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d004      	beq.n	8000fb6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2280      	movs	r2, #128	; 0x80
 8000fb0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00c      	b.n	8000fd0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2205      	movs	r2, #5
 8000fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 0201 	bic.w	r2, r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
 8000ff6:	e16b      	b.n	80012d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	429a      	cmp	r2, r3
 8001012:	f040 815a 	bne.w	80012ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d00b      	beq.n	8001036 <HAL_GPIO_Init+0x5a>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800102a:	2b11      	cmp	r3, #17
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b12      	cmp	r3, #18
 8001034:	d130      	bne.n	8001098 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	091b      	lsrs	r3, r3, #4
 8001082:	f003 0201 	and.w	r2, r3, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0xfc>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b12      	cmp	r3, #18
 80010d6:	d123      	bne.n	8001120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	220f      	movs	r2, #15
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	691a      	ldr	r2, [r3, #16]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3208      	adds	r2, #8
 800111a:	69b9      	ldr	r1, [r7, #24]
 800111c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0203 	and.w	r2, r3, #3
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 80b4 	beq.w	80012ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b5f      	ldr	r3, [pc, #380]	; (80012e4 <HAL_GPIO_Init+0x308>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a5e      	ldr	r2, [pc, #376]	; (80012e4 <HAL_GPIO_Init+0x308>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
 8001172:	4b5c      	ldr	r3, [pc, #368]	; (80012e4 <HAL_GPIO_Init+0x308>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800117e:	4a5a      	ldr	r2, [pc, #360]	; (80012e8 <HAL_GPIO_Init+0x30c>)
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a51      	ldr	r2, [pc, #324]	; (80012ec <HAL_GPIO_Init+0x310>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d02b      	beq.n	8001202 <HAL_GPIO_Init+0x226>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a50      	ldr	r2, [pc, #320]	; (80012f0 <HAL_GPIO_Init+0x314>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d025      	beq.n	80011fe <HAL_GPIO_Init+0x222>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4f      	ldr	r2, [pc, #316]	; (80012f4 <HAL_GPIO_Init+0x318>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d01f      	beq.n	80011fa <HAL_GPIO_Init+0x21e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4e      	ldr	r2, [pc, #312]	; (80012f8 <HAL_GPIO_Init+0x31c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d019      	beq.n	80011f6 <HAL_GPIO_Init+0x21a>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4d      	ldr	r2, [pc, #308]	; (80012fc <HAL_GPIO_Init+0x320>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0x216>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4c      	ldr	r2, [pc, #304]	; (8001300 <HAL_GPIO_Init+0x324>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00d      	beq.n	80011ee <HAL_GPIO_Init+0x212>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4b      	ldr	r2, [pc, #300]	; (8001304 <HAL_GPIO_Init+0x328>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d007      	beq.n	80011ea <HAL_GPIO_Init+0x20e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4a      	ldr	r2, [pc, #296]	; (8001308 <HAL_GPIO_Init+0x32c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d101      	bne.n	80011e6 <HAL_GPIO_Init+0x20a>
 80011e2:	2307      	movs	r3, #7
 80011e4:	e00e      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011e6:	2308      	movs	r3, #8
 80011e8:	e00c      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011ea:	2306      	movs	r3, #6
 80011ec:	e00a      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011ee:	2305      	movs	r3, #5
 80011f0:	e008      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011f2:	2304      	movs	r3, #4
 80011f4:	e006      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011f6:	2303      	movs	r3, #3
 80011f8:	e004      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011fa:	2302      	movs	r3, #2
 80011fc:	e002      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <HAL_GPIO_Init+0x228>
 8001202:	2300      	movs	r3, #0
 8001204:	69fa      	ldr	r2, [r7, #28]
 8001206:	f002 0203 	and.w	r2, r2, #3
 800120a:	0092      	lsls	r2, r2, #2
 800120c:	4093      	lsls	r3, r2
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001214:	4934      	ldr	r1, [pc, #208]	; (80012e8 <HAL_GPIO_Init+0x30c>)
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	3302      	adds	r3, #2
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001222:	4b3a      	ldr	r3, [pc, #232]	; (800130c <HAL_GPIO_Init+0x330>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001246:	4a31      	ldr	r2, [pc, #196]	; (800130c <HAL_GPIO_Init+0x330>)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800124c:	4b2f      	ldr	r3, [pc, #188]	; (800130c <HAL_GPIO_Init+0x330>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001270:	4a26      	ldr	r2, [pc, #152]	; (800130c <HAL_GPIO_Init+0x330>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001276:	4b25      	ldr	r3, [pc, #148]	; (800130c <HAL_GPIO_Init+0x330>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800129a:	4a1c      	ldr	r2, [pc, #112]	; (800130c <HAL_GPIO_Init+0x330>)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <HAL_GPIO_Init+0x330>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012c4:	4a11      	ldr	r2, [pc, #68]	; (800130c <HAL_GPIO_Init+0x330>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3301      	adds	r3, #1
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	2b0f      	cmp	r3, #15
 80012d4:	f67f ae90 	bls.w	8000ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012d8:	bf00      	nop
 80012da:	3724      	adds	r7, #36	; 0x24
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40013800 	.word	0x40013800
 80012ec:	40020000 	.word	0x40020000
 80012f0:	40020400 	.word	0x40020400
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40020c00 	.word	0x40020c00
 80012fc:	40021000 	.word	0x40021000
 8001300:	40021400 	.word	0x40021400
 8001304:	40021800 	.word	0x40021800
 8001308:	40021c00 	.word	0x40021c00
 800130c:	40013c00 	.word	0x40013c00

08001310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
 800131c:	4613      	mov	r3, r2
 800131e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001320:	787b      	ldrb	r3, [r7, #1]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800132c:	e003      	b.n	8001336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	041a      	lsls	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	619a      	str	r2, [r3, #24]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e25b      	b.n	800180e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d075      	beq.n	800144e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001362:	4ba3      	ldr	r3, [pc, #652]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b04      	cmp	r3, #4
 800136c:	d00c      	beq.n	8001388 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800136e:	4ba0      	ldr	r3, [pc, #640]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001376:	2b08      	cmp	r3, #8
 8001378:	d112      	bne.n	80013a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800137a:	4b9d      	ldr	r3, [pc, #628]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001382:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001386:	d10b      	bne.n	80013a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001388:	4b99      	ldr	r3, [pc, #612]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d05b      	beq.n	800144c <HAL_RCC_OscConfig+0x108>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d157      	bne.n	800144c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e236      	b.n	800180e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a8:	d106      	bne.n	80013b8 <HAL_RCC_OscConfig+0x74>
 80013aa:	4b91      	ldr	r3, [pc, #580]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a90      	ldr	r2, [pc, #576]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	e01d      	b.n	80013f4 <HAL_RCC_OscConfig+0xb0>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c0:	d10c      	bne.n	80013dc <HAL_RCC_OscConfig+0x98>
 80013c2:	4b8b      	ldr	r3, [pc, #556]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a8a      	ldr	r2, [pc, #552]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	4b88      	ldr	r3, [pc, #544]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a87      	ldr	r2, [pc, #540]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e00b      	b.n	80013f4 <HAL_RCC_OscConfig+0xb0>
 80013dc:	4b84      	ldr	r3, [pc, #528]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a83      	ldr	r2, [pc, #524]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 80013e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	4b81      	ldr	r3, [pc, #516]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a80      	ldr	r2, [pc, #512]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 80013ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d013      	beq.n	8001424 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fcde 	bl	8000dbc <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001404:	f7ff fcda 	bl	8000dbc <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	; 0x64
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e1fb      	b.n	800180e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	4b76      	ldr	r3, [pc, #472]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0xc0>
 8001422:	e014      	b.n	800144e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fcca 	bl	8000dbc <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800142c:	f7ff fcc6 	bl	8000dbc <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b64      	cmp	r3, #100	; 0x64
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e1e7      	b.n	800180e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143e:	4b6c      	ldr	r3, [pc, #432]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0xe8>
 800144a:	e000      	b.n	800144e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d063      	beq.n	8001522 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800145a:	4b65      	ldr	r3, [pc, #404]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 030c 	and.w	r3, r3, #12
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00b      	beq.n	800147e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001466:	4b62      	ldr	r3, [pc, #392]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800146e:	2b08      	cmp	r3, #8
 8001470:	d11c      	bne.n	80014ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001472:	4b5f      	ldr	r3, [pc, #380]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d116      	bne.n	80014ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147e:	4b5c      	ldr	r3, [pc, #368]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <HAL_RCC_OscConfig+0x152>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d001      	beq.n	8001496 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e1bb      	b.n	800180e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001496:	4b56      	ldr	r3, [pc, #344]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4952      	ldr	r1, [pc, #328]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014aa:	e03a      	b.n	8001522 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d020      	beq.n	80014f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b4:	4b4f      	ldr	r3, [pc, #316]	; (80015f4 <HAL_RCC_OscConfig+0x2b0>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ba:	f7ff fc7f 	bl	8000dbc <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c2:	f7ff fc7b 	bl	8000dbc <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e19c      	b.n	800180e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d4:	4b46      	ldr	r3, [pc, #280]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e0:	4b43      	ldr	r3, [pc, #268]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	4940      	ldr	r1, [pc, #256]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
 80014f4:	e015      	b.n	8001522 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f6:	4b3f      	ldr	r3, [pc, #252]	; (80015f4 <HAL_RCC_OscConfig+0x2b0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fc:	f7ff fc5e 	bl	8000dbc <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001504:	f7ff fc5a 	bl	8000dbc <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e17b      	b.n	800180e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001516:	4b36      	ldr	r3, [pc, #216]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	2b00      	cmp	r3, #0
 800152c:	d030      	beq.n	8001590 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d016      	beq.n	8001564 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001536:	4b30      	ldr	r3, [pc, #192]	; (80015f8 <HAL_RCC_OscConfig+0x2b4>)
 8001538:	2201      	movs	r2, #1
 800153a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153c:	f7ff fc3e 	bl	8000dbc <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001544:	f7ff fc3a 	bl	8000dbc <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e15b      	b.n	800180e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001556:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x200>
 8001562:	e015      	b.n	8001590 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001564:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <HAL_RCC_OscConfig+0x2b4>)
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156a:	f7ff fc27 	bl	8000dbc <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001572:	f7ff fc23 	bl	8000dbc <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e144      	b.n	800180e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001584:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 8001586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f0      	bne.n	8001572 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80a0 	beq.w	80016de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10f      	bne.n	80015ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	6413      	str	r3, [r2, #64]	; 0x40
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ca:	2301      	movs	r3, #1
 80015cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_RCC_OscConfig+0x2b8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d121      	bne.n	800161e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_RCC_OscConfig+0x2b8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a07      	ldr	r2, [pc, #28]	; (80015fc <HAL_RCC_OscConfig+0x2b8>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e6:	f7ff fbe9 	bl	8000dbc <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ec:	e011      	b.n	8001612 <HAL_RCC_OscConfig+0x2ce>
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800
 80015f4:	42470000 	.word	0x42470000
 80015f8:	42470e80 	.word	0x42470e80
 80015fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001600:	f7ff fbdc 	bl	8000dbc <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e0fd      	b.n	800180e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001612:	4b81      	ldr	r3, [pc, #516]	; (8001818 <HAL_RCC_OscConfig+0x4d4>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f0      	beq.n	8001600 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d106      	bne.n	8001634 <HAL_RCC_OscConfig+0x2f0>
 8001626:	4b7d      	ldr	r3, [pc, #500]	; (800181c <HAL_RCC_OscConfig+0x4d8>)
 8001628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162a:	4a7c      	ldr	r2, [pc, #496]	; (800181c <HAL_RCC_OscConfig+0x4d8>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6713      	str	r3, [r2, #112]	; 0x70
 8001632:	e01c      	b.n	800166e <HAL_RCC_OscConfig+0x32a>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b05      	cmp	r3, #5
 800163a:	d10c      	bne.n	8001656 <HAL_RCC_OscConfig+0x312>
 800163c:	4b77      	ldr	r3, [pc, #476]	; (800181c <HAL_RCC_OscConfig+0x4d8>)
 800163e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001640:	4a76      	ldr	r2, [pc, #472]	; (800181c <HAL_RCC_OscConfig+0x4d8>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	6713      	str	r3, [r2, #112]	; 0x70
 8001648:	4b74      	ldr	r3, [pc, #464]	; (800181c <HAL_RCC_OscConfig+0x4d8>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164c:	4a73      	ldr	r2, [pc, #460]	; (800181c <HAL_RCC_OscConfig+0x4d8>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6713      	str	r3, [r2, #112]	; 0x70
 8001654:	e00b      	b.n	800166e <HAL_RCC_OscConfig+0x32a>
 8001656:	4b71      	ldr	r3, [pc, #452]	; (800181c <HAL_RCC_OscConfig+0x4d8>)
 8001658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165a:	4a70      	ldr	r2, [pc, #448]	; (800181c <HAL_RCC_OscConfig+0x4d8>)
 800165c:	f023 0301 	bic.w	r3, r3, #1
 8001660:	6713      	str	r3, [r2, #112]	; 0x70
 8001662:	4b6e      	ldr	r3, [pc, #440]	; (800181c <HAL_RCC_OscConfig+0x4d8>)
 8001664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001666:	4a6d      	ldr	r2, [pc, #436]	; (800181c <HAL_RCC_OscConfig+0x4d8>)
 8001668:	f023 0304 	bic.w	r3, r3, #4
 800166c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d015      	beq.n	80016a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001676:	f7ff fba1 	bl	8000dbc <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167c:	e00a      	b.n	8001694 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800167e:	f7ff fb9d 	bl	8000dbc <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	f241 3288 	movw	r2, #5000	; 0x1388
 800168c:	4293      	cmp	r3, r2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e0bc      	b.n	800180e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001694:	4b61      	ldr	r3, [pc, #388]	; (800181c <HAL_RCC_OscConfig+0x4d8>)
 8001696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0ee      	beq.n	800167e <HAL_RCC_OscConfig+0x33a>
 80016a0:	e014      	b.n	80016cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a2:	f7ff fb8b 	bl	8000dbc <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a8:	e00a      	b.n	80016c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016aa:	f7ff fb87 	bl	8000dbc <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e0a6      	b.n	800180e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c0:	4b56      	ldr	r3, [pc, #344]	; (800181c <HAL_RCC_OscConfig+0x4d8>)
 80016c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1ee      	bne.n	80016aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016cc:	7dfb      	ldrb	r3, [r7, #23]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d105      	bne.n	80016de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d2:	4b52      	ldr	r3, [pc, #328]	; (800181c <HAL_RCC_OscConfig+0x4d8>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a51      	ldr	r2, [pc, #324]	; (800181c <HAL_RCC_OscConfig+0x4d8>)
 80016d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 8092 	beq.w	800180c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016e8:	4b4c      	ldr	r3, [pc, #304]	; (800181c <HAL_RCC_OscConfig+0x4d8>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d05c      	beq.n	80017ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d141      	bne.n	8001780 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fc:	4b48      	ldr	r3, [pc, #288]	; (8001820 <HAL_RCC_OscConfig+0x4dc>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff fb5b 	bl	8000dbc <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170a:	f7ff fb57 	bl	8000dbc <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e078      	b.n	800180e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171c:	4b3f      	ldr	r3, [pc, #252]	; (800181c <HAL_RCC_OscConfig+0x4d8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1f0      	bne.n	800170a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69da      	ldr	r2, [r3, #28]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	019b      	lsls	r3, r3, #6
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	085b      	lsrs	r3, r3, #1
 8001740:	3b01      	subs	r3, #1
 8001742:	041b      	lsls	r3, r3, #16
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174a:	061b      	lsls	r3, r3, #24
 800174c:	4933      	ldr	r1, [pc, #204]	; (800181c <HAL_RCC_OscConfig+0x4d8>)
 800174e:	4313      	orrs	r3, r2
 8001750:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001752:	4b33      	ldr	r3, [pc, #204]	; (8001820 <HAL_RCC_OscConfig+0x4dc>)
 8001754:	2201      	movs	r2, #1
 8001756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff fb30 	bl	8000dbc <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001760:	f7ff fb2c 	bl	8000dbc <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e04d      	b.n	800180e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001772:	4b2a      	ldr	r3, [pc, #168]	; (800181c <HAL_RCC_OscConfig+0x4d8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f0      	beq.n	8001760 <HAL_RCC_OscConfig+0x41c>
 800177e:	e045      	b.n	800180c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_RCC_OscConfig+0x4dc>)
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001786:	f7ff fb19 	bl	8000dbc <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800178e:	f7ff fb15 	bl	8000dbc <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e036      	b.n	800180e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a0:	4b1e      	ldr	r3, [pc, #120]	; (800181c <HAL_RCC_OscConfig+0x4d8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1f0      	bne.n	800178e <HAL_RCC_OscConfig+0x44a>
 80017ac:	e02e      	b.n	800180c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e029      	b.n	800180e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <HAL_RCC_OscConfig+0x4d8>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d11c      	bne.n	8001808 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d8:	429a      	cmp	r2, r3
 80017da:	d115      	bne.n	8001808 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017e2:	4013      	ands	r3, r2
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d10d      	bne.n	8001808 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d106      	bne.n	8001808 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001804:	429a      	cmp	r2, r3
 8001806:	d001      	beq.n	800180c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40007000 	.word	0x40007000
 800181c:	40023800 	.word	0x40023800
 8001820:	42470060 	.word	0x42470060

08001824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e0cc      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001838:	4b68      	ldr	r3, [pc, #416]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 030f 	and.w	r3, r3, #15
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d90c      	bls.n	8001860 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b65      	ldr	r3, [pc, #404]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800184e:	4b63      	ldr	r3, [pc, #396]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0b8      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d020      	beq.n	80018ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001878:	4b59      	ldr	r3, [pc, #356]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	4a58      	ldr	r2, [pc, #352]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001882:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001890:	4b53      	ldr	r3, [pc, #332]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	4a52      	ldr	r2, [pc, #328]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800189a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800189c:	4b50      	ldr	r3, [pc, #320]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	494d      	ldr	r1, [pc, #308]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d044      	beq.n	8001944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d107      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c2:	4b47      	ldr	r3, [pc, #284]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d119      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e07f      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d003      	beq.n	80018e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d107      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e2:	4b3f      	ldr	r3, [pc, #252]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d109      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e06f      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f2:	4b3b      	ldr	r3, [pc, #236]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e067      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001902:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f023 0203 	bic.w	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	4934      	ldr	r1, [pc, #208]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	4313      	orrs	r3, r2
 8001912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001914:	f7ff fa52 	bl	8000dbc <HAL_GetTick>
 8001918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191a:	e00a      	b.n	8001932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191c:	f7ff fa4e 	bl	8000dbc <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f241 3288 	movw	r2, #5000	; 0x1388
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e04f      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001932:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 020c 	and.w	r2, r3, #12
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	429a      	cmp	r2, r3
 8001942:	d1eb      	bne.n	800191c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001944:	4b25      	ldr	r3, [pc, #148]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 030f 	and.w	r3, r3, #15
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d20c      	bcs.n	800196c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b22      	ldr	r3, [pc, #136]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195a:	4b20      	ldr	r3, [pc, #128]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e032      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d008      	beq.n	800198a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001978:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	4916      	ldr	r1, [pc, #88]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	4313      	orrs	r3, r2
 8001988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d009      	beq.n	80019aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	490e      	ldr	r1, [pc, #56]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019aa:	f000 f821 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 80019ae:	4601      	mov	r1, r0
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 80019bc:	5cd3      	ldrb	r3, [r2, r3]
 80019be:	fa21 f303 	lsr.w	r3, r1, r3
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <HAL_RCC_ClockConfig+0x1c8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff f9b2 	bl	8000d34 <HAL_InitTick>

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023c00 	.word	0x40023c00
 80019e0:	40023800 	.word	0x40023800
 80019e4:	08002174 	.word	0x08002174
 80019e8:	20000044 	.word	0x20000044
 80019ec:	20000048 	.word	0x20000048

080019f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	2300      	movs	r3, #0
 8001a00:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a06:	4b63      	ldr	r3, [pc, #396]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d007      	beq.n	8001a22 <HAL_RCC_GetSysClockFreq+0x32>
 8001a12:	2b08      	cmp	r3, #8
 8001a14:	d008      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0x38>
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f040 80b4 	bne.w	8001b84 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a1c:	4b5e      	ldr	r3, [pc, #376]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a1e:	60bb      	str	r3, [r7, #8]
       break;
 8001a20:	e0b3      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a22:	4b5e      	ldr	r3, [pc, #376]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001a24:	60bb      	str	r3, [r7, #8]
      break;
 8001a26:	e0b0      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a28:	4b5a      	ldr	r3, [pc, #360]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a30:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a32:	4b58      	ldr	r3, [pc, #352]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d04a      	beq.n	8001ad4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3e:	4b55      	ldr	r3, [pc, #340]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	099b      	lsrs	r3, r3, #6
 8001a44:	f04f 0400 	mov.w	r4, #0
 8001a48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	ea03 0501 	and.w	r5, r3, r1
 8001a54:	ea04 0602 	and.w	r6, r4, r2
 8001a58:	4629      	mov	r1, r5
 8001a5a:	4632      	mov	r2, r6
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	f04f 0400 	mov.w	r4, #0
 8001a64:	0154      	lsls	r4, r2, #5
 8001a66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a6a:	014b      	lsls	r3, r1, #5
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4622      	mov	r2, r4
 8001a70:	1b49      	subs	r1, r1, r5
 8001a72:	eb62 0206 	sbc.w	r2, r2, r6
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	f04f 0400 	mov.w	r4, #0
 8001a7e:	0194      	lsls	r4, r2, #6
 8001a80:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a84:	018b      	lsls	r3, r1, #6
 8001a86:	1a5b      	subs	r3, r3, r1
 8001a88:	eb64 0402 	sbc.w	r4, r4, r2
 8001a8c:	f04f 0100 	mov.w	r1, #0
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	00e2      	lsls	r2, r4, #3
 8001a96:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a9a:	00d9      	lsls	r1, r3, #3
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4614      	mov	r4, r2
 8001aa0:	195b      	adds	r3, r3, r5
 8001aa2:	eb44 0406 	adc.w	r4, r4, r6
 8001aa6:	f04f 0100 	mov.w	r1, #0
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	0262      	lsls	r2, r4, #9
 8001ab0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001ab4:	0259      	lsls	r1, r3, #9
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4614      	mov	r4, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	4621      	mov	r1, r4
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f04f 0400 	mov.w	r4, #0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4623      	mov	r3, r4
 8001ac8:	f7fe fb7e 	bl	80001c8 <__aeabi_uldivmod>
 8001acc:	4603      	mov	r3, r0
 8001ace:	460c      	mov	r4, r1
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	e049      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad4:	4b2f      	ldr	r3, [pc, #188]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	099b      	lsrs	r3, r3, #6
 8001ada:	f04f 0400 	mov.w	r4, #0
 8001ade:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	ea03 0501 	and.w	r5, r3, r1
 8001aea:	ea04 0602 	and.w	r6, r4, r2
 8001aee:	4629      	mov	r1, r5
 8001af0:	4632      	mov	r2, r6
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	f04f 0400 	mov.w	r4, #0
 8001afa:	0154      	lsls	r4, r2, #5
 8001afc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b00:	014b      	lsls	r3, r1, #5
 8001b02:	4619      	mov	r1, r3
 8001b04:	4622      	mov	r2, r4
 8001b06:	1b49      	subs	r1, r1, r5
 8001b08:	eb62 0206 	sbc.w	r2, r2, r6
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	f04f 0400 	mov.w	r4, #0
 8001b14:	0194      	lsls	r4, r2, #6
 8001b16:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b1a:	018b      	lsls	r3, r1, #6
 8001b1c:	1a5b      	subs	r3, r3, r1
 8001b1e:	eb64 0402 	sbc.w	r4, r4, r2
 8001b22:	f04f 0100 	mov.w	r1, #0
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	00e2      	lsls	r2, r4, #3
 8001b2c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b30:	00d9      	lsls	r1, r3, #3
 8001b32:	460b      	mov	r3, r1
 8001b34:	4614      	mov	r4, r2
 8001b36:	195b      	adds	r3, r3, r5
 8001b38:	eb44 0406 	adc.w	r4, r4, r6
 8001b3c:	f04f 0100 	mov.w	r1, #0
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	02a2      	lsls	r2, r4, #10
 8001b46:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b4a:	0299      	lsls	r1, r3, #10
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4614      	mov	r4, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	4621      	mov	r1, r4
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f04f 0400 	mov.w	r4, #0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4623      	mov	r3, r4
 8001b5e:	f7fe fb33 	bl	80001c8 <__aeabi_uldivmod>
 8001b62:	4603      	mov	r3, r0
 8001b64:	460c      	mov	r4, r1
 8001b66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b68:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	0c1b      	lsrs	r3, r3, #16
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	3301      	adds	r3, #1
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b80:	60bb      	str	r3, [r7, #8]
      break;
 8001b82:	e002      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b86:	60bb      	str	r3, [r7, #8]
      break;
 8001b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b94:	40023800 	.word	0x40023800
 8001b98:	00f42400 	.word	0x00f42400
 8001b9c:	007a1200 	.word	0x007a1200

08001ba0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	4613      	mov	r3, r2
 8001bac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b20      	cmp	r3, #32
 8001bb8:	d140      	bne.n	8001c3c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d002      	beq.n	8001bc6 <HAL_UART_Receive_IT+0x26>
 8001bc0:	88fb      	ldrh	r3, [r7, #6]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e039      	b.n	8001c3e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <HAL_UART_Receive_IT+0x38>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e032      	b.n	8001c3e <HAL_UART_Receive_IT+0x9e>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38


    huart->pRxBuffPtr = pData;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	88fa      	ldrh	r2, [r7, #6]
 8001bea:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	88fa      	ldrh	r2, [r7, #6]
 8001bf0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2222      	movs	r2, #34	; 0x22
 8001bfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c16:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0201 	orr.w	r2, r2, #1
 8001c26:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0220 	orr.w	r2, r2, #32
 8001c36:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e000      	b.n	8001c3e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001c3c:	2302      	movs	r3, #2
  }
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10d      	bne.n	8001c9e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f003 0320 	and.w	r3, r3, #32
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d008      	beq.n	8001c9e <HAL_UART_IRQHandler+0x52>
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	f003 0320 	and.w	r3, r3, #32
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f98c 	bl	8001fb4 <UART_Receive_IT>
      return;
 8001c9c:	e0d1      	b.n	8001e42 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 80b0 	beq.w	8001e06 <HAL_UART_IRQHandler+0x1ba>
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d105      	bne.n	8001cbc <HAL_UART_IRQHandler+0x70>
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 80a5 	beq.w	8001e06 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00a      	beq.n	8001cdc <HAL_UART_IRQHandler+0x90>
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd4:	f043 0201 	orr.w	r2, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00a      	beq.n	8001cfc <HAL_UART_IRQHandler+0xb0>
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf4:	f043 0202 	orr.w	r2, r3, #2
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00a      	beq.n	8001d1c <HAL_UART_IRQHandler+0xd0>
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d14:	f043 0204 	orr.w	r2, r3, #4
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00f      	beq.n	8001d46 <HAL_UART_IRQHandler+0xfa>
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d104      	bne.n	8001d3a <HAL_UART_IRQHandler+0xee>
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3e:	f043 0208 	orr.w	r2, r3, #8
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d078      	beq.n	8001e40 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f003 0320 	and.w	r3, r3, #32
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d007      	beq.n	8001d68 <HAL_UART_IRQHandler+0x11c>
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	f003 0320 	and.w	r3, r3, #32
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d002      	beq.n	8001d68 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f926 	bl	8001fb4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d72:	2b40      	cmp	r3, #64	; 0x40
 8001d74:	bf0c      	ite	eq
 8001d76:	2301      	moveq	r3, #1
 8001d78:	2300      	movne	r3, #0
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d102      	bne.n	8001d90 <HAL_UART_IRQHandler+0x144>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d031      	beq.n	8001df4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f86f 	bl	8001e74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da0:	2b40      	cmp	r3, #64	; 0x40
 8001da2:	d123      	bne.n	8001dec <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001db2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc0:	4a21      	ldr	r2, [pc, #132]	; (8001e48 <HAL_UART_IRQHandler+0x1fc>)
 8001dc2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff f8e5 	bl	8000f98 <HAL_DMA_Abort_IT>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d016      	beq.n	8001e02 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dde:	4610      	mov	r0, r2
 8001de0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001de2:	e00e      	b.n	8001e02 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f83b 	bl	8001e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dea:	e00a      	b.n	8001e02 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f837 	bl	8001e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001df2:	e006      	b.n	8001e02 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f833 	bl	8001e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001e00:	e01e      	b.n	8001e40 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e02:	bf00      	nop
    return;
 8001e04:	e01c      	b.n	8001e40 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d008      	beq.n	8001e22 <HAL_UART_IRQHandler+0x1d6>
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f85c 	bl	8001ed8 <UART_Transmit_IT>
    return;
 8001e20:	e00f      	b.n	8001e42 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00a      	beq.n	8001e42 <HAL_UART_IRQHandler+0x1f6>
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d005      	beq.n	8001e42 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f8a4 	bl	8001f84 <UART_EndTransmit_IT>
    return;
 8001e3c:	bf00      	nop
 8001e3e:	e000      	b.n	8001e42 <HAL_UART_IRQHandler+0x1f6>
    return;
 8001e40:	bf00      	nop
  }
}
 8001e42:	3720      	adds	r7, #32
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	08001eb1 	.word	0x08001eb1

08001e4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e8a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0201 	bic.w	r2, r2, #1
 8001e9a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f7ff ffc8 	bl	8001e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001ed0:	bf00      	nop
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b21      	cmp	r3, #33	; 0x21
 8001eea:	d144      	bne.n	8001f76 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef4:	d11a      	bne.n	8001f2c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f0a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d105      	bne.n	8001f20 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	1c9a      	adds	r2, r3, #2
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	621a      	str	r2, [r3, #32]
 8001f1e:	e00e      	b.n	8001f3e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	621a      	str	r2, [r3, #32]
 8001f2a:	e008      	b.n	8001f3e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	1c59      	adds	r1, r3, #1
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6211      	str	r1, [r2, #32]
 8001f36:	781a      	ldrb	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	3b01      	subs	r3, #1
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10f      	bne.n	8001f72 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f60:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f70:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e000      	b.n	8001f78 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001f76:	2302      	movs	r3, #2
  }
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f9a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ff51 	bl	8001e4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	//_//_HAL_UART_FLUSH_DRREGISTER(&huart2);

  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b22      	cmp	r3, #34	; 0x22
 8001fc6:	d175      	bne.n	80020b4 <UART_Receive_IT+0x100>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fd0:	d123      	bne.n	800201a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10e      	bne.n	8001ffe <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	1c9a      	adds	r2, r3, #2
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
 8001ffc:	e026      	b.n	800204c <UART_Receive_IT+0x98>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	b29b      	uxth	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	629a      	str	r2, [r3, #40]	; 0x28
 8002018:	e018      	b.n	800204c <UART_Receive_IT+0x98>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d107      	bne.n	8002032 <UART_Receive_IT+0x7e>
      {

       *huart->pRxBuffPtr = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	e00c      	b.n	800204c <UART_Receive_IT+0x98>
//        	Rx_Count++;

   }
      else
      {
       *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203e:	1c58      	adds	r0, r3, #1
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	6288      	str	r0, [r1, #40]	; 0x28
 8002044:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	701a      	strb	r2, [r3, #0]
      }
    }
    huart->pRxBuffPtr++;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferCount--;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	85da      	strh	r2, [r3, #46]	; 0x2e
    if ( huart->RxXferCount == 0U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d120      	bne.n	80020b0 <UART_Receive_IT+0xfc>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0220 	bic.w	r2, r2, #32
 800207c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800208c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695a      	ldr	r2, [r3, #20]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0201 	bic.w	r2, r2, #1
 800209c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe fd2a 	bl	8000b00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e002      	b.n	80020b6 <UART_Receive_IT+0x102>
    }
    return HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e000      	b.n	80020b6 <UART_Receive_IT+0x102>
  }
  else
  {
    return HAL_BUSY;
 80020b4:	2302      	movs	r3, #2
  }
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <__libc_init_array>:
 80020c0:	b570      	push	{r4, r5, r6, lr}
 80020c2:	4e0d      	ldr	r6, [pc, #52]	; (80020f8 <__libc_init_array+0x38>)
 80020c4:	4c0d      	ldr	r4, [pc, #52]	; (80020fc <__libc_init_array+0x3c>)
 80020c6:	1ba4      	subs	r4, r4, r6
 80020c8:	10a4      	asrs	r4, r4, #2
 80020ca:	2500      	movs	r5, #0
 80020cc:	42a5      	cmp	r5, r4
 80020ce:	d109      	bne.n	80020e4 <__libc_init_array+0x24>
 80020d0:	4e0b      	ldr	r6, [pc, #44]	; (8002100 <__libc_init_array+0x40>)
 80020d2:	4c0c      	ldr	r4, [pc, #48]	; (8002104 <__libc_init_array+0x44>)
 80020d4:	f000 f820 	bl	8002118 <_init>
 80020d8:	1ba4      	subs	r4, r4, r6
 80020da:	10a4      	asrs	r4, r4, #2
 80020dc:	2500      	movs	r5, #0
 80020de:	42a5      	cmp	r5, r4
 80020e0:	d105      	bne.n	80020ee <__libc_init_array+0x2e>
 80020e2:	bd70      	pop	{r4, r5, r6, pc}
 80020e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020e8:	4798      	blx	r3
 80020ea:	3501      	adds	r5, #1
 80020ec:	e7ee      	b.n	80020cc <__libc_init_array+0xc>
 80020ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020f2:	4798      	blx	r3
 80020f4:	3501      	adds	r5, #1
 80020f6:	e7f2      	b.n	80020de <__libc_init_array+0x1e>
 80020f8:	0800218c 	.word	0x0800218c
 80020fc:	0800218c 	.word	0x0800218c
 8002100:	0800218c 	.word	0x0800218c
 8002104:	08002190 	.word	0x08002190

08002108 <memset>:
 8002108:	4402      	add	r2, r0
 800210a:	4603      	mov	r3, r0
 800210c:	4293      	cmp	r3, r2
 800210e:	d100      	bne.n	8002112 <memset+0xa>
 8002110:	4770      	bx	lr
 8002112:	f803 1b01 	strb.w	r1, [r3], #1
 8002116:	e7f9      	b.n	800210c <memset+0x4>

08002118 <_init>:
 8002118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800211a:	bf00      	nop
 800211c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800211e:	bc08      	pop	{r3}
 8002120:	469e      	mov	lr, r3
 8002122:	4770      	bx	lr

08002124 <_fini>:
 8002124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002126:	bf00      	nop
 8002128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800212a:	bc08      	pop	{r3}
 800212c:	469e      	mov	lr, r3
 800212e:	4770      	bx	lr
