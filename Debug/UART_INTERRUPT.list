
UART_INTERRUPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000277c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08002904  08002904  00012904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002db8  08002db8  00020050  2**0
                  CONTENTS
  4 .ARM          00000008  08002db8  08002db8  00012db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002dc0  08002dc0  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dc0  08002dc0  00012dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dc4  08002dc4  00012dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08002dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  20000050  08002e18  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  08002e18  000206b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b695  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f5a  00000000  00000000  0002b715  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007e0  00000000  00000000  0002d670  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006f8  00000000  00000000  0002de50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000212cc  00000000  00000000  0002e548  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007c14  00000000  00000000  0004f814  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c32af  00000000  00000000  00057428  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011a6d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e84  00000000  00000000  0011a754  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000050 	.word	0x20000050
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080028ec 	.word	0x080028ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000054 	.word	0x20000054
 80001c4:	080028ec 	.word	0x080028ec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <PeripheralInit>:

#include "Peripheral_Init.h"


void PeripheralInit()
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	      SystemClock_Config();
 80004cc:	f000 fe9c 	bl	8001208 <SystemClock_Config>
		  MX_GPIO_Init();
 80004d0:	f000 f80a 	bl	80004e8 <MX_GPIO_Init>
		  gsm.Flags.Start= true;
 80004d4:	4a03      	ldr	r2, [pc, #12]	; (80004e4 <PeripheralInit+0x1c>)
 80004d6:	7813      	ldrb	r3, [r2, #0]
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	7013      	strb	r3, [r2, #0]
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	200000b0 	.word	0x200000b0

080004e8 <MX_GPIO_Init>:
	  HAL_UART_Receive_IT(&huart2,&Uart_Rx_Buffer, sizeof(Uart_Rx_Buffer));
	  gsm.Flags.GsmInitialised= true;
}

void MX_GPIO_Init(void)
  {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08c      	sub	sp, #48	; 0x30
 80004ec:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 031c 	add.w	r3, r7, #28
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	61bb      	str	r3, [r7, #24]
 8000502:	4b71      	ldr	r3, [pc, #452]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a70      	ldr	r2, [pc, #448]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000508:	f043 0310 	orr.w	r3, r3, #16
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b6e      	ldr	r3, [pc, #440]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0310 	and.w	r3, r3, #16
 8000516:	61bb      	str	r3, [r7, #24]
 8000518:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	4b6a      	ldr	r3, [pc, #424]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a69      	ldr	r2, [pc, #420]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b67      	ldr	r3, [pc, #412]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	617b      	str	r3, [r7, #20]
 8000534:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	613b      	str	r3, [r7, #16]
 800053a:	4b63      	ldr	r3, [pc, #396]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a62      	ldr	r2, [pc, #392]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b60      	ldr	r3, [pc, #384]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054e:	613b      	str	r3, [r7, #16]
 8000550:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	4b5c      	ldr	r3, [pc, #368]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a5b      	ldr	r2, [pc, #364]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b59      	ldr	r3, [pc, #356]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	4b55      	ldr	r3, [pc, #340]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a54      	ldr	r2, [pc, #336]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b52      	ldr	r3, [pc, #328]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	4b4e      	ldr	r3, [pc, #312]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a4d      	ldr	r2, [pc, #308]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b4b      	ldr	r3, [pc, #300]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0308 	and.w	r3, r3, #8
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2108      	movs	r1, #8
 80005aa:	4848      	ldr	r0, [pc, #288]	; (80006cc <MX_GPIO_Init+0x1e4>)
 80005ac:	f001 fa9a 	bl	8001ae4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2101      	movs	r1, #1
 80005b4:	4846      	ldr	r0, [pc, #280]	; (80006d0 <MX_GPIO_Init+0x1e8>)
 80005b6:	f001 fa95 	bl	8001ae4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005ba:	2200      	movs	r2, #0
 80005bc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005c0:	4844      	ldr	r0, [pc, #272]	; (80006d4 <MX_GPIO_Init+0x1ec>)
 80005c2:	f001 fa8f 	bl	8001ae4 <HAL_GPIO_WritePin>
                            |Audio_RST_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin : CS_I2C_SPI_Pin */
    GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005c6:	2308      	movs	r3, #8
 80005c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	4619      	mov	r1, r3
 80005dc:	483b      	ldr	r0, [pc, #236]	; (80006cc <MX_GPIO_Init+0x1e4>)
 80005de:	f001 f8e7 	bl	80017b0 <HAL_GPIO_Init>

    /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
    GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005e2:	2301      	movs	r3, #1
 80005e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e6:	2301      	movs	r3, #1
 80005e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	4619      	mov	r1, r3
 80005f8:	4835      	ldr	r0, [pc, #212]	; (80006d0 <MX_GPIO_Init+0x1e8>)
 80005fa:	f001 f8d9 	bl	80017b0 <HAL_GPIO_Init>

    /*Configure GPIO pin : PDM_OUT_Pin */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005fe:	2308      	movs	r3, #8
 8000600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000602:	2302      	movs	r3, #2
 8000604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2300      	movs	r3, #0
 800060c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800060e:	2305      	movs	r3, #5
 8000610:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000612:	f107 031c 	add.w	r3, r7, #28
 8000616:	4619      	mov	r1, r3
 8000618:	482d      	ldr	r0, [pc, #180]	; (80006d0 <MX_GPIO_Init+0x1e8>)
 800061a:	f001 f8c9 	bl	80017b0 <HAL_GPIO_Init>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 800061e:	2301      	movs	r3, #1
 8000620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <MX_GPIO_Init+0x1f0>)
 8000624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	482a      	ldr	r0, [pc, #168]	; (80006dc <MX_GPIO_Init+0x1f4>)
 8000632:	f001 f8bd 	bl	80017b0 <HAL_GPIO_Init>

    /*Configure GPIO pin : BOOT1_Pin */
    GPIO_InitStruct.Pin = BOOT1_Pin;
 8000636:	2304      	movs	r3, #4
 8000638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063a:	2300      	movs	r3, #0
 800063c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	4619      	mov	r1, r3
 8000648:	4825      	ldr	r0, [pc, #148]	; (80006e0 <MX_GPIO_Init+0x1f8>)
 800064a:	f001 f8b1 	bl	80017b0 <HAL_GPIO_Init>

    /*Configure GPIO pin : CLK_IN_Pin */
    GPIO_InitStruct.Pin = CLK_IN_Pin;
 800064e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000654:	2302      	movs	r3, #2
 8000656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2300      	movs	r3, #0
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000660:	2305      	movs	r3, #5
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4619      	mov	r1, r3
 800066a:	481d      	ldr	r0, [pc, #116]	; (80006e0 <MX_GPIO_Init+0x1f8>)
 800066c:	f001 f8a0 	bl	80017b0 <HAL_GPIO_Init>

    /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                             Audio_RST_Pin */
    GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000670:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000674:	61fb      	str	r3, [r7, #28]
                            |Audio_RST_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	4619      	mov	r1, r3
 8000688:	4812      	ldr	r0, [pc, #72]	; (80006d4 <MX_GPIO_Init+0x1ec>)
 800068a:	f001 f891 	bl	80017b0 <HAL_GPIO_Init>

    /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
    GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800068e:	2320      	movs	r3, #32
 8000690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000692:	2300      	movs	r3, #0
 8000694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <MX_GPIO_Init+0x1ec>)
 80006a2:	f001 f885 	bl	80017b0 <HAL_GPIO_Init>

    /*Configure GPIO pin : MEMS_INT2_Pin */
    GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80006a6:	2302      	movs	r3, #2
 80006a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_GPIO_Init+0x1f0>)
 80006ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_GPIO_Init+0x1e4>)
 80006ba:	f001 f879 	bl	80017b0 <HAL_GPIO_Init>

  }
 80006be:	bf00      	nop
 80006c0:	3730      	adds	r7, #48	; 0x30
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40020800 	.word	0x40020800
 80006d4:	40020c00 	.word	0x40020c00
 80006d8:	10120000 	.word	0x10120000
 80006dc:	40020000 	.word	0x40020000
 80006e0:	40020400 	.word	0x40020400

080006e4 <xcrc32>:
make it easy to compose the values of multiple blocks.
@end deftypefn
*/
//0x2991a17c
unsigned int xcrc32 (const unsigned char *buf, int len, unsigned int init)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b087      	sub	sp, #28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  unsigned int crc = init;     //  crc << 8 = ffffff00    ,
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	617b      	str	r3, [r7, #20]
  while (len--)
 80006f4:	e00f      	b.n	8000716 <xcrc32+0x32>
    {
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	021a      	lsls	r2, r3, #8
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	0e1b      	lsrs	r3, r3, #24
 80006fe:	68f9      	ldr	r1, [r7, #12]
 8000700:	7809      	ldrb	r1, [r1, #0]
 8000702:	404b      	eors	r3, r1
 8000704:	b2db      	uxtb	r3, r3
 8000706:	490a      	ldr	r1, [pc, #40]	; (8000730 <xcrc32+0x4c>)
 8000708:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800070c:	4053      	eors	r3, r2
 800070e:	617b      	str	r3, [r7, #20]
      buf++;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	3301      	adds	r3, #1
 8000714:	60fb      	str	r3, [r7, #12]
  while (len--)
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	1e5a      	subs	r2, r3, #1
 800071a:	60ba      	str	r2, [r7, #8]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d1ea      	bne.n	80006f6 <xcrc32+0x12>
    }
  return crc;
 8000720:	697b      	ldr	r3, [r7, #20]
}
 8000722:	4618      	mov	r0, r3
 8000724:	371c      	adds	r7, #28
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	080029a8 	.word	0x080029a8

08000734 <verify_crc>:
//		return 0;
//	}
//}

uint16_t verify_crc(char* str, uint16_t length)
{
 8000734:	b5b0      	push	{r4, r5, r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	807b      	strh	r3, [r7, #2]
 8000740:	466b      	mov	r3, sp
 8000742:	461d      	mov	r5, r3
	char crc_buff[9];
	char crc_buff_RX[length];
 8000744:	8878      	ldrh	r0, [r7, #2]
 8000746:	4603      	mov	r3, r0
 8000748:	3b01      	subs	r3, #1
 800074a:	61fb      	str	r3, [r7, #28]
 800074c:	b281      	uxth	r1, r0
 800074e:	f04f 0200 	mov.w	r2, #0
 8000752:	f04f 0300 	mov.w	r3, #0
 8000756:	f04f 0400 	mov.w	r4, #0
 800075a:	00d4      	lsls	r4, r2, #3
 800075c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000760:	00cb      	lsls	r3, r1, #3
 8000762:	b281      	uxth	r1, r0
 8000764:	f04f 0200 	mov.w	r2, #0
 8000768:	f04f 0300 	mov.w	r3, #0
 800076c:	f04f 0400 	mov.w	r4, #0
 8000770:	00d4      	lsls	r4, r2, #3
 8000772:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000776:	00cb      	lsls	r3, r1, #3
 8000778:	4603      	mov	r3, r0
 800077a:	3307      	adds	r3, #7
 800077c:	08db      	lsrs	r3, r3, #3
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	ebad 0d03 	sub.w	sp, sp, r3
 8000784:	466b      	mov	r3, sp
 8000786:	3300      	adds	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
	unsigned int CRCRx;
	str_copy_count(str+length,crc_buff,9);
 800078a:	887b      	ldrh	r3, [r7, #2]
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	4413      	add	r3, r2
 8000790:	f107 0108 	add.w	r1, r7, #8
 8000794:	2209      	movs	r2, #9
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f85f 	bl	800085a <str_copy_count>
	str_copy_count(str,crc_buff_RX,length);
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	887a      	ldrh	r2, [r7, #2]
 80007a0:	4619      	mov	r1, r3
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f859 	bl	800085a <str_copy_count>
	CRCRx = xcrc32 (crc_buff_RX,133,0xffffffff);
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	f04f 32ff 	mov.w	r2, #4294967295
 80007ae:	2185      	movs	r1, #133	; 0x85
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff97 	bl	80006e4 <xcrc32>
 80007b6:	6178      	str	r0, [r7, #20]
	if( gsm.gsm_data.CRC_Value == CRCRx)
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <verify_crc+0xa0>)
 80007ba:	f8d3 34cd 	ldr.w	r3, [r3, #1229]	; 0x4cd
 80007be:	697a      	ldr	r2, [r7, #20]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d101      	bne.n	80007c8 <verify_crc+0x94>
	{
		return 1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	e000      	b.n	80007ca <verify_crc+0x96>
	}
	else
	{
		return 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	46ad      	mov	sp, r5
	}

}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bdb0      	pop	{r4, r5, r7, pc}
 80007d4:	200000b0 	.word	0x200000b0

080007d8 <str_copy_ram_lim_ret>:
//char CRC_Value[15];
uint32_t CRC_Value1;
uint32_t CRC_Value2;

uint32_t str_copy_ram_lim_ret( char *rec_src_ram_add,  char *rec_dest_ram_add,  char rec_delimitter,char src_dest)
{
 80007d8:	b480      	push	{r7}
 80007da:	b087      	sub	sp, #28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	4611      	mov	r1, r2
 80007e4:	461a      	mov	r2, r3
 80007e6:	460b      	mov	r3, r1
 80007e8:	71fb      	strb	r3, [r7, #7]
 80007ea:	4613      	mov	r3, r2
 80007ec:	71bb      	strb	r3, [r7, #6]
     char *rec_src_add = rec_src_ram_add;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	617b      	str	r3, [r7, #20]
    while(*rec_src_ram_add != rec_delimitter)
 80007f2:	e007      	b.n	8000804 <str_copy_ram_lim_ret+0x2c>
        *rec_dest_ram_add++ = *rec_src_ram_add++;
 80007f4:	68fa      	ldr	r2, [r7, #12]
 80007f6:	1c53      	adds	r3, r2, #1
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	1c59      	adds	r1, r3, #1
 80007fe:	60b9      	str	r1, [r7, #8]
 8000800:	7812      	ldrb	r2, [r2, #0]
 8000802:	701a      	strb	r2, [r3, #0]
    while(*rec_src_ram_add != rec_delimitter)
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	79fa      	ldrb	r2, [r7, #7]
 800080a:	429a      	cmp	r2, r3
 800080c:	d1f2      	bne.n	80007f4 <str_copy_ram_lim_ret+0x1c>
    return (rec_src_ram_add - rec_src_add + src_dest);
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	1ad2      	subs	r2, r2, r3
 8000814:	79bb      	ldrb	r3, [r7, #6]
 8000816:	4413      	add	r3, r2
}
 8000818:	4618      	mov	r0, r3
 800081a:	371c      	adds	r7, #28
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <str_copy_ram_lim>:
    return(1);
}
//
//
void str_copy_ram_lim( char *rec_src_ram_add,  char *rec_dest_ram_add,  char rec_delimitter)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	4613      	mov	r3, r2
 8000830:	71fb      	strb	r3, [r7, #7]
    while(*rec_src_ram_add != rec_delimitter)
 8000832:	e007      	b.n	8000844 <str_copy_ram_lim+0x20>
        *rec_dest_ram_add++ = *rec_src_ram_add++;
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	1c53      	adds	r3, r2, #1
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	1c59      	adds	r1, r3, #1
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	7812      	ldrb	r2, [r2, #0]
 8000842:	701a      	strb	r2, [r3, #0]
    while(*rec_src_ram_add != rec_delimitter)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	79fa      	ldrb	r2, [r7, #7]
 800084a:	429a      	cmp	r2, r3
 800084c:	d1f2      	bne.n	8000834 <str_copy_ram_lim+0x10>
}
 800084e:	bf00      	nop
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <str_copy_count>:

int str_copy_count(char* Source_Ram_address, char* Destination_Ram_address, uint32_t length)
{
 800085a:	b480      	push	{r7}
 800085c:	b087      	sub	sp, #28
 800085e:	af00      	add	r7, sp, #0
 8000860:	60f8      	str	r0, [r7, #12]
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
    int count=0;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
	while( count != length)
 800086a:	e00a      	b.n	8000882 <str_copy_count+0x28>
		{
			  *Destination_Ram_address++ = *Source_Ram_address++;
 800086c:	68fa      	ldr	r2, [r7, #12]
 800086e:	1c53      	adds	r3, r2, #1
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	1c59      	adds	r1, r3, #1
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	7812      	ldrb	r2, [r2, #0]
 800087a:	701a      	strb	r2, [r3, #0]
			  count++;
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	3301      	adds	r3, #1
 8000880:	617b      	str	r3, [r7, #20]
	while( count != length)
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	429a      	cmp	r2, r3
 8000888:	d1f0      	bne.n	800086c <str_copy_count+0x12>

		}
}
 800088a:	bf00      	nop
 800088c:	4618      	mov	r0, r3
 800088e:	371c      	adds	r7, #28
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <convert_crcint_to_char>:


int convert_crcint_to_char(uint32_t num, char *str,uint32_t length)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
	//int temp=count_intlength(num);
	if(num == 0)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d104      	bne.n	80008b4 <convert_crcint_to_char+0x1c>
	{
		*str  = '0';
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	2230      	movs	r2, #48	; 0x30
 80008ae:	701a      	strb	r2, [r3, #0]
		return 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	e0df      	b.n	8000a74 <convert_crcint_to_char+0x1dc>
	}
	switch(length)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	2b08      	cmp	r3, #8
 80008ba:	f200 80d7 	bhi.w	8000a6c <convert_crcint_to_char+0x1d4>
 80008be:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <convert_crcint_to_char+0x2c>)
 80008c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c4:	08000a53 	.word	0x08000a53
 80008c8:	08000a25 	.word	0x08000a25
 80008cc:	080009f9 	.word	0x080009f9
 80008d0:	080009cb 	.word	0x080009cb
 80008d4:	0800099d 	.word	0x0800099d
 80008d8:	0800096d 	.word	0x0800096d
 80008dc:	08000941 	.word	0x08000941
 80008e0:	08000915 	.word	0x08000915
 80008e4:	080008e9 	.word	0x080008e9
	{
//		case 10:
//			*str++ = num/1000000000 + 0x30;
//			num =  num%1000000000;
		case 9:
			*str++ = num/100000000 + 0x30;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	4a65      	ldr	r2, [pc, #404]	; (8000a80 <convert_crcint_to_char+0x1e8>)
 80008ec:	fba2 2303 	umull	r2, r3, r2, r3
 80008f0:	0e5b      	lsrs	r3, r3, #25
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	1c59      	adds	r1, r3, #1
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	3230      	adds	r2, #48	; 0x30
 80008fc:	b2d2      	uxtb	r2, r2
 80008fe:	701a      	strb	r2, [r3, #0]
			num =  num%100000000;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4a5f      	ldr	r2, [pc, #380]	; (8000a80 <convert_crcint_to_char+0x1e8>)
 8000904:	fba2 1203 	umull	r1, r2, r2, r3
 8000908:	0e52      	lsrs	r2, r2, #25
 800090a:	495e      	ldr	r1, [pc, #376]	; (8000a84 <convert_crcint_to_char+0x1ec>)
 800090c:	fb01 f202 	mul.w	r2, r1, r2
 8000910:	1a9b      	subs	r3, r3, r2
 8000912:	60fb      	str	r3, [r7, #12]
		case 8:
			*str++ = num/10000000 + 0x30;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	4a5c      	ldr	r2, [pc, #368]	; (8000a88 <convert_crcint_to_char+0x1f0>)
 8000918:	fba2 2303 	umull	r2, r3, r2, r3
 800091c:	0d9b      	lsrs	r3, r3, #22
 800091e:	b2da      	uxtb	r2, r3
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	1c59      	adds	r1, r3, #1
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	3230      	adds	r2, #48	; 0x30
 8000928:	b2d2      	uxtb	r2, r2
 800092a:	701a      	strb	r2, [r3, #0]
			num =  num%10000000;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	4a56      	ldr	r2, [pc, #344]	; (8000a88 <convert_crcint_to_char+0x1f0>)
 8000930:	fba2 1203 	umull	r1, r2, r2, r3
 8000934:	0d92      	lsrs	r2, r2, #22
 8000936:	4955      	ldr	r1, [pc, #340]	; (8000a8c <convert_crcint_to_char+0x1f4>)
 8000938:	fb01 f202 	mul.w	r2, r1, r2
 800093c:	1a9b      	subs	r3, r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
		case 7:
			*str++ = num/1000000 + 0x30;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	4a53      	ldr	r2, [pc, #332]	; (8000a90 <convert_crcint_to_char+0x1f8>)
 8000944:	fba2 2303 	umull	r2, r3, r2, r3
 8000948:	0c9b      	lsrs	r3, r3, #18
 800094a:	b2da      	uxtb	r2, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	1c59      	adds	r1, r3, #1
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	3230      	adds	r2, #48	; 0x30
 8000954:	b2d2      	uxtb	r2, r2
 8000956:	701a      	strb	r2, [r3, #0]
			num =  num%1000000;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4a4d      	ldr	r2, [pc, #308]	; (8000a90 <convert_crcint_to_char+0x1f8>)
 800095c:	fba2 1203 	umull	r1, r2, r2, r3
 8000960:	0c92      	lsrs	r2, r2, #18
 8000962:	494c      	ldr	r1, [pc, #304]	; (8000a94 <convert_crcint_to_char+0x1fc>)
 8000964:	fb01 f202 	mul.w	r2, r1, r2
 8000968:	1a9b      	subs	r3, r3, r2
 800096a:	60fb      	str	r3, [r7, #12]
		case 6:
			*str++ = num/100000 + 0x30;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	095b      	lsrs	r3, r3, #5
 8000970:	4a49      	ldr	r2, [pc, #292]	; (8000a98 <convert_crcint_to_char+0x200>)
 8000972:	fba2 2303 	umull	r2, r3, r2, r3
 8000976:	09db      	lsrs	r3, r3, #7
 8000978:	b2da      	uxtb	r2, r3
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	1c59      	adds	r1, r3, #1
 800097e:	60b9      	str	r1, [r7, #8]
 8000980:	3230      	adds	r2, #48	; 0x30
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	701a      	strb	r2, [r3, #0]
			num =  num%100000;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	095a      	lsrs	r2, r3, #5
 800098a:	4943      	ldr	r1, [pc, #268]	; (8000a98 <convert_crcint_to_char+0x200>)
 800098c:	fba1 1202 	umull	r1, r2, r1, r2
 8000990:	09d2      	lsrs	r2, r2, #7
 8000992:	4942      	ldr	r1, [pc, #264]	; (8000a9c <convert_crcint_to_char+0x204>)
 8000994:	fb01 f202 	mul.w	r2, r1, r2
 8000998:	1a9b      	subs	r3, r3, r2
 800099a:	60fb      	str	r3, [r7, #12]
		case 5:
			*str++ = num/10000 + 0x30;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	4a40      	ldr	r2, [pc, #256]	; (8000aa0 <convert_crcint_to_char+0x208>)
 80009a0:	fba2 2303 	umull	r2, r3, r2, r3
 80009a4:	0b5b      	lsrs	r3, r3, #13
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	1c59      	adds	r1, r3, #1
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	3230      	adds	r2, #48	; 0x30
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	701a      	strb	r2, [r3, #0]
			num =  num%10000;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4a3a      	ldr	r2, [pc, #232]	; (8000aa0 <convert_crcint_to_char+0x208>)
 80009b8:	fba2 1203 	umull	r1, r2, r2, r3
 80009bc:	0b52      	lsrs	r2, r2, #13
 80009be:	f242 7110 	movw	r1, #10000	; 0x2710
 80009c2:	fb01 f202 	mul.w	r2, r1, r2
 80009c6:	1a9b      	subs	r3, r3, r2
 80009c8:	60fb      	str	r3, [r7, #12]
		case 4:
			*str++ = num/1000 + 0x30;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4a35      	ldr	r2, [pc, #212]	; (8000aa4 <convert_crcint_to_char+0x20c>)
 80009ce:	fba2 2303 	umull	r2, r3, r2, r3
 80009d2:	099b      	lsrs	r3, r3, #6
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	1c59      	adds	r1, r3, #1
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	3230      	adds	r2, #48	; 0x30
 80009de:	b2d2      	uxtb	r2, r2
 80009e0:	701a      	strb	r2, [r3, #0]
			num =  num%1000;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	4a2f      	ldr	r2, [pc, #188]	; (8000aa4 <convert_crcint_to_char+0x20c>)
 80009e6:	fba2 1203 	umull	r1, r2, r2, r3
 80009ea:	0992      	lsrs	r2, r2, #6
 80009ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009f0:	fb01 f202 	mul.w	r2, r1, r2
 80009f4:	1a9b      	subs	r3, r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]
		case 3:
			*str++ = num/100 + 0x30;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	4a2b      	ldr	r2, [pc, #172]	; (8000aa8 <convert_crcint_to_char+0x210>)
 80009fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000a00:	095b      	lsrs	r3, r3, #5
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	1c59      	adds	r1, r3, #1
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	3230      	adds	r2, #48	; 0x30
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	701a      	strb	r2, [r3, #0]
			num =  num%100;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4a25      	ldr	r2, [pc, #148]	; (8000aa8 <convert_crcint_to_char+0x210>)
 8000a14:	fba2 1203 	umull	r1, r2, r2, r3
 8000a18:	0952      	lsrs	r2, r2, #5
 8000a1a:	2164      	movs	r1, #100	; 0x64
 8000a1c:	fb01 f202 	mul.w	r2, r1, r2
 8000a20:	1a9b      	subs	r3, r3, r2
 8000a22:	60fb      	str	r3, [r7, #12]
		case 2:
			*str++ = (num/10) + 0x30;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4a21      	ldr	r2, [pc, #132]	; (8000aac <convert_crcint_to_char+0x214>)
 8000a28:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2c:	08db      	lsrs	r3, r3, #3
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	1c59      	adds	r1, r3, #1
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	3230      	adds	r2, #48	; 0x30
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	701a      	strb	r2, [r3, #0]
			num =  num%10;
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <convert_crcint_to_char+0x214>)
 8000a40:	fba3 1302 	umull	r1, r3, r3, r2
 8000a44:	08d9      	lsrs	r1, r3, #3
 8000a46:	460b      	mov	r3, r1
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	60fb      	str	r3, [r7, #12]
		case 1:
			*str++ = num + 0x30;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	1c59      	adds	r1, r3, #1
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	3230      	adds	r2, #48	; 0x30
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	701a      	strb	r2, [r3, #0]
			num=0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
			break;
 8000a66:	bf00      	nop
        default:
        	*str = '/0';
        	return 0;
	}
	return 1;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e003      	b.n	8000a74 <convert_crcint_to_char+0x1dc>
        	*str = '/0';
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	2230      	movs	r2, #48	; 0x30
 8000a70:	701a      	strb	r2, [r3, #0]
        	return 0;
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	55e63b89 	.word	0x55e63b89
 8000a84:	05f5e100 	.word	0x05f5e100
 8000a88:	6b5fca6b 	.word	0x6b5fca6b
 8000a8c:	00989680 	.word	0x00989680
 8000a90:	431bde83 	.word	0x431bde83
 8000a94:	000f4240 	.word	0x000f4240
 8000a98:	0a7c5ac5 	.word	0x0a7c5ac5
 8000a9c:	000186a0 	.word	0x000186a0
 8000aa0:	d1b71759 	.word	0xd1b71759
 8000aa4:	10624dd3 	.word	0x10624dd3
 8000aa8:	51eb851f 	.word	0x51eb851f
 8000aac:	cccccccd 	.word	0xcccccccd

08000ab0 <GenerateStausPacket>:
//CRC_Value= xcrc32 (gsm.TxData,4,1001);
void GenerateStausPacket()
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
//    memcpy(Gsm.GsmDataUni.GsmDataStru.utc_timeStamp,TimeStmp , sizeof(TimeStmp));

      memcpy(gsm.gsm_data.DeviceID,DeviceID, sizeof(DeviceID));
 8000ab6:	4ba3      	ldr	r3, [pc, #652]	; (8000d44 <GenerateStausPacket+0x294>)
 8000ab8:	4aa3      	ldr	r2, [pc, #652]	; (8000d48 <GenerateStausPacket+0x298>)
 8000aba:	f203 4477 	addw	r4, r3, #1143	; 0x477
 8000abe:	4613      	mov	r3, r2
 8000ac0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000ac2:	6020      	str	r0, [r4, #0]
 8000ac4:	6061      	str	r1, [r4, #4]
 8000ac6:	60a2      	str	r2, [r4, #8]
 8000ac8:	881a      	ldrh	r2, [r3, #0]
 8000aca:	789b      	ldrb	r3, [r3, #2]
 8000acc:	81a2      	strh	r2, [r4, #12]
 8000ace:	73a3      	strb	r3, [r4, #14]
      memcpy(gsm.gsm_data.SwVer ,SwVer, sizeof(SwVer));
 8000ad0:	4b9c      	ldr	r3, [pc, #624]	; (8000d44 <GenerateStausPacket+0x294>)
 8000ad2:	4a9e      	ldr	r2, [pc, #632]	; (8000d4c <GenerateStausPacket+0x29c>)
 8000ad4:	f203 4386 	addw	r3, r3, #1158	; 0x486
 8000ad8:	6810      	ldr	r0, [r2, #0]
 8000ada:	6018      	str	r0, [r3, #0]
 8000adc:	7912      	ldrb	r2, [r2, #4]
 8000ade:	711a      	strb	r2, [r3, #4]
      memcpy(gsm.gsm_data.RecordID ,RecordID, sizeof(RecordID));
 8000ae0:	4b98      	ldr	r3, [pc, #608]	; (8000d44 <GenerateStausPacket+0x294>)
 8000ae2:	499b      	ldr	r1, [pc, #620]	; (8000d50 <GenerateStausPacket+0x2a0>)
 8000ae4:	f203 428b 	addw	r2, r3, #1163	; 0x48b
 8000ae8:	460b      	mov	r3, r1
 8000aea:	cb03      	ldmia	r3!, {r0, r1}
 8000aec:	6010      	str	r0, [r2, #0]
 8000aee:	6051      	str	r1, [r2, #4]
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	8113      	strh	r3, [r2, #8]
      memcpy(gsm.gsm_data.Status_Port,Status_Port , sizeof(Status_Port));
 8000af4:	4b93      	ldr	r3, [pc, #588]	; (8000d44 <GenerateStausPacket+0x294>)
 8000af6:	4a97      	ldr	r2, [pc, #604]	; (8000d54 <GenerateStausPacket+0x2a4>)
 8000af8:	f203 43a9 	addw	r3, r3, #1193	; 0x4a9
 8000afc:	6810      	ldr	r0, [r2, #0]
 8000afe:	6018      	str	r0, [r3, #0]
 8000b00:	7912      	ldrb	r2, [r2, #4]
 8000b02:	711a      	strb	r2, [r3, #4]
      memcpy(gsm.gsm_data.Command_Port,Command_Port , sizeof(Command_Port));
 8000b04:	4b8f      	ldr	r3, [pc, #572]	; (8000d44 <GenerateStausPacket+0x294>)
 8000b06:	4a94      	ldr	r2, [pc, #592]	; (8000d58 <GenerateStausPacket+0x2a8>)
 8000b08:	f203 43ae 	addw	r3, r3, #1198	; 0x4ae
 8000b0c:	6810      	ldr	r0, [r2, #0]
 8000b0e:	6018      	str	r0, [r3, #0]
 8000b10:	7912      	ldrb	r2, [r2, #4]
 8000b12:	711a      	strb	r2, [r3, #4]
      memcpy(gsm.gsm_data.Server_name,Server_name , sizeof(Server_name));
 8000b14:	4b8b      	ldr	r3, [pc, #556]	; (8000d44 <GenerateStausPacket+0x294>)
 8000b16:	4a91      	ldr	r2, [pc, #580]	; (8000d5c <GenerateStausPacket+0x2ac>)
 8000b18:	f203 4495 	addw	r4, r3, #1173	; 0x495
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b20:	6020      	str	r0, [r4, #0]
 8000b22:	6061      	str	r1, [r4, #4]
 8000b24:	60a2      	str	r2, [r4, #8]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	7323      	strb	r3, [r4, #12]
////    Gsm.GsmDataUni.GsmDataStru.VehicalID = "NER12345";
////    Gsm.GsmDataUni.GsmDataStru.RecordID = "12345";
////    Gsm.GsmDataUni.GsmDataStru.SwVer = "1.01";
////    Gsm.GsmDataUni.GsmDataStru.modem_data_status = "1";
//    // start frame
    unsigned char  *char_dest_ptr = &gsm.TxData[L_FRAME_INIT];
 8000b2a:	4b8d      	ldr	r3, [pc, #564]	; (8000d60 <GenerateStausPacket+0x2b0>)
 8000b2c:	60bb      	str	r3, [r7, #8]
        // Device ID
    	char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.DeviceID,char_dest_ptr,0,0);
 8000b2e:	2300      	movs	r3, #0
 8000b30:	2200      	movs	r2, #0
 8000b32:	68b9      	ldr	r1, [r7, #8]
 8000b34:	488b      	ldr	r0, [pc, #556]	; (8000d64 <GenerateStausPacket+0x2b4>)
 8000b36:	f7ff fe4f 	bl	80007d8 <str_copy_ram_lim_ret>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	4413      	add	r3, r2
 8000b40:	60bb      	str	r3, [r7, #8]
    	*char_dest_ptr++ = ','; // try once
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	1c5a      	adds	r2, r3, #1
 8000b46:	60ba      	str	r2, [r7, #8]
 8000b48:	222c      	movs	r2, #44	; 0x2c
 8000b4a:	701a      	strb	r2, [r3, #0]
        // Record ID
		char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.RecordID,char_dest_ptr,0,0);
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	2200      	movs	r2, #0
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	4885      	ldr	r0, [pc, #532]	; (8000d68 <GenerateStausPacket+0x2b8>)
 8000b54:	f7ff fe40 	bl	80007d8 <str_copy_ram_lim_ret>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
		*char_dest_ptr++ = ','; // try once
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	60ba      	str	r2, [r7, #8]
 8000b66:	222c      	movs	r2, #44	; 0x2c
 8000b68:	701a      	strb	r2, [r3, #0]
        // Software Version
		char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.SwVer,char_dest_ptr,0,0);
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	68b9      	ldr	r1, [r7, #8]
 8000b70:	487e      	ldr	r0, [pc, #504]	; (8000d6c <GenerateStausPacket+0x2bc>)
 8000b72:	f7ff fe31 	bl	80007d8 <str_copy_ram_lim_ret>
 8000b76:	4602      	mov	r2, r0
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	60bb      	str	r3, [r7, #8]
		*char_dest_ptr++ = ','; // try once
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	1c5a      	adds	r2, r3, #1
 8000b82:	60ba      	str	r2, [r7, #8]
 8000b84:	222c      	movs	r2, #44	; 0x2c
 8000b86:	701a      	strb	r2, [r3, #0]
    	// imei
        char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.imei,char_dest_ptr,0,0);
 8000b88:	2300      	movs	r3, #0
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	4878      	ldr	r0, [pc, #480]	; (8000d70 <GenerateStausPacket+0x2c0>)
 8000b90:	f7ff fe22 	bl	80007d8 <str_copy_ram_lim_ret>
 8000b94:	4602      	mov	r2, r0
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	4413      	add	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
        *char_dest_ptr++ = ','; // try once
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	60ba      	str	r2, [r7, #8]
 8000ba2:	222c      	movs	r2, #44	; 0x2c
 8000ba4:	701a      	strb	r2, [r3, #0]
        // IMSI
		char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.imsi,char_dest_ptr,0,0);
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	2200      	movs	r2, #0
 8000baa:	68b9      	ldr	r1, [r7, #8]
 8000bac:	4871      	ldr	r0, [pc, #452]	; (8000d74 <GenerateStausPacket+0x2c4>)
 8000bae:	f7ff fe13 	bl	80007d8 <str_copy_ram_lim_ret>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	60bb      	str	r3, [r7, #8]
        *char_dest_ptr++ = ','; // try once
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	1c5a      	adds	r2, r3, #1
 8000bbe:	60ba      	str	r2, [r7, #8]
 8000bc0:	222c      	movs	r2, #44	; 0x2c
 8000bc2:	701a      	strb	r2, [r3, #0]
        // CCID
        char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.ccid,char_dest_ptr,0,0);
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	68b9      	ldr	r1, [r7, #8]
 8000bca:	486b      	ldr	r0, [pc, #428]	; (8000d78 <GenerateStausPacket+0x2c8>)
 8000bcc:	f7ff fe04 	bl	80007d8 <str_copy_ram_lim_ret>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
        *char_dest_ptr++ = ','; // try once
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	60ba      	str	r2, [r7, #8]
 8000bde:	222c      	movs	r2, #44	; 0x2c
 8000be0:	701a      	strb	r2, [r3, #0]
        // Vendor Name
//		char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.GsmDataStru.ccid,char_dest_ptr,0,0);
//		*char_dest_ptr++ = ','; // try once
		//signal strength
		char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.network_strength,char_dest_ptr,0,0);
 8000be2:	2300      	movs	r3, #0
 8000be4:	2200      	movs	r2, #0
 8000be6:	68b9      	ldr	r1, [r7, #8]
 8000be8:	4864      	ldr	r0, [pc, #400]	; (8000d7c <GenerateStausPacket+0x2cc>)
 8000bea:	f7ff fdf5 	bl	80007d8 <str_copy_ram_lim_ret>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60bb      	str	r3, [r7, #8]
		*char_dest_ptr++ = ','; // try once
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	1c5a      	adds	r2, r3, #1
 8000bfa:	60ba      	str	r2, [r7, #8]
 8000bfc:	222c      	movs	r2, #44	; 0x2c
 8000bfe:	701a      	strb	r2, [r3, #0]
//	    *char_dest_ptr++ = ','; // try once
	    //  Module(LTE)
//	     char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.gsm_band,char_dest_ptr,0,0);
//	     *char_dest_ptr++ = ','; // try once
		 //Server Name
		 char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.Server_name,char_dest_ptr,0,0);
 8000c00:	2300      	movs	r3, #0
 8000c02:	2200      	movs	r2, #0
 8000c04:	68b9      	ldr	r1, [r7, #8]
 8000c06:	485e      	ldr	r0, [pc, #376]	; (8000d80 <GenerateStausPacket+0x2d0>)
 8000c08:	f7ff fde6 	bl	80007d8 <str_copy_ram_lim_ret>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	4413      	add	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
		 *char_dest_ptr++ = ','; // try once
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	60ba      	str	r2, [r7, #8]
 8000c1a:	222c      	movs	r2, #44	; 0x2c
 8000c1c:	701a      	strb	r2, [r3, #0]
		 // Status Port
		 char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.Status_Port,char_dest_ptr,0,0);
 8000c1e:	2300      	movs	r3, #0
 8000c20:	2200      	movs	r2, #0
 8000c22:	68b9      	ldr	r1, [r7, #8]
 8000c24:	4857      	ldr	r0, [pc, #348]	; (8000d84 <GenerateStausPacket+0x2d4>)
 8000c26:	f7ff fdd7 	bl	80007d8 <str_copy_ram_lim_ret>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4413      	add	r3, r2
 8000c30:	60bb      	str	r3, [r7, #8]
		 *char_dest_ptr++ = ','; // try once
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	1c5a      	adds	r2, r3, #1
 8000c36:	60ba      	str	r2, [r7, #8]
 8000c38:	222c      	movs	r2, #44	; 0x2c
 8000c3a:	701a      	strb	r2, [r3, #0]
		 // Command Port
		 char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.Command_Port,char_dest_ptr,0,0);
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	2200      	movs	r2, #0
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	4851      	ldr	r0, [pc, #324]	; (8000d88 <GenerateStausPacket+0x2d8>)
 8000c44:	f7ff fdc8 	bl	80007d8 <str_copy_ram_lim_ret>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
		 *char_dest_ptr++ = ','; // try once
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	60ba      	str	r2, [r7, #8]
 8000c56:	222c      	movs	r2, #44	; 0x2c
 8000c58:	701a      	strb	r2, [r3, #0]
		 // date
		 char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.date,char_dest_ptr,0,0);
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	68b9      	ldr	r1, [r7, #8]
 8000c60:	484a      	ldr	r0, [pc, #296]	; (8000d8c <GenerateStausPacket+0x2dc>)
 8000c62:	f7ff fdb9 	bl	80007d8 <str_copy_ram_lim_ret>
 8000c66:	4602      	mov	r2, r0
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	60bb      	str	r3, [r7, #8]
		 *char_dest_ptr++ = ','; // try once
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	1c5a      	adds	r2, r3, #1
 8000c72:	60ba      	str	r2, [r7, #8]
 8000c74:	222c      	movs	r2, #44	; 0x2c
 8000c76:	701a      	strb	r2, [r3, #0]
		// time
        char_dest_ptr += str_copy_ram_lim_ret(gsm.gsm_data.time,char_dest_ptr,0,0);
 8000c78:	2300      	movs	r3, #0
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	4844      	ldr	r0, [pc, #272]	; (8000d90 <GenerateStausPacket+0x2e0>)
 8000c80:	f7ff fdaa 	bl	80007d8 <str_copy_ram_lim_ret>
 8000c84:	4602      	mov	r2, r0
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	4413      	add	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
        *char_dest_ptr++ = ','; // try once
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	1c5a      	adds	r2, r3, #1
 8000c90:	60ba      	str	r2, [r7, #8]
 8000c92:	222c      	movs	r2, #44	; 0x2c
 8000c94:	701a      	strb	r2, [r3, #0]
//        *char_dest_ptr++ = ','; // try once
//
//        char crc_high_byte = 55;
//        char crc_low_byte = 58;
//        //socketTxData  ,  Gsm.socketTxData[L_FRAME_INIT]
        str_copy_ram_lim("STX,",gsm.TxData,0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	493e      	ldr	r1, [pc, #248]	; (8000d94 <GenerateStausPacket+0x2e4>)
 8000c9a:	483f      	ldr	r0, [pc, #252]	; (8000d98 <GenerateStausPacket+0x2e8>)
 8000c9c:	f7ff fdc2 	bl	8000824 <str_copy_ram_lim>
        uint16_t temp_frame_len = L_FRAME_LEN(char_dest_ptr - &gsm.TxData[L_FRAME_INIT]);
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	3307      	adds	r3, #7
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b2e      	ldr	r3, [pc, #184]	; (8000d60 <GenerateStausPacket+0x2b0>)
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	330c      	adds	r3, #12
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	80fb      	strh	r3, [r7, #6]
        convert_integer_to_char(temp_frame_len,&gsm.TxData[L_STX],4);
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	2204      	movs	r2, #4
 8000cb6:	4939      	ldr	r1, [pc, #228]	; (8000d9c <GenerateStausPacket+0x2ec>)
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 fb45 	bl	8001348 <convert_integer_to_char>
  //      gsm.TxData[L_STX+4] = ',';
        gsm.TxData[L_STX+L_FR_LEN]   = gsm.gsm_data.FC_CONFIGURATION;
 8000cbe:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <GenerateStausPacket+0x294>)
 8000cc0:	f893 24cc 	ldrb.w	r2, [r3, #1228]	; 0x4cc
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <GenerateStausPacket+0x294>)
 8000cc6:	f883 24dd 	strb.w	r2, [r3, #1245]	; 0x4dd
        gsm.TxData[L_STX+L_FR_LEN+1] = ',';
 8000cca:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <GenerateStausPacket+0x294>)
 8000ccc:	222c      	movs	r2, #44	; 0x2c
 8000cce:	f883 24de 	strb.w	r2, [r3, #1246]	; 0x4de
//        //crc_high_byte = Gsm.socketTxData[char_dest_ptr - Gsm.socketTxData];
//        //crc_low_byte = Gsm.socketTxData[char_dest_ptr - Gsm.socketTxData + 1];
//        dec_byte_to_char_fixed(&crc_high_byte,&gsm.TxData[char_dest_ptr - gsm.TxData],3);
//        dec_byte_to_char_fixed(&crc_low_byte,&gsm.TxData[char_dest_ptr - gsm.TxData+3],3);
//        crc_generate_ascii_modbus(Gsm.socketTxData,(char_dest_ptr - Gsm.socketTxData));
        gsm.gsm_data.CRC_Value= xcrc32 (gsm.TxData,133,0xffffffff);
 8000cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd6:	2185      	movs	r1, #133	; 0x85
 8000cd8:	482e      	ldr	r0, [pc, #184]	; (8000d94 <GenerateStausPacket+0x2e4>)
 8000cda:	f7ff fd03 	bl	80006e4 <xcrc32>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <GenerateStausPacket+0x294>)
 8000ce4:	f8c3 24cd 	str.w	r2, [r3, #1229]	; 0x4cd
        convert_crcint_to_char(gsm.gsm_data.CRC_Value,&gsm.TxData[char_dest_ptr - gsm.TxData],9);
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <GenerateStausPacket+0x294>)
 8000cea:	f8d3 04cd 	ldr.w	r0, [r3, #1229]	; 0x4cd
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	4a28      	ldr	r2, [pc, #160]	; (8000d94 <GenerateStausPacket+0x2e4>)
 8000cf2:	1a9b      	subs	r3, r3, r2
 8000cf4:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8000cf8:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <GenerateStausPacket+0x294>)
 8000cfa:	4413      	add	r3, r2
 8000cfc:	3306      	adds	r3, #6
 8000cfe:	2209      	movs	r2, #9
 8000d00:	4619      	mov	r1, r3
 8000d02:	f7ff fdc9 	bl	8000898 <convert_crcint_to_char>
        str_copy_ram_lim("ETX",&gsm.TxData[char_dest_ptr - gsm.TxData+9],0);
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	4b22      	ldr	r3, [pc, #136]	; (8000d94 <GenerateStausPacket+0x2e4>)
 8000d0a:	f1c3 0309 	rsb	r3, r3, #9
 8000d0e:	4413      	add	r3, r2
 8000d10:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8000d14:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <GenerateStausPacket+0x294>)
 8000d16:	4413      	add	r3, r2
 8000d18:	3306      	adds	r3, #6
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4820      	ldr	r0, [pc, #128]	; (8000da0 <GenerateStausPacket+0x2f0>)
 8000d20:	f7ff fd80 	bl	8000824 <str_copy_ram_lim>
        gsm.TxDataCnt = char_dest_ptr - gsm.TxData + L_CRC + L_ETX;
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <GenerateStausPacket+0x2e4>)
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	f1c3 030c 	rsb	r3, r3, #12
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	4413      	add	r3, r2
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <GenerateStausPacket+0x294>)
 8000d38:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4
////        GSM.Params.socket[socket].updated = 1;
        //str_copy_count(gsm.TxData,gsm.RxData,(gsm.TxDataCnt-12));
int i=0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
        while(gsm.TxData[i] !='\0')
 8000d40:	e040      	b.n	8000dc4 <GenerateStausPacket+0x314>
 8000d42:	bf00      	nop
 8000d44:	200000b0 	.word	0x200000b0
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	2000001c 	.word	0x2000001c
 8000d50:	20000010 	.word	0x20000010
 8000d54:	20000034 	.word	0x20000034
 8000d58:	2000003c 	.word	0x2000003c
 8000d5c:	20000024 	.word	0x20000024
 8000d60:	2000058f 	.word	0x2000058f
 8000d64:	20000527 	.word	0x20000527
 8000d68:	2000053b 	.word	0x2000053b
 8000d6c:	20000536 	.word	0x20000536
 8000d70:	200000b3 	.word	0x200000b3
 8000d74:	200000c3 	.word	0x200000c3
 8000d78:	200000d3 	.word	0x200000d3
 8000d7c:	200000e7 	.word	0x200000e7
 8000d80:	20000545 	.word	0x20000545
 8000d84:	20000559 	.word	0x20000559
 8000d88:	2000055e 	.word	0x2000055e
 8000d8c:	20000563 	.word	0x20000563
 8000d90:	20000572 	.word	0x20000572
 8000d94:	20000586 	.word	0x20000586
 8000d98:	08002904 	.word	0x08002904
 8000d9c:	20000589 	.word	0x20000589
 8000da0:	0800290c 	.word	0x0800290c
//        	uint16_t count=0;
//        	count = (gsm.TxDataCnt-12);
//        	str_copy_count(gsm.TxData,gsm.RxData,(gsm.TxDataCnt-12));
//        	CRC_Value2 = xcrc32 (gsm.RxData,144,0xffffffff);
        	//break;
        	gsm.RxData[i] = gsm.TxData[i];
 8000da4:	4a18      	ldr	r2, [pc, #96]	; (8000e08 <GenerateStausPacket+0x358>)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	4413      	add	r3, r2
 8000daa:	f203 43d6 	addw	r3, r3, #1238	; 0x4d6
 8000dae:	7819      	ldrb	r1, [r3, #0]
 8000db0:	4a15      	ldr	r2, [pc, #84]	; (8000e08 <GenerateStausPacket+0x358>)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4413      	add	r3, r2
 8000db6:	f203 5369 	addw	r3, r3, #1385	; 0x569
 8000dba:	460a      	mov	r2, r1
 8000dbc:	701a      	strb	r2, [r3, #0]
        	i++;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
        while(gsm.TxData[i] !='\0')
 8000dc4:	4a10      	ldr	r2, [pc, #64]	; (8000e08 <GenerateStausPacket+0x358>)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4413      	add	r3, r2
 8000dca:	f203 43d6 	addw	r3, r3, #1238	; 0x4d6
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1e7      	bne.n	8000da4 <GenerateStausPacket+0x2f4>
        }
        // verification crc function call
        // verify_crc(gsm rx data, length( total length - crc & etx)
      //  CRC_Value2 = xcrc32 (gsm.RxData,144,0xffffffff);
        if(verify_crc(gsm.RxData,(gsm.TxDataCnt-12)))
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <GenerateStausPacket+0x358>)
 8000dd6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8000dda:	3b0c      	subs	r3, #12
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480b      	ldr	r0, [pc, #44]	; (8000e0c <GenerateStausPacket+0x35c>)
 8000de0:	f7ff fca8 	bl	8000734 <verify_crc>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d004      	beq.n	8000df4 <GenerateStausPacket+0x344>
        {
        	gsm.Flags.DataCRCCorrect = 1;
 8000dea:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <GenerateStausPacket+0x358>)
 8000dec:	7893      	ldrb	r3, [r2, #2]
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	7093      	strb	r3, [r2, #2]
        }
        gsm.Flags.DataPacketReady = 1;
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <GenerateStausPacket+0x358>)
 8000df6:	7893      	ldrb	r3, [r2, #2]
 8000df8:	f043 0304 	orr.w	r3, r3, #4
 8000dfc:	7093      	strb	r3, [r2, #2]
   //     Gsm.TxOperation = 1;
}
 8000dfe:	bf00      	nop
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd90      	pop	{r4, r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200000b0 	.word	0x200000b0
 8000e0c:	20000619 	.word	0x20000619

08000e10 <gsm_ccid>:
	return true;
}


void gsm_ccid()
{
 8000e10:	b5b0      	push	{r4, r5, r7, lr}
 8000e12:	b08e      	sub	sp, #56	; 0x38
 8000e14:	af00      	add	r7, sp, #0
	int i=0,j=0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
	//Send_AT_Command(&CCID);
	char Data[]="\r\n+ICCID:8991102005303552671\r\n\r\nOK\r\n";
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <gsm_ccid+0x8c>)
 8000e20:	1d3c      	adds	r4, r7, #4
 8000e22:	461d      	mov	r5, r3
 8000e24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e30:	6020      	str	r0, [r4, #0]
 8000e32:	3404      	adds	r4, #4
 8000e34:	7021      	strb	r1, [r4, #0]
	while(Data[j]!='K')
 8000e36:	e00d      	b.n	8000e54 <gsm_ccid+0x44>
	{
		gsm.RxData[j] = Data[j];
 8000e38:	1d3a      	adds	r2, r7, #4
 8000e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e3c:	4413      	add	r3, r2
 8000e3e:	7819      	ldrb	r1, [r3, #0]
 8000e40:	4a17      	ldr	r2, [pc, #92]	; (8000ea0 <gsm_ccid+0x90>)
 8000e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e44:	4413      	add	r3, r2
 8000e46:	f203 5369 	addw	r3, r3, #1385	; 0x569
 8000e4a:	460a      	mov	r2, r1
 8000e4c:	701a      	strb	r2, [r3, #0]
		j++;
 8000e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e50:	3301      	adds	r3, #1
 8000e52:	633b      	str	r3, [r7, #48]	; 0x30
	while(Data[j]!='K')
 8000e54:	1d3a      	adds	r2, r7, #4
 8000e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e58:	4413      	add	r3, r2
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b4b      	cmp	r3, #75	; 0x4b
 8000e5e:	d1eb      	bne.n	8000e38 <gsm_ccid+0x28>

	}
	unsigned char *pktptr = &gsm.RxData[0];
 8000e60:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <gsm_ccid+0x94>)
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
	pktptr = jump_char_fixed(pktptr,':');
 8000e64:	213a      	movs	r1, #58	; 0x3a
 8000e66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e68:	f000 f968 	bl	800113c <jump_char_fixed>
 8000e6c:	62f8      	str	r0, [r7, #44]	; 0x2c
	//pktptr++;
	while(*pktptr != '\r')
 8000e6e:	e00c      	b.n	8000e8a <gsm_ccid+0x7a>
	{
		gsm.gsm_data.ccid[i++] = *pktptr;
 8000e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	637a      	str	r2, [r7, #52]	; 0x34
 8000e76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e78:	7811      	ldrb	r1, [r2, #0]
 8000e7a:	4a09      	ldr	r2, [pc, #36]	; (8000ea0 <gsm_ccid+0x90>)
 8000e7c:	4413      	add	r3, r2
 8000e7e:	460a      	mov	r2, r1
 8000e80:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		pktptr++;
 8000e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e86:	3301      	adds	r3, #1
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(*pktptr != '\r')
 8000e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b0d      	cmp	r3, #13
 8000e90:	d1ee      	bne.n	8000e70 <gsm_ccid+0x60>
	}
}
 8000e92:	bf00      	nop
 8000e94:	3738      	adds	r7, #56	; 0x38
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bdb0      	pop	{r4, r5, r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	08002910 	.word	0x08002910
 8000ea0:	200000b0 	.word	0x200000b0
 8000ea4:	20000619 	.word	0x20000619

08000ea8 <gsm_imsi>:
void gsm_imsi()
{
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
	int i=0,j=0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]
//	Send_AT_Command(&IMSI);
	char Data[]="\r\n404100530355267\r\n\r\nOK\r\n";
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <gsm_imsi+0x84>)
 8000eb8:	463c      	mov	r4, r7
 8000eba:	461d      	mov	r5, r3
 8000ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ec0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ec4:	c403      	stmia	r4!, {r0, r1}
 8000ec6:	8022      	strh	r2, [r4, #0]
	while(Data[j]!='K')
 8000ec8:	e00d      	b.n	8000ee6 <gsm_imsi+0x3e>
	{
		gsm.RxData[j] = Data[j];
 8000eca:	463a      	mov	r2, r7
 8000ecc:	6a3b      	ldr	r3, [r7, #32]
 8000ece:	4413      	add	r3, r2
 8000ed0:	7819      	ldrb	r1, [r3, #0]
 8000ed2:	4a17      	ldr	r2, [pc, #92]	; (8000f30 <gsm_imsi+0x88>)
 8000ed4:	6a3b      	ldr	r3, [r7, #32]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	f203 5369 	addw	r3, r3, #1385	; 0x569
 8000edc:	460a      	mov	r2, r1
 8000ede:	701a      	strb	r2, [r3, #0]
		j++;
 8000ee0:	6a3b      	ldr	r3, [r7, #32]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	623b      	str	r3, [r7, #32]
	while(Data[j]!='K')
 8000ee6:	463a      	mov	r2, r7
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
 8000eea:	4413      	add	r3, r2
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b4b      	cmp	r3, #75	; 0x4b
 8000ef0:	d1eb      	bne.n	8000eca <gsm_imsi+0x22>

	}
	unsigned char *pktptr = &gsm.RxData[0];
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <gsm_imsi+0x8c>)
 8000ef4:	61fb      	str	r3, [r7, #28]
	pktptr = jump_char_fixed(pktptr,'\n');
 8000ef6:	210a      	movs	r1, #10
 8000ef8:	69f8      	ldr	r0, [r7, #28]
 8000efa:	f000 f91f 	bl	800113c <jump_char_fixed>
 8000efe:	61f8      	str	r0, [r7, #28]
	//pktptr++;
	while(*pktptr != '\r')
 8000f00:	e00b      	b.n	8000f1a <gsm_imsi+0x72>
	{
		gsm.gsm_data.imsi[i++] = *pktptr;
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	627a      	str	r2, [r7, #36]	; 0x24
 8000f08:	69fa      	ldr	r2, [r7, #28]
 8000f0a:	7811      	ldrb	r1, [r2, #0]
 8000f0c:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <gsm_imsi+0x88>)
 8000f0e:	4413      	add	r3, r2
 8000f10:	460a      	mov	r2, r1
 8000f12:	74da      	strb	r2, [r3, #19]
		pktptr++;
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	3301      	adds	r3, #1
 8000f18:	61fb      	str	r3, [r7, #28]
	while(*pktptr != '\r')
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b0d      	cmp	r3, #13
 8000f20:	d1ef      	bne.n	8000f02 <gsm_imsi+0x5a>
	}
}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bdb0      	pop	{r4, r5, r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	08002938 	.word	0x08002938
 8000f30:	200000b0 	.word	0x200000b0
 8000f34:	20000619 	.word	0x20000619

08000f38 <gsm_imei>:

void gsm_imei()
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
	int i=0,j=0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
//	Send_AT_Command(&IMEI);
	char Data[]="\r\n861123052577218\r\n\r\nOK\r\n";
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <gsm_imei+0x84>)
 8000f48:	463c      	mov	r4, r7
 8000f4a:	461d      	mov	r5, r3
 8000f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f54:	c403      	stmia	r4!, {r0, r1}
 8000f56:	8022      	strh	r2, [r4, #0]
		while(Data[j]!='K')
 8000f58:	e00d      	b.n	8000f76 <gsm_imei+0x3e>
		{
			gsm.RxData[j] = Data[j];
 8000f5a:	463a      	mov	r2, r7
 8000f5c:	6a3b      	ldr	r3, [r7, #32]
 8000f5e:	4413      	add	r3, r2
 8000f60:	7819      	ldrb	r1, [r3, #0]
 8000f62:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <gsm_imei+0x88>)
 8000f64:	6a3b      	ldr	r3, [r7, #32]
 8000f66:	4413      	add	r3, r2
 8000f68:	f203 5369 	addw	r3, r3, #1385	; 0x569
 8000f6c:	460a      	mov	r2, r1
 8000f6e:	701a      	strb	r2, [r3, #0]
			j++;
 8000f70:	6a3b      	ldr	r3, [r7, #32]
 8000f72:	3301      	adds	r3, #1
 8000f74:	623b      	str	r3, [r7, #32]
		while(Data[j]!='K')
 8000f76:	463a      	mov	r2, r7
 8000f78:	6a3b      	ldr	r3, [r7, #32]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b4b      	cmp	r3, #75	; 0x4b
 8000f80:	d1eb      	bne.n	8000f5a <gsm_imei+0x22>

		}
	unsigned char *pktptr = &gsm.RxData[0];
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <gsm_imei+0x8c>)
 8000f84:	61fb      	str	r3, [r7, #28]
	pktptr = jump_char_fixed(pktptr,'\n');
 8000f86:	210a      	movs	r1, #10
 8000f88:	69f8      	ldr	r0, [r7, #28]
 8000f8a:	f000 f8d7 	bl	800113c <jump_char_fixed>
 8000f8e:	61f8      	str	r0, [r7, #28]
	//pktptr++;
	while(*pktptr != '\r')
 8000f90:	e00b      	b.n	8000faa <gsm_imei+0x72>
	{
		gsm.gsm_data.imei[i++] = *pktptr;
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	627a      	str	r2, [r7, #36]	; 0x24
 8000f98:	69fa      	ldr	r2, [r7, #28]
 8000f9a:	7811      	ldrb	r1, [r2, #0]
 8000f9c:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <gsm_imei+0x88>)
 8000f9e:	4413      	add	r3, r2
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	70da      	strb	r2, [r3, #3]
		pktptr++;
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	61fb      	str	r3, [r7, #28]
	while(*pktptr != '\r')
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b0d      	cmp	r3, #13
 8000fb0:	d1ef      	bne.n	8000f92 <gsm_imei+0x5a>
	}
}
 8000fb2:	bf00      	nop
 8000fb4:	3728      	adds	r7, #40	; 0x28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	08002954 	.word	0x08002954
 8000fc0:	200000b0 	.word	0x200000b0
 8000fc4:	20000619 	.word	0x20000619

08000fc8 <date>:
	else
		return false;
}

void date()
{
 8000fc8:	b5b0      	push	{r4, r5, r7, lr}
 8000fca:	b08c      	sub	sp, #48	; 0x30
 8000fcc:	af00      	add	r7, sp, #0
		//unsigned char Data[]="+CCLK: ""\"04/01/2001,00:14:12+22""\"";  // AT+CIPOPEN=0,""\"TCP""\",""\"13.126.165.4""\",4000"
		int j=0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
		unsigned char Data[]="+CCLK:14/12/2005,00:14:12+22";
 8000fd2:	4b31      	ldr	r3, [pc, #196]	; (8001098 <date+0xd0>)
 8000fd4:	463c      	mov	r4, r7
 8000fd6:	461d      	mov	r5, r3
 8000fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fdc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fe0:	c407      	stmia	r4!, {r0, r1, r2}
 8000fe2:	7023      	strb	r3, [r4, #0]
		while(true)
		{
			if(Data[j]!='\0'){
 8000fe4:	463a      	mov	r2, r7
 8000fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe8:	4413      	add	r3, r2
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00e      	beq.n	800100e <date+0x46>
			gsm.RxData[j] = Data[j];
 8000ff0:	463a      	mov	r2, r7
 8000ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff4:	4413      	add	r3, r2
 8000ff6:	7819      	ldrb	r1, [r3, #0]
 8000ff8:	4a28      	ldr	r2, [pc, #160]	; (800109c <date+0xd4>)
 8000ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffc:	4413      	add	r3, r2
 8000ffe:	f203 5369 	addw	r3, r3, #1385	; 0x569
 8001002:	460a      	mov	r2, r1
 8001004:	701a      	strb	r2, [r3, #0]
			j++;
 8001006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001008:	3301      	adds	r3, #1
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800100c:	e7ea      	b.n	8000fe4 <date+0x1c>
			}
			else{
				gsm.RxData[j] = Data[j];
 800100e:	463a      	mov	r2, r7
 8001010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001012:	4413      	add	r3, r2
 8001014:	7819      	ldrb	r1, [r3, #0]
 8001016:	4a21      	ldr	r2, [pc, #132]	; (800109c <date+0xd4>)
 8001018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800101a:	4413      	add	r3, r2
 800101c:	f203 5369 	addw	r3, r3, #1385	; 0x569
 8001020:	460a      	mov	r2, r1
 8001022:	701a      	strb	r2, [r3, #0]
				break;
 8001024:	bf00      	nop
			}

		}
	//Send_AT_Command(&GSM_Date_time);
	int i=0,k=0;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned char *pktptr = &gsm.RxData[0];
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <date+0xd8>)
 8001030:	623b      	str	r3, [r7, #32]
//	pktptr = jump_char_fixed(pktptr,'"');
	pktptr = jump_char_fixed(pktptr,':');
 8001032:	213a      	movs	r1, #58	; 0x3a
 8001034:	6a38      	ldr	r0, [r7, #32]
 8001036:	f000 f881 	bl	800113c <jump_char_fixed>
 800103a:	6238      	str	r0, [r7, #32]
	//pktptr++;
		while(*pktptr != ',')
 800103c:	e00c      	b.n	8001058 <date+0x90>
		{
			gsm.gsm_data.date[i++] = *pktptr;
 800103e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001040:	1c5a      	adds	r2, r3, #1
 8001042:	62ba      	str	r2, [r7, #40]	; 0x28
 8001044:	6a3a      	ldr	r2, [r7, #32]
 8001046:	7811      	ldrb	r1, [r2, #0]
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <date+0xd4>)
 800104a:	4413      	add	r3, r2
 800104c:	460a      	mov	r2, r1
 800104e:	f883 24b3 	strb.w	r2, [r3, #1203]	; 0x4b3
			pktptr++;
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	3301      	adds	r3, #1
 8001056:	623b      	str	r3, [r7, #32]
		while(*pktptr != ',')
 8001058:	6a3b      	ldr	r3, [r7, #32]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b2c      	cmp	r3, #44	; 0x2c
 800105e:	d1ee      	bne.n	800103e <date+0x76>
		}
		pktptr = jump_char_fixed(pktptr,',');
 8001060:	212c      	movs	r1, #44	; 0x2c
 8001062:	6a38      	ldr	r0, [r7, #32]
 8001064:	f000 f86a 	bl	800113c <jump_char_fixed>
 8001068:	6238      	str	r0, [r7, #32]
		while(*pktptr != '+')
 800106a:	e00c      	b.n	8001086 <date+0xbe>
		{
			gsm.gsm_data.time[k++] = *pktptr;
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	627a      	str	r2, [r7, #36]	; 0x24
 8001072:	6a3a      	ldr	r2, [r7, #32]
 8001074:	7811      	ldrb	r1, [r2, #0]
 8001076:	4a09      	ldr	r2, [pc, #36]	; (800109c <date+0xd4>)
 8001078:	4413      	add	r3, r2
 800107a:	460a      	mov	r2, r1
 800107c:	f883 24c2 	strb.w	r2, [r3, #1218]	; 0x4c2
			pktptr++;
 8001080:	6a3b      	ldr	r3, [r7, #32]
 8001082:	3301      	adds	r3, #1
 8001084:	623b      	str	r3, [r7, #32]
		while(*pktptr != '+')
 8001086:	6a3b      	ldr	r3, [r7, #32]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b2b      	cmp	r3, #43	; 0x2b
 800108c:	d1ee      	bne.n	800106c <date+0xa4>
		}
}
 800108e:	bf00      	nop
 8001090:	3730      	adds	r7, #48	; 0x30
 8001092:	46bd      	mov	sp, r7
 8001094:	bdb0      	pop	{r4, r5, r7, pc}
 8001096:	bf00      	nop
 8001098:	08002970 	.word	0x08002970
 800109c:	200000b0 	.word	0x200000b0
 80010a0:	20000619 	.word	0x20000619

080010a4 <network_signal_strength>:
//			gsm.gsm_data.time[i++] = *pktptr;
//			pktptr++;
//		}
//}
void network_signal_strength()
{
 80010a4:	b5b0      	push	{r4, r5, r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
	int i=0,j=0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
	//Send_AT_Command(&NetwrokSignalStrength);
	char Data[]="\r\n+CSQ: 22,0\r\n\r\nOK\r\n";
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <network_signal_strength+0x8c>)
 80010b4:	1d3c      	adds	r4, r7, #4
 80010b6:	461d      	mov	r5, r3
 80010b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010c0:	6020      	str	r0, [r4, #0]
 80010c2:	3404      	adds	r4, #4
 80010c4:	7021      	strb	r1, [r4, #0]
		while(Data[j]!='K')
 80010c6:	e00d      	b.n	80010e4 <network_signal_strength+0x40>
		{
			gsm.RxData[j] = Data[j];
 80010c8:	1d3a      	adds	r2, r7, #4
 80010ca:	6a3b      	ldr	r3, [r7, #32]
 80010cc:	4413      	add	r3, r2
 80010ce:	7819      	ldrb	r1, [r3, #0]
 80010d0:	4a18      	ldr	r2, [pc, #96]	; (8001134 <network_signal_strength+0x90>)
 80010d2:	6a3b      	ldr	r3, [r7, #32]
 80010d4:	4413      	add	r3, r2
 80010d6:	f203 5369 	addw	r3, r3, #1385	; 0x569
 80010da:	460a      	mov	r2, r1
 80010dc:	701a      	strb	r2, [r3, #0]
			j++;
 80010de:	6a3b      	ldr	r3, [r7, #32]
 80010e0:	3301      	adds	r3, #1
 80010e2:	623b      	str	r3, [r7, #32]
		while(Data[j]!='K')
 80010e4:	1d3a      	adds	r2, r7, #4
 80010e6:	6a3b      	ldr	r3, [r7, #32]
 80010e8:	4413      	add	r3, r2
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b4b      	cmp	r3, #75	; 0x4b
 80010ee:	d1eb      	bne.n	80010c8 <network_signal_strength+0x24>

		}
	unsigned char *pktptr = &gsm.RxData[0];
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <network_signal_strength+0x94>)
 80010f2:	61fb      	str	r3, [r7, #28]
	pktptr = jump_char_fixed(pktptr,':');
 80010f4:	213a      	movs	r1, #58	; 0x3a
 80010f6:	69f8      	ldr	r0, [r7, #28]
 80010f8:	f000 f820 	bl	800113c <jump_char_fixed>
 80010fc:	61f8      	str	r0, [r7, #28]
	pktptr++;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3301      	adds	r3, #1
 8001102:	61fb      	str	r3, [r7, #28]
	while(*pktptr != '\r')
 8001104:	e00c      	b.n	8001120 <network_signal_strength+0x7c>
	{
		gsm.gsm_data.network_strength[i++] = *pktptr;
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	627a      	str	r2, [r7, #36]	; 0x24
 800110c:	69fa      	ldr	r2, [r7, #28]
 800110e:	7811      	ldrb	r1, [r2, #0]
 8001110:	4a08      	ldr	r2, [pc, #32]	; (8001134 <network_signal_strength+0x90>)
 8001112:	4413      	add	r3, r2
 8001114:	460a      	mov	r2, r1
 8001116:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		pktptr++;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3301      	adds	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
	while(*pktptr != '\r')
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b0d      	cmp	r3, #13
 8001126:	d1ee      	bne.n	8001106 <network_signal_strength+0x62>
	}
}
 8001128:	bf00      	nop
 800112a:	3728      	adds	r7, #40	; 0x28
 800112c:	46bd      	mov	sp, r7
 800112e:	bdb0      	pop	{r4, r5, r7, pc}
 8001130:	08002990 	.word	0x08002990
 8001134:	200000b0 	.word	0x200000b0
 8001138:	20000619 	.word	0x20000619

0800113c <jump_char_fixed>:
		return 0;
	}
}

unsigned char* jump_char_fixed(unsigned char *pktPtr, char character)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	70fb      	strb	r3, [r7, #3]
    while(*pktPtr++ !=  character);
 8001148:	bf00      	nop
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	1c5a      	adds	r2, r3, #1
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	78fa      	ldrb	r2, [r7, #3]
 8001154:	429a      	cmp	r2, r3
 8001156:	d1f8      	bne.n	800114a <jump_char_fixed+0xe>
    return pktPtr;
 8001158:	687b      	ldr	r3, [r7, #4]
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <gsmtask>:

void gsmtask()
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0

	gsm_imsi();
 800116c:	f7ff fe9c 	bl	8000ea8 <gsm_imsi>
	gsm_imei();
 8001170:	f7ff fee2 	bl	8000f38 <gsm_imei>
	gsm_ccid();
 8001174:	f7ff fe4c 	bl	8000e10 <gsm_ccid>
	date();
 8001178:	f7ff ff26 	bl	8000fc8 <date>
//	time();
	network_signal_strength();
 800117c:	f7ff ff92 	bl	80010a4 <network_signal_strength>
	gsm.gsm_data.FC_CONFIGURATION = FC_ALERT;
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <gsmtask+0x28>)
 8001182:	2241      	movs	r2, #65	; 0x41
 8001184:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
	GenerateStausPacket();
 8001188:	f7ff fc92 	bl	8000ab0 <GenerateStausPacket>
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200000b0 	.word	0x200000b0

08001194 <HAL_UART_RxCpltCallback>:
//	}
//}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	gsm.Flags.Server_Response_Flag = true;
 800119c:	4a13      	ldr	r2, [pc, #76]	; (80011ec <HAL_UART_RxCpltCallback+0x58>)
 800119e:	7893      	ldrb	r3, [r2, #2]
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	7093      	strb	r3, [r2, #2]
	gsm.RxData[gsm.RxDataCnt]=Uart_Rx_Buffer;
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <HAL_UART_RxCpltCallback+0x58>)
 80011a8:	f8b3 34d2 	ldrh.w	r3, [r3, #1234]	; 0x4d2
 80011ac:	4619      	mov	r1, r3
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <HAL_UART_RxCpltCallback+0x5c>)
 80011b0:	781a      	ldrb	r2, [r3, #0]
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_UART_RxCpltCallback+0x58>)
 80011b4:	440b      	add	r3, r1
 80011b6:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569
	gsm.RxDataCnt=(1+ gsm.RxDataCnt) % MAX_Buff_Size;
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_UART_RxCpltCallback+0x58>)
 80011bc:	f8b3 34d2 	ldrh.w	r3, [r3, #1234]	; 0x4d2
 80011c0:	3301      	adds	r3, #1
 80011c2:	425a      	negs	r2, r3
 80011c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011c8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80011cc:	bf58      	it	pl
 80011ce:	4253      	negpl	r3, r2
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_UART_RxCpltCallback+0x58>)
 80011d4:	f8a3 24d2 	strh.w	r2, [r3, #1234]	; 0x4d2
	HAL_UART_Receive_IT(&huart2,&Uart_Rx_Buffer, sizeof(Uart_Rx_Buffer));
 80011d8:	2201      	movs	r2, #1
 80011da:	4905      	ldr	r1, [pc, #20]	; (80011f0 <HAL_UART_RxCpltCallback+0x5c>)
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <HAL_UART_RxCpltCallback+0x60>)
 80011de:	f001 f8c9 	bl	8002374 <HAL_UART_Receive_IT>

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200000b0 	.word	0x200000b0
 80011f0:	2000006d 	.word	0x2000006d
 80011f4:	20000070 	.word	0x20000070

080011f8 <main>:




int main(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	  PeripheralInit();
 80011fc:	f7ff f964 	bl	80004c8 <PeripheralInit>
	  //gsmtask();

	  while (true)
	  {
		   gsmtask();
 8001200:	f7ff ffb2 	bl	8001168 <gsmtask>
 8001204:	e7fc      	b.n	8001200 <main+0x8>
	...

08001208 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b094      	sub	sp, #80	; 0x50
 800120c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120e:	f107 0320 	add.w	r3, r7, #32
 8001212:	2230      	movs	r2, #48	; 0x30
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f001 fb60 	bl	80028dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <SystemClock_Config+0xb4>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	4a21      	ldr	r2, [pc, #132]	; (80012bc <SystemClock_Config+0xb4>)
 8001236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123a:	6413      	str	r3, [r2, #64]	; 0x40
 800123c:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <SystemClock_Config+0xb4>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <SystemClock_Config+0xb8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a1b      	ldr	r2, [pc, #108]	; (80012c0 <SystemClock_Config+0xb8>)
 8001252:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <SystemClock_Config+0xb8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001264:	2302      	movs	r3, #2
 8001266:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001268:	2301      	movs	r3, #1
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800126c:	2310      	movs	r3, #16
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001270:	2300      	movs	r3, #0
 8001272:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001274:	f107 0320 	add.w	r3, r7, #32
 8001278:	4618      	mov	r0, r3
 800127a:	f000 fc4d 	bl	8001b18 <HAL_RCC_OscConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001284:	f000 f81e 	bl	80012c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001288:	230f      	movs	r3, #15
 800128a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 fea8 	bl	8001ff8 <HAL_RCC_ClockConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80012ae:	f000 f809 	bl	80012c4 <Error_Handler>
  }
}
 80012b2:	bf00      	nop
 80012b4:	3750      	adds	r7, #80	; 0x50
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40007000 	.word	0x40007000

080012c4 <Error_Handler>:

}


void Error_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <HardFault_Handler+0x4>

080012e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <MemManage_Handler+0x4>

080012ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <BusFault_Handler+0x4>

080012f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <UsageFault_Handler+0x4>

080012f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001326:	f000 f91f 	bl	8001568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <USART2_IRQHandler>:
  * @brief This function handles USART2 global interrupt.
  */


void USART2_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */


    HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 8001334:	2026      	movs	r0, #38	; 0x26
 8001336:	f000 fa0b 	bl	8001750 <HAL_NVIC_ClearPendingIRQ>

  HAL_UART_IRQHandler(&huart2);
 800133a:	4802      	ldr	r0, [pc, #8]	; (8001344 <USART2_IRQHandler+0x14>)
 800133c:	f001 f870 	bl	8002420 <HAL_UART_IRQHandler>


  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000070 	.word	0x20000070

08001348 <convert_integer_to_char>:
 *

 */
#include "Include.h"
int convert_integer_to_char(uint16_t num, char *str,uint16_t length)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	80fb      	strh	r3, [r7, #6]
 8001354:	4613      	mov	r3, r2
 8001356:	80bb      	strh	r3, [r7, #4]
	//int temp=count_intlength(num);
	if(num == 0)
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d104      	bne.n	8001368 <convert_integer_to_char+0x20>
	{
		*str  = '0';
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	2230      	movs	r2, #48	; 0x30
 8001362:	701a      	strb	r2, [r3, #0]
		return 0;
 8001364:	2300      	movs	r3, #0
 8001366:	e081      	b.n	800146c <convert_integer_to_char+0x124>
	}
	switch(length)
 8001368:	88bb      	ldrh	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	2b04      	cmp	r3, #4
 800136e:	d879      	bhi.n	8001464 <convert_integer_to_char+0x11c>
 8001370:	a201      	add	r2, pc, #4	; (adr r2, 8001378 <convert_integer_to_char+0x30>)
 8001372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001376:	bf00      	nop
 8001378:	0800144b 	.word	0x0800144b
 800137c:	0800141b 	.word	0x0800141b
 8001380:	080013ed 	.word	0x080013ed
 8001384:	080013bd 	.word	0x080013bd
 8001388:	0800138d 	.word	0x0800138d
	{
		case 5:
			*str++ = num/10000 + 0x30;
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	4a3a      	ldr	r2, [pc, #232]	; (8001478 <convert_integer_to_char+0x130>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	0b5b      	lsrs	r3, r3, #13
 8001396:	b29b      	uxth	r3, r3
 8001398:	b2da      	uxtb	r2, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	1c59      	adds	r1, r3, #1
 800139e:	6039      	str	r1, [r7, #0]
 80013a0:	3230      	adds	r2, #48	; 0x30
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	701a      	strb	r2, [r3, #0]
			num =  num%10000;
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	4a33      	ldr	r2, [pc, #204]	; (8001478 <convert_integer_to_char+0x130>)
 80013aa:	fba2 1203 	umull	r1, r2, r2, r3
 80013ae:	0b52      	lsrs	r2, r2, #13
 80013b0:	f242 7110 	movw	r1, #10000	; 0x2710
 80013b4:	fb01 f202 	mul.w	r2, r1, r2
 80013b8:	1a9b      	subs	r3, r3, r2
 80013ba:	80fb      	strh	r3, [r7, #6]
		case 4:
			*str++ = num/1000 + 0x30;
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	4a2f      	ldr	r2, [pc, #188]	; (800147c <convert_integer_to_char+0x134>)
 80013c0:	fba2 2303 	umull	r2, r3, r2, r3
 80013c4:	099b      	lsrs	r3, r3, #6
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	1c59      	adds	r1, r3, #1
 80013ce:	6039      	str	r1, [r7, #0]
 80013d0:	3230      	adds	r2, #48	; 0x30
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	701a      	strb	r2, [r3, #0]
			num =  num%1000;
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	4a28      	ldr	r2, [pc, #160]	; (800147c <convert_integer_to_char+0x134>)
 80013da:	fba2 1203 	umull	r1, r2, r2, r3
 80013de:	0992      	lsrs	r2, r2, #6
 80013e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013e4:	fb01 f202 	mul.w	r2, r1, r2
 80013e8:	1a9b      	subs	r3, r3, r2
 80013ea:	80fb      	strh	r3, [r7, #6]
		case 3:
			*str++ = num/100 + 0x30;
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	4a24      	ldr	r2, [pc, #144]	; (8001480 <convert_integer_to_char+0x138>)
 80013f0:	fba2 2303 	umull	r2, r3, r2, r3
 80013f4:	095b      	lsrs	r3, r3, #5
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	1c59      	adds	r1, r3, #1
 80013fe:	6039      	str	r1, [r7, #0]
 8001400:	3230      	adds	r2, #48	; 0x30
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	701a      	strb	r2, [r3, #0]
			num =  num%100;
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	4a1d      	ldr	r2, [pc, #116]	; (8001480 <convert_integer_to_char+0x138>)
 800140a:	fba2 1203 	umull	r1, r2, r2, r3
 800140e:	0952      	lsrs	r2, r2, #5
 8001410:	2164      	movs	r1, #100	; 0x64
 8001412:	fb01 f202 	mul.w	r2, r1, r2
 8001416:	1a9b      	subs	r3, r3, r2
 8001418:	80fb      	strh	r3, [r7, #6]
		case 2:
			*str++ = (num/10) + 0x30;
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	4a19      	ldr	r2, [pc, #100]	; (8001484 <convert_integer_to_char+0x13c>)
 800141e:	fba2 2303 	umull	r2, r3, r2, r3
 8001422:	08db      	lsrs	r3, r3, #3
 8001424:	b29b      	uxth	r3, r3
 8001426:	b2da      	uxtb	r2, r3
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	1c59      	adds	r1, r3, #1
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	3230      	adds	r2, #48	; 0x30
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	701a      	strb	r2, [r3, #0]
			num =  num%10;
 8001434:	88fa      	ldrh	r2, [r7, #6]
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <convert_integer_to_char+0x13c>)
 8001438:	fba3 1302 	umull	r1, r3, r3, r2
 800143c:	08d9      	lsrs	r1, r3, #3
 800143e:	460b      	mov	r3, r1
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	80fb      	strh	r3, [r7, #6]
		case 1:
			*str++ = num + 0x30;
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	b2da      	uxtb	r2, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	1c59      	adds	r1, r3, #1
 8001452:	6039      	str	r1, [r7, #0]
 8001454:	3230      	adds	r2, #48	; 0x30
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	701a      	strb	r2, [r3, #0]
			num=0;
 800145a:	2300      	movs	r3, #0
 800145c:	80fb      	strh	r3, [r7, #6]
			break;
 800145e:	bf00      	nop
        default:
        	*str = '/0';
        	return 0;
	}
	return 1;
 8001460:	2301      	movs	r3, #1
 8001462:	e003      	b.n	800146c <convert_integer_to_char+0x124>
        	*str = '/0';
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	2230      	movs	r2, #48	; 0x30
 8001468:	701a      	strb	r2, [r3, #0]
        	return 0;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	d1b71759 	.word	0xd1b71759
 800147c:	10624dd3 	.word	0x10624dd3
 8001480:	51eb851f 	.word	0x51eb851f
 8001484:	cccccccd 	.word	0xcccccccd

08001488 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <SystemInit+0x28>)
 800148e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001492:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <SystemInit+0x28>)
 8001494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <SystemInit+0x28>)
 800149e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014a2:	609a      	str	r2, [r3, #8]
#endif
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014ba:	e003      	b.n	80014c4 <LoopCopyDataInit>

080014bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014c2:	3104      	adds	r1, #4

080014c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014c4:	480b      	ldr	r0, [pc, #44]	; (80014f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014cc:	d3f6      	bcc.n	80014bc <CopyDataInit>
  ldr  r2, =_sbss
 80014ce:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014d0:	e002      	b.n	80014d8 <LoopFillZerobss>

080014d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014d4:	f842 3b04 	str.w	r3, [r2], #4

080014d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014dc:	d3f9      	bcc.n	80014d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014de:	f7ff ffd3 	bl	8001488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014e2:	f001 f9d7 	bl	8002894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e6:	f7ff fe87 	bl	80011f8 <main>
  bx  lr    
 80014ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80014f0:	08002dc8 	.word	0x08002dc8
  ldr  r0, =_sdata
 80014f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014f8:	20000050 	.word	0x20000050
  ldr  r2, =_sbss
 80014fc:	20000050 	.word	0x20000050
  ldr  r3, = _ebss
 8001500:	200006b0 	.word	0x200006b0

08001504 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001504:	e7fe      	b.n	8001504 <ADC_IRQHandler>
	...

08001508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_InitTick+0x54>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_InitTick+0x58>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f906 	bl	8001738 <HAL_SYSTICK_Config>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e00e      	b.n	8001554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b0f      	cmp	r3, #15
 800153a:	d80a      	bhi.n	8001552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800153c:	2200      	movs	r2, #0
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f000 f8dc 	bl	8001700 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001548:	4a06      	ldr	r2, [pc, #24]	; (8001564 <HAL_InitTick+0x5c>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	e000      	b.n	8001554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000044 	.word	0x20000044
 8001560:	2000004c 	.word	0x2000004c
 8001564:	20000048 	.word	0x20000048

08001568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_IncTick+0x20>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x24>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a04      	ldr	r2, [pc, #16]	; (800158c <HAL_IncTick+0x24>)
 800157a:	6013      	str	r3, [r2, #0]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	2000004c 	.word	0x2000004c
 800158c:	200006ac 	.word	0x200006ac

08001590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return uwTick;
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_GetTick+0x14>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	200006ac 	.word	0x200006ac

080015a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	f003 0307 	and.w	r3, r3, #7
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	db0c      	blt.n	80015f0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f003 021f 	and.w	r2, r3, #31
 80015dc:	4907      	ldr	r1, [pc, #28]	; (80015fc <__NVIC_ClearPendingIRQ+0x38>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	2001      	movs	r0, #1
 80015e6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ea:	3360      	adds	r3, #96	; 0x60
 80015ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000e100 	.word	0xe000e100

08001600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	2b00      	cmp	r3, #0
 8001612:	db0a      	blt.n	800162a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	490c      	ldr	r1, [pc, #48]	; (800164c <__NVIC_SetPriority+0x4c>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	0112      	lsls	r2, r2, #4
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	440b      	add	r3, r1
 8001624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001628:	e00a      	b.n	8001640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4908      	ldr	r1, [pc, #32]	; (8001650 <__NVIC_SetPriority+0x50>)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	3b04      	subs	r3, #4
 8001638:	0112      	lsls	r2, r2, #4
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	440b      	add	r3, r1
 800163e:	761a      	strb	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000e100 	.word	0xe000e100
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f1c3 0307 	rsb	r3, r3, #7
 800166e:	2b04      	cmp	r3, #4
 8001670:	bf28      	it	cs
 8001672:	2304      	movcs	r3, #4
 8001674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3304      	adds	r3, #4
 800167a:	2b06      	cmp	r3, #6
 800167c:	d902      	bls.n	8001684 <NVIC_EncodePriority+0x30>
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3b03      	subs	r3, #3
 8001682:	e000      	b.n	8001686 <NVIC_EncodePriority+0x32>
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	f04f 32ff 	mov.w	r2, #4294967295
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43da      	mvns	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	401a      	ands	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43d9      	mvns	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	4313      	orrs	r3, r2
         );
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3724      	adds	r7, #36	; 0x24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016cc:	d301      	bcc.n	80016d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00f      	b.n	80016f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <SysTick_Config+0x40>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016da:	210f      	movs	r1, #15
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	f7ff ff8e 	bl	8001600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <SysTick_Config+0x40>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ea:	4b04      	ldr	r3, [pc, #16]	; (80016fc <SysTick_Config+0x40>)
 80016ec:	2207      	movs	r2, #7
 80016ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	e000e010 	.word	0xe000e010

08001700 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001712:	f7ff ff49 	bl	80015a8 <__NVIC_GetPriorityGrouping>
 8001716:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	68b9      	ldr	r1, [r7, #8]
 800171c:	6978      	ldr	r0, [r7, #20]
 800171e:	f7ff ff99 	bl	8001654 <NVIC_EncodePriority>
 8001722:	4602      	mov	r2, r0
 8001724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ff68 	bl	8001600 <__NVIC_SetPriority>
}
 8001730:	bf00      	nop
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ffbb 	bl	80016bc <SysTick_Config>
 8001746:	4603      	mov	r3, r0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff30 	bl	80015c4 <__NVIC_ClearPendingIRQ>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d004      	beq.n	800178a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2280      	movs	r2, #128	; 0x80
 8001784:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00c      	b.n	80017a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2205      	movs	r2, #5
 800178e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0201 	bic.w	r2, r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	; 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	e16b      	b.n	8001aa4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017cc:	2201      	movs	r2, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	f040 815a 	bne.w	8001a9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d00b      	beq.n	800180a <HAL_GPIO_Init+0x5a>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d007      	beq.n	800180a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017fe:	2b11      	cmp	r3, #17
 8001800:	d003      	beq.n	800180a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b12      	cmp	r3, #18
 8001808:	d130      	bne.n	800186c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2203      	movs	r2, #3
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001840:	2201      	movs	r2, #1
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	091b      	lsrs	r3, r3, #4
 8001856:	f003 0201 	and.w	r2, r3, #1
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2203      	movs	r2, #3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0xfc>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b12      	cmp	r3, #18
 80018aa:	d123      	bne.n	80018f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	220f      	movs	r2, #15
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	08da      	lsrs	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3208      	adds	r2, #8
 80018ee:	69b9      	ldr	r1, [r7, #24]
 80018f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0203 	and.w	r2, r3, #3
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80b4 	beq.w	8001a9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b5f      	ldr	r3, [pc, #380]	; (8001ab8 <HAL_GPIO_Init+0x308>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a5e      	ldr	r2, [pc, #376]	; (8001ab8 <HAL_GPIO_Init+0x308>)
 8001940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b5c      	ldr	r3, [pc, #368]	; (8001ab8 <HAL_GPIO_Init+0x308>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001952:	4a5a      	ldr	r2, [pc, #360]	; (8001abc <HAL_GPIO_Init+0x30c>)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3302      	adds	r3, #2
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	220f      	movs	r2, #15
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a51      	ldr	r2, [pc, #324]	; (8001ac0 <HAL_GPIO_Init+0x310>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d02b      	beq.n	80019d6 <HAL_GPIO_Init+0x226>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a50      	ldr	r2, [pc, #320]	; (8001ac4 <HAL_GPIO_Init+0x314>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d025      	beq.n	80019d2 <HAL_GPIO_Init+0x222>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4f      	ldr	r2, [pc, #316]	; (8001ac8 <HAL_GPIO_Init+0x318>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01f      	beq.n	80019ce <HAL_GPIO_Init+0x21e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a4e      	ldr	r2, [pc, #312]	; (8001acc <HAL_GPIO_Init+0x31c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d019      	beq.n	80019ca <HAL_GPIO_Init+0x21a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4d      	ldr	r2, [pc, #308]	; (8001ad0 <HAL_GPIO_Init+0x320>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d013      	beq.n	80019c6 <HAL_GPIO_Init+0x216>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4c      	ldr	r2, [pc, #304]	; (8001ad4 <HAL_GPIO_Init+0x324>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d00d      	beq.n	80019c2 <HAL_GPIO_Init+0x212>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4b      	ldr	r2, [pc, #300]	; (8001ad8 <HAL_GPIO_Init+0x328>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d007      	beq.n	80019be <HAL_GPIO_Init+0x20e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4a      	ldr	r2, [pc, #296]	; (8001adc <HAL_GPIO_Init+0x32c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d101      	bne.n	80019ba <HAL_GPIO_Init+0x20a>
 80019b6:	2307      	movs	r3, #7
 80019b8:	e00e      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019ba:	2308      	movs	r3, #8
 80019bc:	e00c      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019be:	2306      	movs	r3, #6
 80019c0:	e00a      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019c2:	2305      	movs	r3, #5
 80019c4:	e008      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019c6:	2304      	movs	r3, #4
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019ca:	2303      	movs	r3, #3
 80019cc:	e004      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e002      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019d6:	2300      	movs	r3, #0
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	f002 0203 	and.w	r2, r2, #3
 80019de:	0092      	lsls	r2, r2, #2
 80019e0:	4093      	lsls	r3, r2
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019e8:	4934      	ldr	r1, [pc, #208]	; (8001abc <HAL_GPIO_Init+0x30c>)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	3302      	adds	r3, #2
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f6:	4b3a      	ldr	r3, [pc, #232]	; (8001ae0 <HAL_GPIO_Init+0x330>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a1a:	4a31      	ldr	r2, [pc, #196]	; (8001ae0 <HAL_GPIO_Init+0x330>)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a20:	4b2f      	ldr	r3, [pc, #188]	; (8001ae0 <HAL_GPIO_Init+0x330>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a44:	4a26      	ldr	r2, [pc, #152]	; (8001ae0 <HAL_GPIO_Init+0x330>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a4a:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <HAL_GPIO_Init+0x330>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ae0 <HAL_GPIO_Init+0x330>)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a74:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <HAL_GPIO_Init+0x330>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a98:	4a11      	ldr	r2, [pc, #68]	; (8001ae0 <HAL_GPIO_Init+0x330>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	2b0f      	cmp	r3, #15
 8001aa8:	f67f ae90 	bls.w	80017cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aac:	bf00      	nop
 8001aae:	3724      	adds	r7, #36	; 0x24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40013800 	.word	0x40013800
 8001ac0:	40020000 	.word	0x40020000
 8001ac4:	40020400 	.word	0x40020400
 8001ac8:	40020800 	.word	0x40020800
 8001acc:	40020c00 	.word	0x40020c00
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40021400 	.word	0x40021400
 8001ad8:	40021800 	.word	0x40021800
 8001adc:	40021c00 	.word	0x40021c00
 8001ae0:	40013c00 	.word	0x40013c00

08001ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	807b      	strh	r3, [r7, #2]
 8001af0:	4613      	mov	r3, r2
 8001af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001af4:	787b      	ldrb	r3, [r7, #1]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001afa:	887a      	ldrh	r2, [r7, #2]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b00:	e003      	b.n	8001b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b02:	887b      	ldrh	r3, [r7, #2]
 8001b04:	041a      	lsls	r2, r3, #16
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	619a      	str	r2, [r3, #24]
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e25b      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d075      	beq.n	8001c22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b36:	4ba3      	ldr	r3, [pc, #652]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d00c      	beq.n	8001b5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b42:	4ba0      	ldr	r3, [pc, #640]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d112      	bne.n	8001b74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b4e:	4b9d      	ldr	r3, [pc, #628]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b5a:	d10b      	bne.n	8001b74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5c:	4b99      	ldr	r3, [pc, #612]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d05b      	beq.n	8001c20 <HAL_RCC_OscConfig+0x108>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d157      	bne.n	8001c20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e236      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7c:	d106      	bne.n	8001b8c <HAL_RCC_OscConfig+0x74>
 8001b7e:	4b91      	ldr	r3, [pc, #580]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a90      	ldr	r2, [pc, #576]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e01d      	b.n	8001bc8 <HAL_RCC_OscConfig+0xb0>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b94:	d10c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x98>
 8001b96:	4b8b      	ldr	r3, [pc, #556]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a8a      	ldr	r2, [pc, #552]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	4b88      	ldr	r3, [pc, #544]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a87      	ldr	r2, [pc, #540]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e00b      	b.n	8001bc8 <HAL_RCC_OscConfig+0xb0>
 8001bb0:	4b84      	ldr	r3, [pc, #528]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a83      	ldr	r2, [pc, #524]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	4b81      	ldr	r3, [pc, #516]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a80      	ldr	r2, [pc, #512]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d013      	beq.n	8001bf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fcde 	bl	8001590 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd8:	f7ff fcda 	bl	8001590 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e1fb      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	4b76      	ldr	r3, [pc, #472]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0xc0>
 8001bf6:	e014      	b.n	8001c22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fcca 	bl	8001590 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c00:	f7ff fcc6 	bl	8001590 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	; 0x64
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e1e7      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c12:	4b6c      	ldr	r3, [pc, #432]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0xe8>
 8001c1e:	e000      	b.n	8001c22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d063      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c2e:	4b65      	ldr	r3, [pc, #404]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00b      	beq.n	8001c52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c3a:	4b62      	ldr	r3, [pc, #392]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d11c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c46:	4b5f      	ldr	r3, [pc, #380]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d116      	bne.n	8001c80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c52:	4b5c      	ldr	r3, [pc, #368]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <HAL_RCC_OscConfig+0x152>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d001      	beq.n	8001c6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e1bb      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6a:	4b56      	ldr	r3, [pc, #344]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4952      	ldr	r1, [pc, #328]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7e:	e03a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d020      	beq.n	8001cca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c88:	4b4f      	ldr	r3, [pc, #316]	; (8001dc8 <HAL_RCC_OscConfig+0x2b0>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7ff fc7f 	bl	8001590 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c96:	f7ff fc7b 	bl	8001590 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e19c      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca8:	4b46      	ldr	r3, [pc, #280]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb4:	4b43      	ldr	r3, [pc, #268]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4940      	ldr	r1, [pc, #256]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]
 8001cc8:	e015      	b.n	8001cf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cca:	4b3f      	ldr	r3, [pc, #252]	; (8001dc8 <HAL_RCC_OscConfig+0x2b0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fc5e 	bl	8001590 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd8:	f7ff fc5a 	bl	8001590 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e17b      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cea:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d030      	beq.n	8001d64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d016      	beq.n	8001d38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d0a:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <HAL_RCC_OscConfig+0x2b4>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d10:	f7ff fc3e 	bl	8001590 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d18:	f7ff fc3a 	bl	8001590 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e15b      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2a:	4b26      	ldr	r3, [pc, #152]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x200>
 8001d36:	e015      	b.n	8001d64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d38:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <HAL_RCC_OscConfig+0x2b4>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff fc27 	bl	8001590 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d46:	f7ff fc23 	bl	8001590 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e144      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d58:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f0      	bne.n	8001d46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 80a0 	beq.w	8001eb2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10f      	bne.n	8001da2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d90:	6413      	str	r3, [r2, #64]	; 0x40
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_OscConfig+0x2b8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d121      	bne.n	8001df2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_RCC_OscConfig+0x2b8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <HAL_RCC_OscConfig+0x2b8>)
 8001db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dba:	f7ff fbe9 	bl	8001590 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc0:	e011      	b.n	8001de6 <HAL_RCC_OscConfig+0x2ce>
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	42470000 	.word	0x42470000
 8001dcc:	42470e80 	.word	0x42470e80
 8001dd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd4:	f7ff fbdc 	bl	8001590 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e0fd      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de6:	4b81      	ldr	r3, [pc, #516]	; (8001fec <HAL_RCC_OscConfig+0x4d4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d106      	bne.n	8001e08 <HAL_RCC_OscConfig+0x2f0>
 8001dfa:	4b7d      	ldr	r3, [pc, #500]	; (8001ff0 <HAL_RCC_OscConfig+0x4d8>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfe:	4a7c      	ldr	r2, [pc, #496]	; (8001ff0 <HAL_RCC_OscConfig+0x4d8>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6713      	str	r3, [r2, #112]	; 0x70
 8001e06:	e01c      	b.n	8001e42 <HAL_RCC_OscConfig+0x32a>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b05      	cmp	r3, #5
 8001e0e:	d10c      	bne.n	8001e2a <HAL_RCC_OscConfig+0x312>
 8001e10:	4b77      	ldr	r3, [pc, #476]	; (8001ff0 <HAL_RCC_OscConfig+0x4d8>)
 8001e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e14:	4a76      	ldr	r2, [pc, #472]	; (8001ff0 <HAL_RCC_OscConfig+0x4d8>)
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1c:	4b74      	ldr	r3, [pc, #464]	; (8001ff0 <HAL_RCC_OscConfig+0x4d8>)
 8001e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e20:	4a73      	ldr	r2, [pc, #460]	; (8001ff0 <HAL_RCC_OscConfig+0x4d8>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6713      	str	r3, [r2, #112]	; 0x70
 8001e28:	e00b      	b.n	8001e42 <HAL_RCC_OscConfig+0x32a>
 8001e2a:	4b71      	ldr	r3, [pc, #452]	; (8001ff0 <HAL_RCC_OscConfig+0x4d8>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2e:	4a70      	ldr	r2, [pc, #448]	; (8001ff0 <HAL_RCC_OscConfig+0x4d8>)
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	6713      	str	r3, [r2, #112]	; 0x70
 8001e36:	4b6e      	ldr	r3, [pc, #440]	; (8001ff0 <HAL_RCC_OscConfig+0x4d8>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3a:	4a6d      	ldr	r2, [pc, #436]	; (8001ff0 <HAL_RCC_OscConfig+0x4d8>)
 8001e3c:	f023 0304 	bic.w	r3, r3, #4
 8001e40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d015      	beq.n	8001e76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4a:	f7ff fba1 	bl	8001590 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e50:	e00a      	b.n	8001e68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e52:	f7ff fb9d 	bl	8001590 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e0bc      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e68:	4b61      	ldr	r3, [pc, #388]	; (8001ff0 <HAL_RCC_OscConfig+0x4d8>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0ee      	beq.n	8001e52 <HAL_RCC_OscConfig+0x33a>
 8001e74:	e014      	b.n	8001ea0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e76:	f7ff fb8b 	bl	8001590 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7c:	e00a      	b.n	8001e94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7ff fb87 	bl	8001590 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e0a6      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e94:	4b56      	ldr	r3, [pc, #344]	; (8001ff0 <HAL_RCC_OscConfig+0x4d8>)
 8001e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1ee      	bne.n	8001e7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d105      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea6:	4b52      	ldr	r3, [pc, #328]	; (8001ff0 <HAL_RCC_OscConfig+0x4d8>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	4a51      	ldr	r2, [pc, #324]	; (8001ff0 <HAL_RCC_OscConfig+0x4d8>)
 8001eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8092 	beq.w	8001fe0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ebc:	4b4c      	ldr	r3, [pc, #304]	; (8001ff0 <HAL_RCC_OscConfig+0x4d8>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d05c      	beq.n	8001f82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d141      	bne.n	8001f54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed0:	4b48      	ldr	r3, [pc, #288]	; (8001ff4 <HAL_RCC_OscConfig+0x4dc>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed6:	f7ff fb5b 	bl	8001590 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ede:	f7ff fb57 	bl	8001590 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e078      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef0:	4b3f      	ldr	r3, [pc, #252]	; (8001ff0 <HAL_RCC_OscConfig+0x4d8>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f0      	bne.n	8001ede <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69da      	ldr	r2, [r3, #28]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	019b      	lsls	r3, r3, #6
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f12:	085b      	lsrs	r3, r3, #1
 8001f14:	3b01      	subs	r3, #1
 8001f16:	041b      	lsls	r3, r3, #16
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	061b      	lsls	r3, r3, #24
 8001f20:	4933      	ldr	r1, [pc, #204]	; (8001ff0 <HAL_RCC_OscConfig+0x4d8>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f26:	4b33      	ldr	r3, [pc, #204]	; (8001ff4 <HAL_RCC_OscConfig+0x4dc>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fb30 	bl	8001590 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f34:	f7ff fb2c 	bl	8001590 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e04d      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f46:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <HAL_RCC_OscConfig+0x4d8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x41c>
 8001f52:	e045      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f54:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <HAL_RCC_OscConfig+0x4dc>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7ff fb19 	bl	8001590 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f62:	f7ff fb15 	bl	8001590 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e036      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f74:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <HAL_RCC_OscConfig+0x4d8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f0      	bne.n	8001f62 <HAL_RCC_OscConfig+0x44a>
 8001f80:	e02e      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e029      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f8e:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <HAL_RCC_OscConfig+0x4d8>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d11c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d115      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d10d      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d106      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40007000 	.word	0x40007000
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	42470060 	.word	0x42470060

08001ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0cc      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800200c:	4b68      	ldr	r3, [pc, #416]	; (80021b0 <HAL_RCC_ClockConfig+0x1b8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 030f 	and.w	r3, r3, #15
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d90c      	bls.n	8002034 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b65      	ldr	r3, [pc, #404]	; (80021b0 <HAL_RCC_ClockConfig+0x1b8>)
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b63      	ldr	r3, [pc, #396]	; (80021b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0b8      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d020      	beq.n	8002082 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800204c:	4b59      	ldr	r3, [pc, #356]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4a58      	ldr	r2, [pc, #352]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002056:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002064:	4b53      	ldr	r3, [pc, #332]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	4a52      	ldr	r2, [pc, #328]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800206e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002070:	4b50      	ldr	r3, [pc, #320]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	494d      	ldr	r1, [pc, #308]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	4313      	orrs	r3, r2
 8002080:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d044      	beq.n	8002118 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	4b47      	ldr	r3, [pc, #284]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d119      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e07f      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d003      	beq.n	80020b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d107      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b6:	4b3f      	ldr	r3, [pc, #252]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e06f      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c6:	4b3b      	ldr	r3, [pc, #236]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e067      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020d6:	4b37      	ldr	r3, [pc, #220]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f023 0203 	bic.w	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4934      	ldr	r1, [pc, #208]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e8:	f7ff fa52 	bl	8001590 <HAL_GetTick>
 80020ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ee:	e00a      	b.n	8002106 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f0:	f7ff fa4e 	bl	8001590 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fe:	4293      	cmp	r3, r2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e04f      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002106:	4b2b      	ldr	r3, [pc, #172]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 020c 	and.w	r2, r3, #12
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	429a      	cmp	r2, r3
 8002116:	d1eb      	bne.n	80020f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002118:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <HAL_RCC_ClockConfig+0x1b8>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d20c      	bcs.n	8002140 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002126:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800212e:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e032      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4916      	ldr	r1, [pc, #88]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	4313      	orrs	r3, r2
 800215c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d009      	beq.n	800217e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	490e      	ldr	r1, [pc, #56]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	4313      	orrs	r3, r2
 800217c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800217e:	f000 f821 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8002182:	4601      	mov	r1, r0
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	5cd3      	ldrb	r3, [r2, r3]
 8002192:	fa21 f303 	lsr.w	r3, r1, r3
 8002196:	4a09      	ldr	r2, [pc, #36]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <HAL_RCC_ClockConfig+0x1c8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff f9b2 	bl	8001508 <HAL_InitTick>

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40023c00 	.word	0x40023c00
 80021b4:	40023800 	.word	0x40023800
 80021b8:	08002da8 	.word	0x08002da8
 80021bc:	20000044 	.word	0x20000044
 80021c0:	20000048 	.word	0x20000048

080021c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	2300      	movs	r3, #0
 80021d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021da:	4b63      	ldr	r3, [pc, #396]	; (8002368 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d007      	beq.n	80021f6 <HAL_RCC_GetSysClockFreq+0x32>
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d008      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x38>
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 80b4 	bne.w	8002358 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021f0:	4b5e      	ldr	r3, [pc, #376]	; (800236c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80021f2:	60bb      	str	r3, [r7, #8]
       break;
 80021f4:	e0b3      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021f6:	4b5e      	ldr	r3, [pc, #376]	; (8002370 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80021f8:	60bb      	str	r3, [r7, #8]
      break;
 80021fa:	e0b0      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021fc:	4b5a      	ldr	r3, [pc, #360]	; (8002368 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002204:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002206:	4b58      	ldr	r3, [pc, #352]	; (8002368 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d04a      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002212:	4b55      	ldr	r3, [pc, #340]	; (8002368 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	099b      	lsrs	r3, r3, #6
 8002218:	f04f 0400 	mov.w	r4, #0
 800221c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	ea03 0501 	and.w	r5, r3, r1
 8002228:	ea04 0602 	and.w	r6, r4, r2
 800222c:	4629      	mov	r1, r5
 800222e:	4632      	mov	r2, r6
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	f04f 0400 	mov.w	r4, #0
 8002238:	0154      	lsls	r4, r2, #5
 800223a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800223e:	014b      	lsls	r3, r1, #5
 8002240:	4619      	mov	r1, r3
 8002242:	4622      	mov	r2, r4
 8002244:	1b49      	subs	r1, r1, r5
 8002246:	eb62 0206 	sbc.w	r2, r2, r6
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	f04f 0400 	mov.w	r4, #0
 8002252:	0194      	lsls	r4, r2, #6
 8002254:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002258:	018b      	lsls	r3, r1, #6
 800225a:	1a5b      	subs	r3, r3, r1
 800225c:	eb64 0402 	sbc.w	r4, r4, r2
 8002260:	f04f 0100 	mov.w	r1, #0
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	00e2      	lsls	r2, r4, #3
 800226a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800226e:	00d9      	lsls	r1, r3, #3
 8002270:	460b      	mov	r3, r1
 8002272:	4614      	mov	r4, r2
 8002274:	195b      	adds	r3, r3, r5
 8002276:	eb44 0406 	adc.w	r4, r4, r6
 800227a:	f04f 0100 	mov.w	r1, #0
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	0262      	lsls	r2, r4, #9
 8002284:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002288:	0259      	lsls	r1, r3, #9
 800228a:	460b      	mov	r3, r1
 800228c:	4614      	mov	r4, r2
 800228e:	4618      	mov	r0, r3
 8002290:	4621      	mov	r1, r4
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f04f 0400 	mov.w	r4, #0
 8002298:	461a      	mov	r2, r3
 800229a:	4623      	mov	r3, r4
 800229c:	f7fd ff94 	bl	80001c8 <__aeabi_uldivmod>
 80022a0:	4603      	mov	r3, r0
 80022a2:	460c      	mov	r4, r1
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	e049      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a8:	4b2f      	ldr	r3, [pc, #188]	; (8002368 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	099b      	lsrs	r3, r3, #6
 80022ae:	f04f 0400 	mov.w	r4, #0
 80022b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	ea03 0501 	and.w	r5, r3, r1
 80022be:	ea04 0602 	and.w	r6, r4, r2
 80022c2:	4629      	mov	r1, r5
 80022c4:	4632      	mov	r2, r6
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	f04f 0400 	mov.w	r4, #0
 80022ce:	0154      	lsls	r4, r2, #5
 80022d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022d4:	014b      	lsls	r3, r1, #5
 80022d6:	4619      	mov	r1, r3
 80022d8:	4622      	mov	r2, r4
 80022da:	1b49      	subs	r1, r1, r5
 80022dc:	eb62 0206 	sbc.w	r2, r2, r6
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	f04f 0400 	mov.w	r4, #0
 80022e8:	0194      	lsls	r4, r2, #6
 80022ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022ee:	018b      	lsls	r3, r1, #6
 80022f0:	1a5b      	subs	r3, r3, r1
 80022f2:	eb64 0402 	sbc.w	r4, r4, r2
 80022f6:	f04f 0100 	mov.w	r1, #0
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	00e2      	lsls	r2, r4, #3
 8002300:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002304:	00d9      	lsls	r1, r3, #3
 8002306:	460b      	mov	r3, r1
 8002308:	4614      	mov	r4, r2
 800230a:	195b      	adds	r3, r3, r5
 800230c:	eb44 0406 	adc.w	r4, r4, r6
 8002310:	f04f 0100 	mov.w	r1, #0
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	02a2      	lsls	r2, r4, #10
 800231a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800231e:	0299      	lsls	r1, r3, #10
 8002320:	460b      	mov	r3, r1
 8002322:	4614      	mov	r4, r2
 8002324:	4618      	mov	r0, r3
 8002326:	4621      	mov	r1, r4
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f04f 0400 	mov.w	r4, #0
 800232e:	461a      	mov	r2, r3
 8002330:	4623      	mov	r3, r4
 8002332:	f7fd ff49 	bl	80001c8 <__aeabi_uldivmod>
 8002336:	4603      	mov	r3, r0
 8002338:	460c      	mov	r4, r1
 800233a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800233c:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	0c1b      	lsrs	r3, r3, #16
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	3301      	adds	r3, #1
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	60bb      	str	r3, [r7, #8]
      break;
 8002356:	e002      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002358:	4b04      	ldr	r3, [pc, #16]	; (800236c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800235a:	60bb      	str	r3, [r7, #8]
      break;
 800235c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800235e:	68bb      	ldr	r3, [r7, #8]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002368:	40023800 	.word	0x40023800
 800236c:	00f42400 	.word	0x00f42400
 8002370:	007a1200 	.word	0x007a1200

08002374 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	4613      	mov	r3, r2
 8002380:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b20      	cmp	r3, #32
 800238c:	d140      	bne.n	8002410 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <HAL_UART_Receive_IT+0x26>
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e039      	b.n	8002412 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_UART_Receive_IT+0x38>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e032      	b.n	8002412 <HAL_UART_Receive_IT+0x9e>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38


    huart->pRxBuffPtr = pData;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	88fa      	ldrh	r2, [r7, #6]
 80023be:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	88fa      	ldrh	r2, [r7, #6]
 80023c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2222      	movs	r2, #34	; 0x22
 80023d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023ea:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0220 	orr.w	r2, r2, #32
 800240a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	e000      	b.n	8002412 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002410:	2302      	movs	r3, #2
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002440:	2300      	movs	r3, #0
 8002442:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10d      	bne.n	8002472 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_UART_IRQHandler+0x52>
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	f003 0320 	and.w	r3, r3, #32
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f98c 	bl	8002788 <UART_Receive_IT>
      return;
 8002470:	e0d1      	b.n	8002616 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80b0 	beq.w	80025da <HAL_UART_IRQHandler+0x1ba>
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d105      	bne.n	8002490 <HAL_UART_IRQHandler+0x70>
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80a5 	beq.w	80025da <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <HAL_UART_IRQHandler+0x90>
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a8:	f043 0201 	orr.w	r2, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00a      	beq.n	80024d0 <HAL_UART_IRQHandler+0xb0>
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c8:	f043 0202 	orr.w	r2, r3, #2
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00a      	beq.n	80024f0 <HAL_UART_IRQHandler+0xd0>
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e8:	f043 0204 	orr.w	r2, r3, #4
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00f      	beq.n	800251a <HAL_UART_IRQHandler+0xfa>
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	2b00      	cmp	r3, #0
 8002502:	d104      	bne.n	800250e <HAL_UART_IRQHandler+0xee>
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002512:	f043 0208 	orr.w	r2, r3, #8
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d078      	beq.n	8002614 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <HAL_UART_IRQHandler+0x11c>
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f926 	bl	8002788 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002546:	2b40      	cmp	r3, #64	; 0x40
 8002548:	bf0c      	ite	eq
 800254a:	2301      	moveq	r3, #1
 800254c:	2300      	movne	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d102      	bne.n	8002564 <HAL_UART_IRQHandler+0x144>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d031      	beq.n	80025c8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f86f 	bl	8002648 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002574:	2b40      	cmp	r3, #64	; 0x40
 8002576:	d123      	bne.n	80025c0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002586:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258c:	2b00      	cmp	r3, #0
 800258e:	d013      	beq.n	80025b8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002594:	4a21      	ldr	r2, [pc, #132]	; (800261c <HAL_UART_IRQHandler+0x1fc>)
 8002596:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff f8e5 	bl	800176c <HAL_DMA_Abort_IT>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d016      	beq.n	80025d6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025b2:	4610      	mov	r0, r2
 80025b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b6:	e00e      	b.n	80025d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f83b 	bl	8002634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025be:	e00a      	b.n	80025d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f837 	bl	8002634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c6:	e006      	b.n	80025d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f833 	bl	8002634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80025d4:	e01e      	b.n	8002614 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d6:	bf00      	nop
    return;
 80025d8:	e01c      	b.n	8002614 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_UART_IRQHandler+0x1d6>
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f85c 	bl	80026ac <UART_Transmit_IT>
    return;
 80025f4:	e00f      	b.n	8002616 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00a      	beq.n	8002616 <HAL_UART_IRQHandler+0x1f6>
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f8a4 	bl	8002758 <UART_EndTransmit_IT>
    return;
 8002610:	bf00      	nop
 8002612:	e000      	b.n	8002616 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002614:	bf00      	nop
  }
}
 8002616:	3720      	adds	r7, #32
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	08002685 	.word	0x08002685

08002620 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800265e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695a      	ldr	r2, [r3, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002690:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f7ff ffc8 	bl	8002634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026a4:	bf00      	nop
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b21      	cmp	r3, #33	; 0x21
 80026be:	d144      	bne.n	800274a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c8:	d11a      	bne.n	8002700 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026de:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d105      	bne.n	80026f4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	1c9a      	adds	r2, r3, #2
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	621a      	str	r2, [r3, #32]
 80026f2:	e00e      	b.n	8002712 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	621a      	str	r2, [r3, #32]
 80026fe:	e008      	b.n	8002712 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	1c59      	adds	r1, r3, #1
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6211      	str	r1, [r2, #32]
 800270a:	781a      	ldrb	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29b      	uxth	r3, r3
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	4619      	mov	r1, r3
 8002720:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10f      	bne.n	8002746 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002734:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002744:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	e000      	b.n	800274c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800274a:	2302      	movs	r3, #2
  }
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800276e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ff51 	bl	8002620 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	//_//_HAL_UART_FLUSH_DRREGISTER(&huart2);

  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b22      	cmp	r3, #34	; 0x22
 800279a:	d175      	bne.n	8002888 <UART_Receive_IT+0x100>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a4:	d123      	bne.n	80027ee <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10e      	bne.n	80027d2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ca:	1c9a      	adds	r2, r3, #2
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	629a      	str	r2, [r3, #40]	; 0x28
 80027d0:	e026      	b.n	8002820 <UART_Receive_IT+0x98>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28
 80027ec:	e018      	b.n	8002820 <UART_Receive_IT+0x98>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d107      	bne.n	8002806 <UART_Receive_IT+0x7e>
      {

       *huart->pRxBuffPtr = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	701a      	strb	r2, [r3, #0]
 8002804:	e00c      	b.n	8002820 <UART_Receive_IT+0x98>
//        	Rx_Count++;

   }
      else
      {
       *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	b2da      	uxtb	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002812:	1c58      	adds	r0, r3, #1
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	6288      	str	r0, [r1, #40]	; 0x28
 8002818:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	701a      	strb	r2, [r3, #0]
      }
    }
    huart->pRxBuffPtr++;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferCount--;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	85da      	strh	r2, [r3, #46]	; 0x2e
    if ( huart->RxXferCount == 0U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800283c:	b29b      	uxth	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d120      	bne.n	8002884 <UART_Receive_IT+0xfc>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0220 	bic.w	r2, r2, #32
 8002850:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002860:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695a      	ldr	r2, [r3, #20]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0201 	bic.w	r2, r2, #1
 8002870:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7fe fc8a 	bl	8001194 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	e002      	b.n	800288a <UART_Receive_IT+0x102>
    }
    return HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	e000      	b.n	800288a <UART_Receive_IT+0x102>
  }
  else
  {
    return HAL_BUSY;
 8002888:	2302      	movs	r3, #2
  }
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <__libc_init_array>:
 8002894:	b570      	push	{r4, r5, r6, lr}
 8002896:	4e0d      	ldr	r6, [pc, #52]	; (80028cc <__libc_init_array+0x38>)
 8002898:	4c0d      	ldr	r4, [pc, #52]	; (80028d0 <__libc_init_array+0x3c>)
 800289a:	1ba4      	subs	r4, r4, r6
 800289c:	10a4      	asrs	r4, r4, #2
 800289e:	2500      	movs	r5, #0
 80028a0:	42a5      	cmp	r5, r4
 80028a2:	d109      	bne.n	80028b8 <__libc_init_array+0x24>
 80028a4:	4e0b      	ldr	r6, [pc, #44]	; (80028d4 <__libc_init_array+0x40>)
 80028a6:	4c0c      	ldr	r4, [pc, #48]	; (80028d8 <__libc_init_array+0x44>)
 80028a8:	f000 f820 	bl	80028ec <_init>
 80028ac:	1ba4      	subs	r4, r4, r6
 80028ae:	10a4      	asrs	r4, r4, #2
 80028b0:	2500      	movs	r5, #0
 80028b2:	42a5      	cmp	r5, r4
 80028b4:	d105      	bne.n	80028c2 <__libc_init_array+0x2e>
 80028b6:	bd70      	pop	{r4, r5, r6, pc}
 80028b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028bc:	4798      	blx	r3
 80028be:	3501      	adds	r5, #1
 80028c0:	e7ee      	b.n	80028a0 <__libc_init_array+0xc>
 80028c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028c6:	4798      	blx	r3
 80028c8:	3501      	adds	r5, #1
 80028ca:	e7f2      	b.n	80028b2 <__libc_init_array+0x1e>
 80028cc:	08002dc0 	.word	0x08002dc0
 80028d0:	08002dc0 	.word	0x08002dc0
 80028d4:	08002dc0 	.word	0x08002dc0
 80028d8:	08002dc4 	.word	0x08002dc4

080028dc <memset>:
 80028dc:	4402      	add	r2, r0
 80028de:	4603      	mov	r3, r0
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d100      	bne.n	80028e6 <memset+0xa>
 80028e4:	4770      	bx	lr
 80028e6:	f803 1b01 	strb.w	r1, [r3], #1
 80028ea:	e7f9      	b.n	80028e0 <memset+0x4>

080028ec <_init>:
 80028ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ee:	bf00      	nop
 80028f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028f2:	bc08      	pop	{r3}
 80028f4:	469e      	mov	lr, r3
 80028f6:	4770      	bx	lr

080028f8 <_fini>:
 80028f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fa:	bf00      	nop
 80028fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028fe:	bc08      	pop	{r3}
 8002900:	469e      	mov	lr, r3
 8002902:	4770      	bx	lr
