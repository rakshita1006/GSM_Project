
UART_INTERRUPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003404  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800358c  0800358c  0001358c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035d8  080035d8  0002163c  2**0
                  CONTENTS
  4 .ARM          00000008  080035d8  080035d8  000135d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035e0  080035e0  0002163c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035e0  080035e0  000135e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035e4  080035e4  000135e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000163c  20000000  080035e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d00  2000163c  08004c24  0002163c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000233c  08004c24  0002233c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002163c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a436  00000000  00000000  0002166c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ed1  00000000  00000000  0002baa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000818  00000000  00000000  0002d978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000800  00000000  00000000  0002e190  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020075  00000000  00000000  0002e990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000758d  00000000  00000000  0004ea05  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2601  00000000  00000000  00055f92  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00118593  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002038  00000000  00000000  00118610  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000163c 	.word	0x2000163c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003574 	.word	0x08003574

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20001640 	.word	0x20001640
 80001c4:	08003574 	.word	0x08003574

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <PeripheralInit>:

#include "Peripheral_Init.h"


void PeripheralInit()
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	      SystemClock_Config();
 80004cc:	f000 fe42 	bl	8001154 <SystemClock_Config>
		  MX_GPIO_Init();
 80004d0:	f000 f820 	bl	8000514 <MX_GPIO_Init>
		  gsm.Flags.Start= true;
 80004d4:	4a03      	ldr	r2, [pc, #12]	; (80004e4 <PeripheralInit+0x1c>)
 80004d6:	7813      	ldrb	r3, [r2, #0]
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	7013      	strb	r3, [r2, #0]
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	200016b4 	.word	0x200016b4

080004e8 <gsm_init>:

void gsm_init()
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	  MX_USART2_UART_Init();
 80004ec:	f000 f910 	bl	8000710 <MX_USART2_UART_Init>
	  HAL_UART_Receive_IT(&huart2,&Uart_Rx_Buffer, sizeof(Uart_Rx_Buffer));
 80004f0:	2201      	movs	r2, #1
 80004f2:	4905      	ldr	r1, [pc, #20]	; (8000508 <gsm_init+0x20>)
 80004f4:	4805      	ldr	r0, [pc, #20]	; (800050c <gsm_init+0x24>)
 80004f6:	f002 f941 	bl	800277c <HAL_UART_Receive_IT>
	  gsm.Flags.GsmInitialised= true;
 80004fa:	4a05      	ldr	r2, [pc, #20]	; (8000510 <gsm_init+0x28>)
 80004fc:	7813      	ldrb	r3, [r2, #0]
 80004fe:	f043 0302 	orr.w	r3, r3, #2
 8000502:	7013      	strb	r3, [r2, #0]
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20001671 	.word	0x20001671
 800050c:	20001674 	.word	0x20001674
 8000510:	200016b4 	.word	0x200016b4

08000514 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
  {
 8000514:	b580      	push	{r7, lr}
 8000516:	b08c      	sub	sp, #48	; 0x30
 8000518:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 031c 	add.w	r3, r7, #28
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	61bb      	str	r3, [r7, #24]
 800052e:	4b71      	ldr	r3, [pc, #452]	; (80006f4 <MX_GPIO_Init+0x1e0>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a70      	ldr	r2, [pc, #448]	; (80006f4 <MX_GPIO_Init+0x1e0>)
 8000534:	f043 0310 	orr.w	r3, r3, #16
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b6e      	ldr	r3, [pc, #440]	; (80006f4 <MX_GPIO_Init+0x1e0>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0310 	and.w	r3, r3, #16
 8000542:	61bb      	str	r3, [r7, #24]
 8000544:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
 800054a:	4b6a      	ldr	r3, [pc, #424]	; (80006f4 <MX_GPIO_Init+0x1e0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a69      	ldr	r2, [pc, #420]	; (80006f4 <MX_GPIO_Init+0x1e0>)
 8000550:	f043 0304 	orr.w	r3, r3, #4
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b67      	ldr	r3, [pc, #412]	; (80006f4 <MX_GPIO_Init+0x1e0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0304 	and.w	r3, r3, #4
 800055e:	617b      	str	r3, [r7, #20]
 8000560:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]
 8000566:	4b63      	ldr	r3, [pc, #396]	; (80006f4 <MX_GPIO_Init+0x1e0>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a62      	ldr	r2, [pc, #392]	; (80006f4 <MX_GPIO_Init+0x1e0>)
 800056c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b60      	ldr	r3, [pc, #384]	; (80006f4 <MX_GPIO_Init+0x1e0>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800057a:	613b      	str	r3, [r7, #16]
 800057c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	4b5c      	ldr	r3, [pc, #368]	; (80006f4 <MX_GPIO_Init+0x1e0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a5b      	ldr	r2, [pc, #364]	; (80006f4 <MX_GPIO_Init+0x1e0>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b59      	ldr	r3, [pc, #356]	; (80006f4 <MX_GPIO_Init+0x1e0>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	4b55      	ldr	r3, [pc, #340]	; (80006f4 <MX_GPIO_Init+0x1e0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a54      	ldr	r2, [pc, #336]	; (80006f4 <MX_GPIO_Init+0x1e0>)
 80005a4:	f043 0302 	orr.w	r3, r3, #2
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b52      	ldr	r3, [pc, #328]	; (80006f4 <MX_GPIO_Init+0x1e0>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0302 	and.w	r3, r3, #2
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	4b4e      	ldr	r3, [pc, #312]	; (80006f4 <MX_GPIO_Init+0x1e0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a4d      	ldr	r2, [pc, #308]	; (80006f4 <MX_GPIO_Init+0x1e0>)
 80005c0:	f043 0308 	orr.w	r3, r3, #8
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b4b      	ldr	r3, [pc, #300]	; (80006f4 <MX_GPIO_Init+0x1e0>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0308 	and.w	r3, r3, #8
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2108      	movs	r1, #8
 80005d6:	4848      	ldr	r0, [pc, #288]	; (80006f8 <MX_GPIO_Init+0x1e4>)
 80005d8:	f001 fb6e 	bl	8001cb8 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2101      	movs	r1, #1
 80005e0:	4846      	ldr	r0, [pc, #280]	; (80006fc <MX_GPIO_Init+0x1e8>)
 80005e2:	f001 fb69 	bl	8001cb8 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005e6:	2200      	movs	r2, #0
 80005e8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005ec:	4844      	ldr	r0, [pc, #272]	; (8000700 <MX_GPIO_Init+0x1ec>)
 80005ee:	f001 fb63 	bl	8001cb8 <HAL_GPIO_WritePin>
                            |Audio_RST_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin : CS_I2C_SPI_Pin */
    GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005f2:	2308      	movs	r3, #8
 80005f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f6:	2301      	movs	r3, #1
 80005f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	2300      	movs	r3, #0
 8000600:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	4619      	mov	r1, r3
 8000608:	483b      	ldr	r0, [pc, #236]	; (80006f8 <MX_GPIO_Init+0x1e4>)
 800060a:	f001 f9bb 	bl	8001984 <HAL_GPIO_Init>

    /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
    GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800060e:	2301      	movs	r3, #1
 8000610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	4619      	mov	r1, r3
 8000624:	4835      	ldr	r0, [pc, #212]	; (80006fc <MX_GPIO_Init+0x1e8>)
 8000626:	f001 f9ad 	bl	8001984 <HAL_GPIO_Init>

    /*Configure GPIO pin : PDM_OUT_Pin */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800062a:	2308      	movs	r3, #8
 800062c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062e:	2302      	movs	r3, #2
 8000630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	2300      	movs	r3, #0
 8000638:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800063a:	2305      	movs	r3, #5
 800063c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	4619      	mov	r1, r3
 8000644:	482d      	ldr	r0, [pc, #180]	; (80006fc <MX_GPIO_Init+0x1e8>)
 8000646:	f001 f99d 	bl	8001984 <HAL_GPIO_Init>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 800064a:	2301      	movs	r3, #1
 800064c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800064e:	4b2d      	ldr	r3, [pc, #180]	; (8000704 <MX_GPIO_Init+0x1f0>)
 8000650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	4619      	mov	r1, r3
 800065c:	482a      	ldr	r0, [pc, #168]	; (8000708 <MX_GPIO_Init+0x1f4>)
 800065e:	f001 f991 	bl	8001984 <HAL_GPIO_Init>

    /*Configure GPIO pin : BOOT1_Pin */
    GPIO_InitStruct.Pin = BOOT1_Pin;
 8000662:	2304      	movs	r3, #4
 8000664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000666:	2300      	movs	r3, #0
 8000668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	4619      	mov	r1, r3
 8000674:	4825      	ldr	r0, [pc, #148]	; (800070c <MX_GPIO_Init+0x1f8>)
 8000676:	f001 f985 	bl	8001984 <HAL_GPIO_Init>

    /*Configure GPIO pin : CLK_IN_Pin */
    GPIO_InitStruct.Pin = CLK_IN_Pin;
 800067a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800067e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000680:	2302      	movs	r3, #2
 8000682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800068c:	2305      	movs	r3, #5
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	481d      	ldr	r0, [pc, #116]	; (800070c <MX_GPIO_Init+0x1f8>)
 8000698:	f001 f974 	bl	8001984 <HAL_GPIO_Init>

    /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                             Audio_RST_Pin */
    GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800069c:	f24f 0310 	movw	r3, #61456	; 0xf010
 80006a0:	61fb      	str	r3, [r7, #28]
                            |Audio_RST_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	4619      	mov	r1, r3
 80006b4:	4812      	ldr	r0, [pc, #72]	; (8000700 <MX_GPIO_Init+0x1ec>)
 80006b6:	f001 f965 	bl	8001984 <HAL_GPIO_Init>

    /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
    GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80006ba:	2320      	movs	r3, #32
 80006bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006be:	2300      	movs	r3, #0
 80006c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	4619      	mov	r1, r3
 80006cc:	480c      	ldr	r0, [pc, #48]	; (8000700 <MX_GPIO_Init+0x1ec>)
 80006ce:	f001 f959 	bl	8001984 <HAL_GPIO_Init>

    /*Configure GPIO pin : MEMS_INT2_Pin */
    GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80006d2:	2302      	movs	r3, #2
 80006d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_GPIO_Init+0x1f0>)
 80006d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4619      	mov	r1, r3
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_GPIO_Init+0x1e4>)
 80006e6:	f001 f94d 	bl	8001984 <HAL_GPIO_Init>

  }
 80006ea:	bf00      	nop
 80006ec:	3730      	adds	r7, #48	; 0x30
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40020800 	.word	0x40020800
 8000700:	40020c00 	.word	0x40020c00
 8000704:	10120000 	.word	0x10120000
 8000708:	40020000 	.word	0x40020000
 800070c:	40020400 	.word	0x40020400

08000710 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000716:	4a12      	ldr	r2, [pc, #72]	; (8000760 <MX_USART2_UART_Init+0x50>)
 8000718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_USART2_UART_Init+0x4c>)
 800071c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USART2_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000748:	f001 ff32 	bl	80025b0 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000752:	f000 fd5d 	bl	8001210 <Error_Handler>

  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20001674 	.word	0x20001674
 8000760:	40004400 	.word	0x40004400

08000764 <Send_AT_Command>:
//ATCOMMANDS TcpIp_Send_data = {"AT+CIPSEND=0,",{"\r\nOK\r\n+CIPSEND:","\r\n>","\r\n+CME ERROR"},{0,0,0},'\r','\n',5000}; //returns a number identifying the socket
//ATCOMMANDS Socket_connection_Direct_Mode = {"AT+CIPOPEN=0,""\"TCP""\",""\"13.126.165.4""\",""\"4000",{"\r\nOK\r\n","","\r\n+CME ERROR"},{0,0,0},'\r','\n',5000}; //returns a number identifying the socket
//ATCommadsConfig ServerResponse = {" ",{"\r\nRECV FROM:13.126.165.4:4000\r\n+IPD","","\r\n+CME ERROR"},{0,0,0},'\r','\n',500};

uint8_t Send_AT_Command(ATCommadsConfig *atcommand)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	int i=0;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]

	while(atcommand->command[i] != '\0')
 8000770:	e00a      	b.n	8000788 <Send_AT_Command+0x24>
	{
	HAL_UART_Transmit(&huart2,&atcommand->command[i] ,1,100);
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	18d1      	adds	r1, r2, r3
 8000778:	2364      	movs	r3, #100	; 0x64
 800077a:	2201      	movs	r2, #1
 800077c:	481f      	ldr	r0, [pc, #124]	; (80007fc <Send_AT_Command+0x98>)
 800077e:	f001 ff64 	bl	800264a <HAL_UART_Transmit>
	i++;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	3301      	adds	r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
	while(atcommand->command[i] != '\0')
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d1ee      	bne.n	8000772 <Send_AT_Command+0xe>
	}

	HAL_UART_Transmit(&huart2,&atcommand->dillimeter1 ,1,100);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f103 01ad 	add.w	r1, r3, #173	; 0xad
 800079a:	2364      	movs	r3, #100	; 0x64
 800079c:	2201      	movs	r2, #1
 800079e:	4817      	ldr	r0, [pc, #92]	; (80007fc <Send_AT_Command+0x98>)
 80007a0:	f001 ff53 	bl	800264a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,&atcommand->dillimeter2 ,1,100);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f103 01ae 	add.w	r1, r3, #174	; 0xae
 80007aa:	2364      	movs	r3, #100	; 0x64
 80007ac:	2201      	movs	r2, #1
 80007ae:	4813      	ldr	r0, [pc, #76]	; (80007fc <Send_AT_Command+0x98>)
 80007b0:	f001 ff4b 	bl	800264a <HAL_UART_Transmit>

	startTimer(&AT_timer,atcommand->timeout, false);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80007ba:	2200      	movs	r2, #0
 80007bc:	4619      	mov	r1, r3
 80007be:	4810      	ldr	r0, [pc, #64]	; (8000800 <Send_AT_Command+0x9c>)
 80007c0:	f000 fe82 	bl	80014c8 <startTimer>
	while (AT_Flag.AT_Response == false)
 80007c4:	e007      	b.n	80007d6 <Send_AT_Command+0x72>
	{
	 if(isTimerComplete(AT_timer))
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <Send_AT_Command+0x9c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fee2 	bl	8001594 <isTimerComplete>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d107      	bne.n	80007e6 <Send_AT_Command+0x82>
	while (AT_Flag.AT_Response == false)
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <Send_AT_Command+0xa0>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0f0      	beq.n	80007c6 <Send_AT_Command+0x62>
 80007e4:	e000      	b.n	80007e8 <Send_AT_Command+0x84>
		{
         break;
 80007e6:	bf00      	nop
	    }
	}

	 stopTimer(AT_timer);
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <Send_AT_Command+0x9c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 feab 	bl	8001548 <stopTimer>
	 return 1;
 80007f2:	2301      	movs	r3, #1

}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20001674 	.word	0x20001674
 8000800:	20001658 	.word	0x20001658
 8000804:	20001670 	.word	0x20001670

08000808 <gsm_sim_Status>:


bool gsm_sim_Status()
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
	int i=0,j=0;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
	Send_AT_Command(&Sim_Detect);
 8000816:	4810      	ldr	r0, [pc, #64]	; (8000858 <gsm_sim_Status+0x50>)
 8000818:	f7ff ffa4 	bl	8000764 <Send_AT_Command>
	unsigned char *pktptr = &gsm.RxData[0];
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <gsm_sim_Status+0x54>)
 800081e:	60bb      	str	r3, [r7, #8]
//	pktptr = jump_char_fixed(pktptr,':');
//	pktptr++;
	while(*pktptr != '\r')
 8000820:	e011      	b.n	8000846 <gsm_sim_Status+0x3e>
	{
		if(*pktptr == Sim_Detect.Response[0][i])
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	781a      	ldrb	r2, [r3, #0]
 8000826:	490c      	ldr	r1, [pc, #48]	; (8000858 <gsm_sim_Status+0x50>)
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	440b      	add	r3, r1
 800082c:	3332      	adds	r3, #50	; 0x32
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	429a      	cmp	r2, r3
 8000832:	d103      	bne.n	800083c <gsm_sim_Status+0x34>
			i++;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	3301      	adds	r3, #1
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	e001      	b.n	8000840 <gsm_sim_Status+0x38>
		else return false;
 800083c:	2300      	movs	r3, #0
 800083e:	e007      	b.n	8000850 <gsm_sim_Status+0x48>
		pktptr++;
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	3301      	adds	r3, #1
 8000844:	60bb      	str	r3, [r7, #8]
	while(*pktptr != '\r')
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b0d      	cmp	r3, #13
 800084c:	d1e9      	bne.n	8000822 <gsm_sim_Status+0x1a>
	}
	return true;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200000b4 	.word	0x200000b4
 800085c:	20001f30 	.word	0x20001f30

08000860 <gsm_ccid>:


void gsm_ccid()
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
	int i=0,j=0;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
	Send_AT_Command(&CCID);
 800086e:	4810      	ldr	r0, [pc, #64]	; (80008b0 <gsm_ccid+0x50>)
 8000870:	f7ff ff78 	bl	8000764 <Send_AT_Command>
//	{
//		gsm.RxData[j] = Data[j];
//		j++;
//
//	}
	unsigned char *pktptr = &gsm.RxData[0];
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <gsm_ccid+0x54>)
 8000876:	60bb      	str	r3, [r7, #8]
	pktptr = jump_char_fixed(pktptr,':');
 8000878:	213a      	movs	r1, #58	; 0x3a
 800087a:	68b8      	ldr	r0, [r7, #8]
 800087c:	f000 f972 	bl	8000b64 <jump_char_fixed>
 8000880:	60b8      	str	r0, [r7, #8]
	//pktptr++;
	while(*pktptr != '\r')
 8000882:	e00c      	b.n	800089e <gsm_ccid+0x3e>
	{
		gsm.gsm_data.ccid[i++] = *pktptr;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	1c5a      	adds	r2, r3, #1
 8000888:	60fa      	str	r2, [r7, #12]
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	7811      	ldrb	r1, [r2, #0]
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <gsm_ccid+0x58>)
 8000890:	4413      	add	r3, r2
 8000892:	460a      	mov	r2, r1
 8000894:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		pktptr++;
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	3301      	adds	r3, #1
 800089c:	60bb      	str	r3, [r7, #8]
	while(*pktptr != '\r')
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b0d      	cmp	r3, #13
 80008a4:	d1ee      	bne.n	8000884 <gsm_ccid+0x24>
	}
}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200002d0 	.word	0x200002d0
 80008b4:	20001f30 	.word	0x20001f30
 80008b8:	200016b4 	.word	0x200016b4

080008bc <gsm_imsi>:
void gsm_imsi()
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
	int i=0,j=0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
	Send_AT_Command(&IMSI);
 80008ca:	480f      	ldr	r0, [pc, #60]	; (8000908 <gsm_imsi+0x4c>)
 80008cc:	f7ff ff4a 	bl	8000764 <Send_AT_Command>
//	{
//		gsm.RxData[j] = Data[j];
//		j++;
//
//	}
	unsigned char *pktptr = &gsm.RxData[0];
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <gsm_imsi+0x50>)
 80008d2:	60bb      	str	r3, [r7, #8]
	pktptr = jump_char_fixed(pktptr,'\n');
 80008d4:	210a      	movs	r1, #10
 80008d6:	68b8      	ldr	r0, [r7, #8]
 80008d8:	f000 f944 	bl	8000b64 <jump_char_fixed>
 80008dc:	60b8      	str	r0, [r7, #8]
	//pktptr++;
	while(*pktptr != '\r')
 80008de:	e00b      	b.n	80008f8 <gsm_imsi+0x3c>
	{
		gsm.gsm_data.imsi[i++] = *pktptr;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	1c5a      	adds	r2, r3, #1
 80008e4:	60fa      	str	r2, [r7, #12]
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	7811      	ldrb	r1, [r2, #0]
 80008ea:	4a09      	ldr	r2, [pc, #36]	; (8000910 <gsm_imsi+0x54>)
 80008ec:	4413      	add	r3, r2
 80008ee:	460a      	mov	r2, r1
 80008f0:	74da      	strb	r2, [r3, #19]
		pktptr++;
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	3301      	adds	r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
	while(*pktptr != '\r')
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b0d      	cmp	r3, #13
 80008fe:	d1ef      	bne.n	80008e0 <gsm_imsi+0x24>
	}
}
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000168 	.word	0x20000168
 800090c:	20001f30 	.word	0x20001f30
 8000910:	200016b4 	.word	0x200016b4

08000914 <gsm_imei>:

void gsm_imei()
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
	int i=0,j=0;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
	Send_AT_Command(&IMEI);
 8000922:	480f      	ldr	r0, [pc, #60]	; (8000960 <gsm_imei+0x4c>)
 8000924:	f7ff ff1e 	bl	8000764 <Send_AT_Command>
//		{
//			gsm.RxData[j] = Data[j];
//			j++;
//
//		}
	unsigned char *pktptr = &gsm.RxData[0];
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <gsm_imei+0x50>)
 800092a:	60bb      	str	r3, [r7, #8]
	pktptr = jump_char_fixed(pktptr,'\n');
 800092c:	210a      	movs	r1, #10
 800092e:	68b8      	ldr	r0, [r7, #8]
 8000930:	f000 f918 	bl	8000b64 <jump_char_fixed>
 8000934:	60b8      	str	r0, [r7, #8]
	//pktptr++;
	while(*pktptr != '\r')
 8000936:	e00b      	b.n	8000950 <gsm_imei+0x3c>
	{
		gsm.gsm_data.imei[i++] = *pktptr;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	60fa      	str	r2, [r7, #12]
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	7811      	ldrb	r1, [r2, #0]
 8000942:	4a09      	ldr	r2, [pc, #36]	; (8000968 <gsm_imei+0x54>)
 8000944:	4413      	add	r3, r2
 8000946:	460a      	mov	r2, r1
 8000948:	70da      	strb	r2, [r3, #3]
		pktptr++;
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	3301      	adds	r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
	while(*pktptr != '\r')
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b0d      	cmp	r3, #13
 8000956:	d1ef      	bne.n	8000938 <gsm_imei+0x24>
	}
}
 8000958:	bf00      	nop
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000021c 	.word	0x2000021c
 8000964:	20001f30 	.word	0x20001f30
 8000968:	200016b4 	.word	0x200016b4

0800096c <network_registration_status>:

bool network_registration_status(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
	Send_AT_Command(&NetwrokRegistrationStatus);
 8000972:	480c      	ldr	r0, [pc, #48]	; (80009a4 <network_registration_status+0x38>)
 8000974:	f7ff fef6 	bl	8000764 <Send_AT_Command>
	unsigned char *pktptr = &gsm.RxData[0];
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <network_registration_status+0x3c>)
 800097a:	607b      	str	r3, [r7, #4]
	pktptr = jump_char_fixed(pktptr,',');
 800097c:	212c      	movs	r1, #44	; 0x2c
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f000 f8f0 	bl	8000b64 <jump_char_fixed>
 8000984:	6078      	str	r0, [r7, #4]
	pktptr++;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	3301      	adds	r3, #1
 800098a:	607b      	str	r3, [r7, #4]
	if(*pktptr == '1')
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b31      	cmp	r3, #49	; 0x31
 8000992:	d101      	bne.n	8000998 <network_registration_status+0x2c>
		return true;
 8000994:	2301      	movs	r3, #1
 8000996:	e000      	b.n	800099a <network_registration_status+0x2e>
	else
		return false;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000438 	.word	0x20000438
 80009a8:	20001f30 	.word	0x20001f30

080009ac <network_signal_strength>:

void network_signal_strength()
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
	int i=0,j=0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
	Send_AT_Command(&NetwrokSignalStrength);
 80009ba:	4811      	ldr	r0, [pc, #68]	; (8000a00 <network_signal_strength+0x54>)
 80009bc:	f7ff fed2 	bl	8000764 <Send_AT_Command>
//		{
//			gsm.RxData[j] = Data[j];
//			j++;
//
//		}
	unsigned char *pktptr = &gsm.RxData[0];
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <network_signal_strength+0x58>)
 80009c2:	60bb      	str	r3, [r7, #8]
	pktptr = jump_char_fixed(pktptr,':');
 80009c4:	213a      	movs	r1, #58	; 0x3a
 80009c6:	68b8      	ldr	r0, [r7, #8]
 80009c8:	f000 f8cc 	bl	8000b64 <jump_char_fixed>
 80009cc:	60b8      	str	r0, [r7, #8]
	pktptr++;
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	3301      	adds	r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
	while(*pktptr != '\r')
 80009d4:	e00c      	b.n	80009f0 <network_signal_strength+0x44>
	{
		gsm.gsm_data.network_strength[i++] = *pktptr;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	1c5a      	adds	r2, r3, #1
 80009da:	60fa      	str	r2, [r7, #12]
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	7811      	ldrb	r1, [r2, #0]
 80009e0:	4a09      	ldr	r2, [pc, #36]	; (8000a08 <network_signal_strength+0x5c>)
 80009e2:	4413      	add	r3, r2
 80009e4:	460a      	mov	r2, r1
 80009e6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		pktptr++;
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	3301      	adds	r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
	while(*pktptr != '\r')
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b0d      	cmp	r3, #13
 80009f6:	d1ee      	bne.n	80009d6 <network_signal_strength+0x2a>
	}
}
 80009f8:	bf00      	nop
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200004ec 	.word	0x200004ec
 8000a04:	20001f30 	.word	0x20001f30
 8000a08:	200016b4 	.word	0x200016b4

08000a0c <cops>:

void cops(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
	int i=0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
	Send_AT_Command(&OperatorSelection);
 8000a16:	4811      	ldr	r0, [pc, #68]	; (8000a5c <cops+0x50>)
 8000a18:	f7ff fea4 	bl	8000764 <Send_AT_Command>
	unsigned char *pktptr = &gsm.RxData[0];
 8000a1c:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <cops+0x54>)
 8000a1e:	603b      	str	r3, [r7, #0]
	pktptr = jump_char_fixed(pktptr,':');
 8000a20:	213a      	movs	r1, #58	; 0x3a
 8000a22:	6838      	ldr	r0, [r7, #0]
 8000a24:	f000 f89e 	bl	8000b64 <jump_char_fixed>
 8000a28:	6038      	str	r0, [r7, #0]
	pktptr++;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	603b      	str	r3, [r7, #0]
	while(*pktptr != '\r')
 8000a30:	e00c      	b.n	8000a4c <cops+0x40>
	{
		gsm.gsm_data.cops[i++] = *pktptr;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	607a      	str	r2, [r7, #4]
 8000a38:	683a      	ldr	r2, [r7, #0]
 8000a3a:	7811      	ldrb	r1, [r2, #0]
 8000a3c:	4a09      	ldr	r2, [pc, #36]	; (8000a64 <cops+0x58>)
 8000a3e:	4413      	add	r3, r2
 8000a40:	460a      	mov	r2, r1
 8000a42:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		pktptr++;
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	603b      	str	r3, [r7, #0]
	while(*pktptr != '\r')
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b0d      	cmp	r3, #13
 8000a52:	d1ee      	bne.n	8000a32 <cops+0x26>
	}
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200005a0 	.word	0x200005a0
 8000a60:	20001f30 	.word	0x20001f30
 8000a64:	200016b4 	.word	0x200016b4

08000a68 <copn>:

void copn(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
	int i=0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
	Send_AT_Command(&ReadOperatorName);
 8000a72:	4811      	ldr	r0, [pc, #68]	; (8000ab8 <copn+0x50>)
 8000a74:	f7ff fe76 	bl	8000764 <Send_AT_Command>
	unsigned char *pktptr = &gsm.RxData[0];
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <copn+0x54>)
 8000a7a:	603b      	str	r3, [r7, #0]
	pktptr = jump_char_fixed(pktptr,':');
 8000a7c:	213a      	movs	r1, #58	; 0x3a
 8000a7e:	6838      	ldr	r0, [r7, #0]
 8000a80:	f000 f870 	bl	8000b64 <jump_char_fixed>
 8000a84:	6038      	str	r0, [r7, #0]
	pktptr++;
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	603b      	str	r3, [r7, #0]
	while(*pktptr != '\r')
 8000a8c:	e00c      	b.n	8000aa8 <copn+0x40>
	{
		gsm.gsm_data.copn[i++] = *pktptr;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	1c5a      	adds	r2, r3, #1
 8000a92:	607a      	str	r2, [r7, #4]
 8000a94:	683a      	ldr	r2, [r7, #0]
 8000a96:	7811      	ldrb	r1, [r2, #0]
 8000a98:	4a09      	ldr	r2, [pc, #36]	; (8000ac0 <copn+0x58>)
 8000a9a:	4413      	add	r3, r2
 8000a9c:	460a      	mov	r2, r1
 8000a9e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pktptr++;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	603b      	str	r3, [r7, #0]
	while(*pktptr != '\r')
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b0d      	cmp	r3, #13
 8000aae:	d1ee      	bne.n	8000a8e <copn+0x26>
	}
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000654 	.word	0x20000654
 8000abc:	20001f30 	.word	0x20001f30
 8000ac0:	200016b4 	.word	0x200016b4

08000ac4 <cnbp>:


void cnbp(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
//			gsm.RxData[j] = Data[j];
//			break;
//		}
//
//	}
	int i=0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
	Send_AT_Command(&BaudSelection);
 8000ace:	4811      	ldr	r0, [pc, #68]	; (8000b14 <cnbp+0x50>)
 8000ad0:	f7ff fe48 	bl	8000764 <Send_AT_Command>
	unsigned char *pktptr = &gsm.RxData[0];
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <cnbp+0x54>)
 8000ad6:	603b      	str	r3, [r7, #0]
	pktptr = jump_char_fixed(pktptr,':');
 8000ad8:	213a      	movs	r1, #58	; 0x3a
 8000ada:	6838      	ldr	r0, [r7, #0]
 8000adc:	f000 f842 	bl	8000b64 <jump_char_fixed>
 8000ae0:	6038      	str	r0, [r7, #0]
	pktptr++;
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	603b      	str	r3, [r7, #0]
	while(*pktptr != '\r')
 8000ae8:	e00c      	b.n	8000b04 <cnbp+0x40>
	{
		gsm.gsm_data.cnbp[i++] = *pktptr;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	1c5a      	adds	r2, r3, #1
 8000aee:	607a      	str	r2, [r7, #4]
 8000af0:	683a      	ldr	r2, [r7, #0]
 8000af2:	7811      	ldrb	r1, [r2, #0]
 8000af4:	4a09      	ldr	r2, [pc, #36]	; (8000b1c <cnbp+0x58>)
 8000af6:	4413      	add	r3, r2
 8000af8:	460a      	mov	r2, r1
 8000afa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		pktptr++;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	3301      	adds	r3, #1
 8000b02:	603b      	str	r3, [r7, #0]
	while(*pktptr != '\r')
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b0d      	cmp	r3, #13
 8000b0a:	d1ee      	bne.n	8000aea <cnbp+0x26>
	}
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000708 	.word	0x20000708
 8000b18:	20001f30 	.word	0x20001f30
 8000b1c:	200016b4 	.word	0x200016b4

08000b20 <gsm_data>:
	else
		return false;
}

void gsm_data()
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	copn();
 8000b24:	f7ff ffa0 	bl	8000a68 <copn>
	cnbp();
 8000b28:	f7ff ffcc 	bl	8000ac4 <cnbp>
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <VerifyResponseCommand>:

bool VerifyResponseCommand(ATCommadsConfig *atcommand, char dilli)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	70fb      	strb	r3, [r7, #3]
	if(str_comp_dilimetr(gsm.RxData, &atcommand->Response[0][0],dilli) == true)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3332      	adds	r3, #50	; 0x32
 8000b40:	78fa      	ldrb	r2, [r7, #3]
 8000b42:	4619      	mov	r1, r3
 8000b44:	4806      	ldr	r0, [pc, #24]	; (8000b60 <VerifyResponseCommand+0x30>)
 8000b46:	f000 fbf5 	bl	8001334 <str_comp_dilimetr>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d101      	bne.n	8000b54 <VerifyResponseCommand+0x24>
	{
		return 1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	e000      	b.n	8000b56 <VerifyResponseCommand+0x26>
	}
	else
	{
		return 0;
 8000b54:	2300      	movs	r3, #0
	}
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20001f30 	.word	0x20001f30

08000b64 <jump_char_fixed>:

unsigned char* jump_char_fixed(unsigned char *pktPtr, char character)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	70fb      	strb	r3, [r7, #3]
    while(*pktPtr++ !=  character);
 8000b70:	bf00      	nop
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	1c5a      	adds	r2, r3, #1
 8000b76:	607a      	str	r2, [r7, #4]
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	78fa      	ldrb	r2, [r7, #3]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d1f8      	bne.n	8000b72 <jump_char_fixed+0xe>
    return pktPtr;
 8000b80:	687b      	ldr	r3, [r7, #4]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <gsmtask>:

void gsmtask()
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
	switch(gsm_state)
 8000b96:	4bb9      	ldr	r3, [pc, #740]	; (8000e7c <gsmtask+0x2ec>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b07      	cmp	r3, #7
 8000b9c:	f200 8273 	bhi.w	8001086 <gsmtask+0x4f6>
 8000ba0:	a201      	add	r2, pc, #4	; (adr r2, 8000ba8 <gsmtask+0x18>)
 8000ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba6:	bf00      	nop
 8000ba8:	08000bc9 	.word	0x08000bc9
 8000bac:	08000c2f 	.word	0x08000c2f
 8000bb0:	08000c61 	.word	0x08000c61
 8000bb4:	08000daf 	.word	0x08000daf
 8000bb8:	08000dbb 	.word	0x08000dbb
 8000bbc:	08000ff1 	.word	0x08000ff1
 8000bc0:	0800107b 	.word	0x0800107b
 8000bc4:	08001081 	.word	0x08001081
		{
		case GSM_INIT_STATE:
		{
			if (gsm.Flags.Start == true && gsm.Flags.GsmInitialised !=true)
 8000bc8:	4bad      	ldr	r3, [pc, #692]	; (8000e80 <gsmtask+0x2f0>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00b      	beq.n	8000bee <gsmtask+0x5e>
 8000bd6:	4baa      	ldr	r3, [pc, #680]	; (8000e80 <gsmtask+0x2f0>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d104      	bne.n	8000bee <gsmtask+0x5e>
			{
				gsm_init();
 8000be4:	f7ff fc80 	bl	80004e8 <gsm_init>
				Send_AT_Command(&ECHO);
 8000be8:	48a6      	ldr	r0, [pc, #664]	; (8000e84 <gsmtask+0x2f4>)
 8000bea:	f7ff fdbb 	bl	8000764 <Send_AT_Command>
			}
			if(gsm.Flags.GsmInitialised == true)
 8000bee:	4ba4      	ldr	r3, [pc, #656]	; (8000e80 <gsmtask+0x2f0>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f000 8246 	beq.w	800108a <gsmtask+0x4fa>
			{
				if(gsm_sim_Status() == true)
 8000bfe:	f7ff fe03 	bl	8000808 <gsm_sim_Status>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d10e      	bne.n	8000c26 <gsmtask+0x96>
				{

					gsm_imsi();
 8000c08:	f7ff fe58 	bl	80008bc <gsm_imsi>
					gsm_imei();
 8000c0c:	f7ff fe82 	bl	8000914 <gsm_imei>
					gsm_ccid();
 8000c10:	f7ff fe26 	bl	8000860 <gsm_ccid>
					gsm.Flags.GsmSimStatus = true;
 8000c14:	4a9a      	ldr	r2, [pc, #616]	; (8000e80 <gsmtask+0x2f0>)
 8000c16:	7813      	ldrb	r3, [r2, #0]
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	7013      	strb	r3, [r2, #0]
					gsm_state = GSM_NETWORK_STATE;
 8000c1e:	4b97      	ldr	r3, [pc, #604]	; (8000e7c <gsmtask+0x2ec>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
					break;
 8000c24:	e236      	b.n	8001094 <gsmtask+0x504>
				}
				else
				{
					gsm_state = GSM_INIT_STATE;
 8000c26:	4b95      	ldr	r3, [pc, #596]	; (8000e7c <gsmtask+0x2ec>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	    break;
 8000c2c:	e22d      	b.n	800108a <gsmtask+0x4fa>
		case GSM_NETWORK_STATE:
		{
			Send_AT_Command(&NetwrokRegistration);
 8000c2e:	4896      	ldr	r0, [pc, #600]	; (8000e88 <gsmtask+0x2f8>)
 8000c30:	f7ff fd98 	bl	8000764 <Send_AT_Command>
			if (network_registration_status() == true)
 8000c34:	f7ff fe9a 	bl	800096c <network_registration_status>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d10c      	bne.n	8000c58 <gsmtask+0xc8>
			{
				cops();
 8000c3e:	f7ff fee5 	bl	8000a0c <cops>
				network_signal_strength();
 8000c42:	f7ff feb3 	bl	80009ac <network_signal_strength>
				gsm.Flags.GsmNetworkInitialised = true;
 8000c46:	4a8e      	ldr	r2, [pc, #568]	; (8000e80 <gsmtask+0x2f0>)
 8000c48:	7813      	ldrb	r3, [r2, #0]
 8000c4a:	f043 0308 	orr.w	r3, r3, #8
 8000c4e:	7013      	strb	r3, [r2, #0]
	    		gsm_state = GSM_GPRS_STATE;
 8000c50:	4b8a      	ldr	r3, [pc, #552]	; (8000e7c <gsmtask+0x2ec>)
 8000c52:	2202      	movs	r2, #2
 8000c54:	701a      	strb	r2, [r3, #0]
			else
			{
				gsm_state = GSM_NETWORK_STATE;
			}
		}
		break;
 8000c56:	e21d      	b.n	8001094 <gsmtask+0x504>
				gsm_state = GSM_NETWORK_STATE;
 8000c58:	4b88      	ldr	r3, [pc, #544]	; (8000e7c <gsmtask+0x2ec>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
		break;
 8000c5e:	e219      	b.n	8001094 <gsmtask+0x504>
		case GSM_GPRS_STATE:
		{
			if(gsm.Flags.GsmNetworkInitialised == true)
 8000c60:	4b87      	ldr	r3, [pc, #540]	; (8000e80 <gsmtask+0x2f0>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	f003 0308 	and.w	r3, r3, #8
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f000 820f 	beq.w	800108e <gsmtask+0x4fe>
			{
				switch(gprs_state)
 8000c70:	4b86      	ldr	r3, [pc, #536]	; (8000e8c <gsmtask+0x2fc>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	f200 820a 	bhi.w	800108e <gsmtask+0x4fe>
 8000c7a:	a201      	add	r2, pc, #4	; (adr r2, 8000c80 <gsmtask+0xf0>)
 8000c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c80:	08000c91 	.word	0x08000c91
 8000c84:	08000cd1 	.word	0x08000cd1
 8000c88:	08000d11 	.word	0x08000d11
 8000c8c:	08000d51 	.word	0x08000d51
				{
					case Gprs_Registration:
					{

						uint8_t gprs_reg_state=0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	75fb      	strb	r3, [r7, #23]
						Send_AT_Command(&GPRSRegistration);
 8000c94:	487e      	ldr	r0, [pc, #504]	; (8000e90 <gsmtask+0x300>)
 8000c96:	f7ff fd65 	bl	8000764 <Send_AT_Command>
						Send_AT_Command(&GPRSRegistrationStatus);
 8000c9a:	487e      	ldr	r0, [pc, #504]	; (8000e94 <gsmtask+0x304>)
 8000c9c:	f7ff fd62 	bl	8000764 <Send_AT_Command>
						gprs_reg_state=VerifyResponseCommand(&GPRSRegistrationStatus,':');
 8000ca0:	213a      	movs	r1, #58	; 0x3a
 8000ca2:	487c      	ldr	r0, [pc, #496]	; (8000e94 <gsmtask+0x304>)
 8000ca4:	f7ff ff44 	bl	8000b30 <VerifyResponseCommand>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	75fb      	strb	r3, [r7, #23]
						if(gprs_reg_state == true)
 8000cac:	7dfb      	ldrb	r3, [r7, #23]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d108      	bne.n	8000cc4 <gsmtask+0x134>
						{
							gsm.Flags.GPRS_REG_Flag = true;
 8000cb2:	4a73      	ldr	r2, [pc, #460]	; (8000e80 <gsmtask+0x2f0>)
 8000cb4:	7813      	ldrb	r3, [r2, #0]
 8000cb6:	f043 0310 	orr.w	r3, r3, #16
 8000cba:	7013      	strb	r3, [r2, #0]
							gprs_state = Gprs_PDP_Attachment;
 8000cbc:	4b73      	ldr	r3, [pc, #460]	; (8000e8c <gsmtask+0x2fc>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
						else
						{
							gsm.Flags.GPRS_REG_Flag =false;
						}
					}
					break;
 8000cc2:	e073      	b.n	8000dac <gsmtask+0x21c>
							gsm.Flags.GPRS_REG_Flag =false;
 8000cc4:	4a6e      	ldr	r2, [pc, #440]	; (8000e80 <gsmtask+0x2f0>)
 8000cc6:	7813      	ldrb	r3, [r2, #0]
 8000cc8:	f36f 1304 	bfc	r3, #4, #1
 8000ccc:	7013      	strb	r3, [r2, #0]
					break;
 8000cce:	e06d      	b.n	8000dac <gsmtask+0x21c>
					case Gprs_PDP_Attachment:
					{
						uint8_t gprs_attachment_state=0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	763b      	strb	r3, [r7, #24]
					    Send_AT_Command(&PDPAttachWrite);
 8000cd4:	4870      	ldr	r0, [pc, #448]	; (8000e98 <gsmtask+0x308>)
 8000cd6:	f7ff fd45 	bl	8000764 <Send_AT_Command>
					    Send_AT_Command(&PDPStatus);
 8000cda:	4870      	ldr	r0, [pc, #448]	; (8000e9c <gsmtask+0x30c>)
 8000cdc:	f7ff fd42 	bl	8000764 <Send_AT_Command>
					    gprs_attachment_state=VerifyResponseCommand(&PDPStatus,':');
 8000ce0:	213a      	movs	r1, #58	; 0x3a
 8000ce2:	486e      	ldr	r0, [pc, #440]	; (8000e9c <gsmtask+0x30c>)
 8000ce4:	f7ff ff24 	bl	8000b30 <VerifyResponseCommand>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	763b      	strb	r3, [r7, #24]
						if(gprs_attachment_state== true)
 8000cec:	7e3b      	ldrb	r3, [r7, #24]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d108      	bne.n	8000d04 <gsmtask+0x174>
						{
							gsm.Flags.GPRS_Attachment_Flag =true;
 8000cf2:	4a63      	ldr	r2, [pc, #396]	; (8000e80 <gsmtask+0x2f0>)
 8000cf4:	7813      	ldrb	r3, [r2, #0]
 8000cf6:	f043 0320 	orr.w	r3, r3, #32
 8000cfa:	7013      	strb	r3, [r2, #0]
							gprs_state = Gprs_PDP_Context;
 8000cfc:	4b63      	ldr	r3, [pc, #396]	; (8000e8c <gsmtask+0x2fc>)
 8000cfe:	2202      	movs	r2, #2
 8000d00:	701a      	strb	r2, [r3, #0]
						else
						{
							gsm.Flags.GPRS_Attachment_Flag =false;
						}
					}
					break;
 8000d02:	e053      	b.n	8000dac <gsmtask+0x21c>
							gsm.Flags.GPRS_Attachment_Flag =false;
 8000d04:	4a5e      	ldr	r2, [pc, #376]	; (8000e80 <gsmtask+0x2f0>)
 8000d06:	7813      	ldrb	r3, [r2, #0]
 8000d08:	f36f 1345 	bfc	r3, #5, #1
 8000d0c:	7013      	strb	r3, [r2, #0]
					break;
 8000d0e:	e04d      	b.n	8000dac <gsmtask+0x21c>
					case Gprs_PDP_Context:
					{
						uint8_t gprs_PDP_Context_state=0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	767b      	strb	r3, [r7, #25]
						Send_AT_Command(&PDPContext);
 8000d14:	4862      	ldr	r0, [pc, #392]	; (8000ea0 <gsmtask+0x310>)
 8000d16:	f7ff fd25 	bl	8000764 <Send_AT_Command>
						Send_AT_Command(&PDPContextStatus);
 8000d1a:	4862      	ldr	r0, [pc, #392]	; (8000ea4 <gsmtask+0x314>)
 8000d1c:	f7ff fd22 	bl	8000764 <Send_AT_Command>
						gprs_PDP_Context_state=VerifyResponseCommand(&PDPContextStatus,':');
 8000d20:	213a      	movs	r1, #58	; 0x3a
 8000d22:	4860      	ldr	r0, [pc, #384]	; (8000ea4 <gsmtask+0x314>)
 8000d24:	f7ff ff04 	bl	8000b30 <VerifyResponseCommand>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	767b      	strb	r3, [r7, #25]
						if(gprs_PDP_Context_state== true)
 8000d2c:	7e7b      	ldrb	r3, [r7, #25]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d108      	bne.n	8000d44 <gsmtask+0x1b4>
						{
							gsm.Flags.GPRS_PDP_Context_Flag =true;
 8000d32:	4a53      	ldr	r2, [pc, #332]	; (8000e80 <gsmtask+0x2f0>)
 8000d34:	7813      	ldrb	r3, [r2, #0]
 8000d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d3a:	7013      	strb	r3, [r2, #0]
							gprs_state = Gprs_PDP_Activate;
 8000d3c:	4b53      	ldr	r3, [pc, #332]	; (8000e8c <gsmtask+0x2fc>)
 8000d3e:	2203      	movs	r2, #3
 8000d40:	701a      	strb	r2, [r3, #0]
						else
						{
							gsm.Flags.GPRS_PDP_Context_Flag =false;
						}
					}
					break;
 8000d42:	e033      	b.n	8000dac <gsmtask+0x21c>
							gsm.Flags.GPRS_PDP_Context_Flag =false;
 8000d44:	4a4e      	ldr	r2, [pc, #312]	; (8000e80 <gsmtask+0x2f0>)
 8000d46:	7813      	ldrb	r3, [r2, #0]
 8000d48:	f36f 1386 	bfc	r3, #6, #1
 8000d4c:	7013      	strb	r3, [r2, #0]
					break;
 8000d4e:	e02d      	b.n	8000dac <gsmtask+0x21c>
					case Gprs_PDP_Activate:
					{
						uint8_t gprs_PDP_Activate_state=0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	76bb      	strb	r3, [r7, #26]
						Send_AT_Command(&PDPActivate);
 8000d54:	4854      	ldr	r0, [pc, #336]	; (8000ea8 <gsmtask+0x318>)
 8000d56:	f7ff fd05 	bl	8000764 <Send_AT_Command>
						Send_AT_Command(&PDPActivateStatus);
 8000d5a:	4854      	ldr	r0, [pc, #336]	; (8000eac <gsmtask+0x31c>)
 8000d5c:	f7ff fd02 	bl	8000764 <Send_AT_Command>
						gprs_PDP_Activate_state=VerifyResponseCommand(&PDPActivateStatus,':');
 8000d60:	213a      	movs	r1, #58	; 0x3a
 8000d62:	4852      	ldr	r0, [pc, #328]	; (8000eac <gsmtask+0x31c>)
 8000d64:	f7ff fee4 	bl	8000b30 <VerifyResponseCommand>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	76bb      	strb	r3, [r7, #26]
						if(gprs_PDP_Activate_state == true)
 8000d6c:	7ebb      	ldrb	r3, [r7, #26]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d110      	bne.n	8000d94 <gsmtask+0x204>
						{
							gsm.Flags.GPRS_PDP_Activate_Flag =true;
 8000d72:	4a43      	ldr	r2, [pc, #268]	; (8000e80 <gsmtask+0x2f0>)
 8000d74:	7813      	ldrb	r3, [r2, #0]
 8000d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d7a:	7013      	strb	r3, [r2, #0]
							gsm.Flags.GPRSInitialised =true;
 8000d7c:	4a40      	ldr	r2, [pc, #256]	; (8000e80 <gsmtask+0x2f0>)
 8000d7e:	7853      	ldrb	r3, [r2, #1]
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	7053      	strb	r3, [r2, #1]
							gprs_state = Gprs_PDP_Attachment;
 8000d86:	4b41      	ldr	r3, [pc, #260]	; (8000e8c <gsmtask+0x2fc>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	701a      	strb	r2, [r3, #0]
							gsm_state = GSM_DATAPACKET_STATE;
 8000d8c:	4b3b      	ldr	r3, [pc, #236]	; (8000e7c <gsmtask+0x2ec>)
 8000d8e:	2203      	movs	r2, #3
 8000d90:	701a      	strb	r2, [r3, #0]
							Send_AT_Command(&PDPDeactivate);
							gsm.Flags.GPRS_PDP_Activate_Flag =false;
							gprs_state = Gprs_PDP_Activate;
						}
					}
					break;
 8000d92:	e00a      	b.n	8000daa <gsmtask+0x21a>
							Send_AT_Command(&PDPDeactivate);
 8000d94:	4846      	ldr	r0, [pc, #280]	; (8000eb0 <gsmtask+0x320>)
 8000d96:	f7ff fce5 	bl	8000764 <Send_AT_Command>
							gsm.Flags.GPRS_PDP_Activate_Flag =false;
 8000d9a:	4a39      	ldr	r2, [pc, #228]	; (8000e80 <gsmtask+0x2f0>)
 8000d9c:	7813      	ldrb	r3, [r2, #0]
 8000d9e:	f36f 13c7 	bfc	r3, #7, #1
 8000da2:	7013      	strb	r3, [r2, #0]
							gprs_state = Gprs_PDP_Activate;
 8000da4:	4b39      	ldr	r3, [pc, #228]	; (8000e8c <gsmtask+0x2fc>)
 8000da6:	2203      	movs	r2, #3
 8000da8:	701a      	strb	r2, [r3, #0]
					break;
 8000daa:	bf00      	nop
			    }
			}
		}
		break;
 8000dac:	e16f      	b.n	800108e <gsmtask+0x4fe>
		case GSM_DATAPACKET_STATE:
				{
					gsm_data();
 8000dae:	f7ff feb7 	bl	8000b20 <gsm_data>
					gsm_state = GSM_TCPIP_STATE;
 8000db2:	4b32      	ldr	r3, [pc, #200]	; (8000e7c <gsmtask+0x2ec>)
 8000db4:	2204      	movs	r2, #4
 8000db6:	701a      	strb	r2, [r3, #0]
				}
	    break;
 8000db8:	e16c      	b.n	8001094 <gsmtask+0x504>
		case GSM_TCPIP_STATE:
				{
					if(gsm.Flags.GPRSInitialised == true)
 8000dba:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <gsmtask+0x2f0>)
 8000dbc:	785b      	ldrb	r3, [r3, #1]
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 8164 	beq.w	8001092 <gsmtask+0x502>
					{
						switch(tcp_state)
 8000dca:	4b3a      	ldr	r3, [pc, #232]	; (8000eb4 <gsmtask+0x324>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	f200 815f 	bhi.w	8001092 <gsmtask+0x502>
 8000dd4:	a201      	add	r2, pc, #4	; (adr r2, 8000ddc <gsmtask+0x24c>)
 8000dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dda:	bf00      	nop
 8000ddc:	08000df1 	.word	0x08000df1
 8000de0:	08000e31 	.word	0x08000e31
 8000de4:	08000ed1 	.word	0x08000ed1
 8000de8:	08000f11 	.word	0x08000f11
 8000dec:	08000f51 	.word	0x08000f51
						{
						case TCPIP_Application_Mode_NonTransparent:
						{
							uint8_t TCPIP_Application_Mode_state=0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	76fb      	strb	r3, [r7, #27]
							Send_AT_Command(&TCPIP_Application_Mode);
 8000df4:	4830      	ldr	r0, [pc, #192]	; (8000eb8 <gsmtask+0x328>)
 8000df6:	f7ff fcb5 	bl	8000764 <Send_AT_Command>
							Send_AT_Command(&TCPIP_Application_Mode_Status);
 8000dfa:	4830      	ldr	r0, [pc, #192]	; (8000ebc <gsmtask+0x32c>)
 8000dfc:	f7ff fcb2 	bl	8000764 <Send_AT_Command>
							TCPIP_Application_Mode_state=VerifyResponseCommand(&TCPIP_Application_Mode_Status,':');
 8000e00:	213a      	movs	r1, #58	; 0x3a
 8000e02:	482e      	ldr	r0, [pc, #184]	; (8000ebc <gsmtask+0x32c>)
 8000e04:	f7ff fe94 	bl	8000b30 <VerifyResponseCommand>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	76fb      	strb	r3, [r7, #27]
							if( TCPIP_Application_Mode_state == true)
 8000e0c:	7efb      	ldrb	r3, [r7, #27]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d108      	bne.n	8000e24 <gsmtask+0x294>
							{
								gsm.Flags.TCPIP_Nontransparent_Mode =true;
 8000e12:	4a1b      	ldr	r2, [pc, #108]	; (8000e80 <gsmtask+0x2f0>)
 8000e14:	7853      	ldrb	r3, [r2, #1]
 8000e16:	f043 0302 	orr.w	r3, r3, #2
 8000e1a:	7053      	strb	r3, [r2, #1]
								tcp_state = TCPIP_Start_Connection_Mode;
 8000e1c:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <gsmtask+0x324>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	701a      	strb	r2, [r3, #0]
							else
							{
								gsm.Flags.TCPIP_Nontransparent_Mode =false;
							}
						}
						break;
 8000e22:	e0e4      	b.n	8000fee <gsmtask+0x45e>
								gsm.Flags.TCPIP_Nontransparent_Mode =false;
 8000e24:	4a16      	ldr	r2, [pc, #88]	; (8000e80 <gsmtask+0x2f0>)
 8000e26:	7853      	ldrb	r3, [r2, #1]
 8000e28:	f36f 0341 	bfc	r3, #1, #1
 8000e2c:	7053      	strb	r3, [r2, #1]
						break;
 8000e2e:	e0de      	b.n	8000fee <gsmtask+0x45e>
						case TCPIP_Start_Connection_Mode:
						{
							uint8_t TCPIP_Connection_Mode_state=0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	773b      	strb	r3, [r7, #28]
							Send_AT_Command(&TCPIP_Connection);
 8000e34:	4822      	ldr	r0, [pc, #136]	; (8000ec0 <gsmtask+0x330>)
 8000e36:	f7ff fc95 	bl	8000764 <Send_AT_Command>
							Send_AT_Command(&TCPIP_Connection_Status);
 8000e3a:	4822      	ldr	r0, [pc, #136]	; (8000ec4 <gsmtask+0x334>)
 8000e3c:	f7ff fc92 	bl	8000764 <Send_AT_Command>
							TCPIP_Connection_Mode_state=VerifyResponseCommand(&TCPIP_Connection_Status,':');
 8000e40:	213a      	movs	r1, #58	; 0x3a
 8000e42:	4820      	ldr	r0, [pc, #128]	; (8000ec4 <gsmtask+0x334>)
 8000e44:	f7ff fe74 	bl	8000b30 <VerifyResponseCommand>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	773b      	strb	r3, [r7, #28]
							if( TCPIP_Connection_Mode_state == true)
 8000e4c:	7f3b      	ldrb	r3, [r7, #28]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d108      	bne.n	8000e64 <gsmtask+0x2d4>
							{
								gsm.Flags.TCPIP_Connection_Mode =true;
 8000e52:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <gsmtask+0x2f0>)
 8000e54:	7853      	ldrb	r3, [r2, #1]
 8000e56:	f043 0304 	orr.w	r3, r3, #4
 8000e5a:	7053      	strb	r3, [r2, #1]
								tcp_state = TCPIP_DataRetrieve_DirectPUSh_Mode;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <gsmtask+0x324>)
 8000e5e:	2202      	movs	r2, #2
 8000e60:	701a      	strb	r2, [r3, #0]
								Send_AT_Command(&TCPIP_END_Connection);
								Send_AT_Command(&TCPIP_Close_Connection);
								gsm.Flags.TCPIP_Connection_Mode =false;
							}
						}
						break;
 8000e62:	e0c4      	b.n	8000fee <gsmtask+0x45e>
								Send_AT_Command(&TCPIP_END_Connection);
 8000e64:	4818      	ldr	r0, [pc, #96]	; (8000ec8 <gsmtask+0x338>)
 8000e66:	f7ff fc7d 	bl	8000764 <Send_AT_Command>
								Send_AT_Command(&TCPIP_Close_Connection);
 8000e6a:	4818      	ldr	r0, [pc, #96]	; (8000ecc <gsmtask+0x33c>)
 8000e6c:	f7ff fc7a 	bl	8000764 <Send_AT_Command>
								gsm.Flags.TCPIP_Connection_Mode =false;
 8000e70:	4a03      	ldr	r2, [pc, #12]	; (8000e80 <gsmtask+0x2f0>)
 8000e72:	7853      	ldrb	r3, [r2, #1]
 8000e74:	f36f 0382 	bfc	r3, #2, #1
 8000e78:	7053      	strb	r3, [r2, #1]
						break;
 8000e7a:	e0b8      	b.n	8000fee <gsmtask+0x45e>
 8000e7c:	20001660 	.word	0x20001660
 8000e80:	200016b4 	.word	0x200016b4
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000384 	.word	0x20000384
 8000e8c:	20001661 	.word	0x20001661
 8000e90:	200007bc 	.word	0x200007bc
 8000e94:	20000870 	.word	0x20000870
 8000e98:	20000924 	.word	0x20000924
 8000e9c:	200009d8 	.word	0x200009d8
 8000ea0:	20000ca8 	.word	0x20000ca8
 8000ea4:	20000d5c 	.word	0x20000d5c
 8000ea8:	20000a8c 	.word	0x20000a8c
 8000eac:	20000bf4 	.word	0x20000bf4
 8000eb0:	20000b40 	.word	0x20000b40
 8000eb4:	20001662 	.word	0x20001662
 8000eb8:	20000e10 	.word	0x20000e10
 8000ebc:	20000ec4 	.word	0x20000ec4
 8000ec0:	20000f78 	.word	0x20000f78
 8000ec4:	2000102c 	.word	0x2000102c
 8000ec8:	20001464 	.word	0x20001464
 8000ecc:	200013b0 	.word	0x200013b0
						case TCPIP_DataRetrieve_DirectPUSh_Mode:
						{
							uint8_t TCPIP_DataRetrieve_Mode_state=0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	777b      	strb	r3, [r7, #29]
							Send_AT_Command(&TCPIP_DataRetrieve);
 8000ed4:	4871      	ldr	r0, [pc, #452]	; (800109c <gsmtask+0x50c>)
 8000ed6:	f7ff fc45 	bl	8000764 <Send_AT_Command>
							Send_AT_Command(&TCPIP_DataRetrieve_Status);
 8000eda:	4871      	ldr	r0, [pc, #452]	; (80010a0 <gsmtask+0x510>)
 8000edc:	f7ff fc42 	bl	8000764 <Send_AT_Command>
							TCPIP_DataRetrieve_Mode_state=VerifyResponseCommand(&TCPIP_DataRetrieve_Status,':');
 8000ee0:	213a      	movs	r1, #58	; 0x3a
 8000ee2:	486f      	ldr	r0, [pc, #444]	; (80010a0 <gsmtask+0x510>)
 8000ee4:	f7ff fe24 	bl	8000b30 <VerifyResponseCommand>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	777b      	strb	r3, [r7, #29]
							if( TCPIP_DataRetrieve_Mode_state == true)
 8000eec:	7f7b      	ldrb	r3, [r7, #29]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d108      	bne.n	8000f04 <gsmtask+0x374>
							{
								gsm.Flags.TCPIP_DataRetrieve_Mode =true;
 8000ef2:	4a6c      	ldr	r2, [pc, #432]	; (80010a4 <gsmtask+0x514>)
 8000ef4:	7853      	ldrb	r3, [r2, #1]
 8000ef6:	f043 0308 	orr.w	r3, r3, #8
 8000efa:	7053      	strb	r3, [r2, #1]
								tcp_state = TCPIP_Open_Connection_Mode;
 8000efc:	4b6a      	ldr	r3, [pc, #424]	; (80010a8 <gsmtask+0x518>)
 8000efe:	2203      	movs	r2, #3
 8000f00:	701a      	strb	r2, [r3, #0]
							else
							{
								gsm.Flags.TCPIP_DataRetrieve_Mode =false;
							}
						}
						break;
 8000f02:	e074      	b.n	8000fee <gsmtask+0x45e>
								gsm.Flags.TCPIP_DataRetrieve_Mode =false;
 8000f04:	4a67      	ldr	r2, [pc, #412]	; (80010a4 <gsmtask+0x514>)
 8000f06:	7853      	ldrb	r3, [r2, #1]
 8000f08:	f36f 03c3 	bfc	r3, #3, #1
 8000f0c:	7053      	strb	r3, [r2, #1]
						break;
 8000f0e:	e06e      	b.n	8000fee <gsmtask+0x45e>
						case TCPIP_Open_Connection_Mode:
						{
							uint8_t TCPIP_Open_Connection_Mode_state=0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	77bb      	strb	r3, [r7, #30]
							Send_AT_Command(&TCPIP_Connection_Establish);
 8000f14:	4865      	ldr	r0, [pc, #404]	; (80010ac <gsmtask+0x51c>)
 8000f16:	f7ff fc25 	bl	8000764 <Send_AT_Command>
							Send_AT_Command(&TCPIP_Connection_Establish_Status);
 8000f1a:	4865      	ldr	r0, [pc, #404]	; (80010b0 <gsmtask+0x520>)
 8000f1c:	f7ff fc22 	bl	8000764 <Send_AT_Command>
							TCPIP_Open_Connection_Mode_state=VerifyResponseCommand(&TCPIP_Connection_Establish_Status,':');
 8000f20:	213a      	movs	r1, #58	; 0x3a
 8000f22:	4863      	ldr	r0, [pc, #396]	; (80010b0 <gsmtask+0x520>)
 8000f24:	f7ff fe04 	bl	8000b30 <VerifyResponseCommand>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	77bb      	strb	r3, [r7, #30]
							if( TCPIP_Open_Connection_Mode_state == true)
 8000f2c:	7fbb      	ldrb	r3, [r7, #30]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d108      	bne.n	8000f44 <gsmtask+0x3b4>
							{
								gsm.Flags.TCPIP_Open_Connection_Mode =true;
 8000f32:	4a5c      	ldr	r2, [pc, #368]	; (80010a4 <gsmtask+0x514>)
 8000f34:	7853      	ldrb	r3, [r2, #1]
 8000f36:	f043 0310 	orr.w	r3, r3, #16
 8000f3a:	7053      	strb	r3, [r2, #1]
								tcp_state =TCPIP_Send_Data_Mode ;
 8000f3c:	4b5a      	ldr	r3, [pc, #360]	; (80010a8 <gsmtask+0x518>)
 8000f3e:	2204      	movs	r2, #4
 8000f40:	701a      	strb	r2, [r3, #0]
							else
							{
								gsm.Flags.TCPIP_Open_Connection_Mode =false;
							}
						}
						break;
 8000f42:	e054      	b.n	8000fee <gsmtask+0x45e>
								gsm.Flags.TCPIP_Open_Connection_Mode =false;
 8000f44:	4a57      	ldr	r2, [pc, #348]	; (80010a4 <gsmtask+0x514>)
 8000f46:	7853      	ldrb	r3, [r2, #1]
 8000f48:	f36f 1304 	bfc	r3, #4, #1
 8000f4c:	7053      	strb	r3, [r2, #1]
						break;
 8000f4e:	e04e      	b.n	8000fee <gsmtask+0x45e>
						case TCPIP_Send_Data_Mode:
						{
							Send_AT_Command(&TCPIP_DataSend);
 8000f50:	4858      	ldr	r0, [pc, #352]	; (80010b4 <gsmtask+0x524>)
 8000f52:	f7ff fc07 	bl	8000764 <Send_AT_Command>
							char data[] ="Hello GS group";
 8000f56:	4b58      	ldr	r3, [pc, #352]	; (80010b8 <gsmtask+0x528>)
 8000f58:	f107 0408 	add.w	r4, r7, #8
 8000f5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f5e:	c407      	stmia	r4!, {r0, r1, r2}
 8000f60:	8023      	strh	r3, [r4, #0]
 8000f62:	3402      	adds	r4, #2
 8000f64:	0c1b      	lsrs	r3, r3, #16
 8000f66:	7023      	strb	r3, [r4, #0]
							uint8_t CNTRL_Z = 0x1A;
 8000f68:	231a      	movs	r3, #26
 8000f6a:	71fb      	strb	r3, [r7, #7]
							uint8_t TCPIP_DATA_Send_Mode_state=0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	77fb      	strb	r3, [r7, #31]
							if(str_comp_dilimetr(gsm.RxData, &TCPIP_DataSend.Response[1][0],0) == true)
 8000f70:	2200      	movs	r2, #0
 8000f72:	4952      	ldr	r1, [pc, #328]	; (80010bc <gsmtask+0x52c>)
 8000f74:	4852      	ldr	r0, [pc, #328]	; (80010c0 <gsmtask+0x530>)
 8000f76:	f000 f9dd 	bl	8001334 <str_comp_dilimetr>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d135      	bne.n	8000fec <gsmtask+0x45c>
							{
								HAL_UART_Transmit(&huart2, &data, sizeof(data), 1000);
 8000f80:	f107 0108 	add.w	r1, r7, #8
 8000f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f88:	220f      	movs	r2, #15
 8000f8a:	484e      	ldr	r0, [pc, #312]	; (80010c4 <gsmtask+0x534>)
 8000f8c:	f001 fb5d 	bl	800264a <HAL_UART_Transmit>
								HAL_UART_Transmit(&huart2,&CNTRL_Z, 1, 1000);
 8000f90:	1df9      	adds	r1, r7, #7
 8000f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f96:	2201      	movs	r2, #1
 8000f98:	484a      	ldr	r0, [pc, #296]	; (80010c4 <gsmtask+0x534>)
 8000f9a:	f001 fb56 	bl	800264a <HAL_UART_Transmit>
							}
							else
							{
                                break;
							}
						    HAL_Delay(1000);    //delay 1sec
 8000f9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa2:	f000 fb9d 	bl	80016e0 <HAL_Delay>
							TCPIP_DATA_Send_Mode_state=VerifyResponseCommand(&TCPIP_DataSend,':');
 8000fa6:	213a      	movs	r1, #58	; 0x3a
 8000fa8:	4842      	ldr	r0, [pc, #264]	; (80010b4 <gsmtask+0x524>)
 8000faa:	f7ff fdc1 	bl	8000b30 <VerifyResponseCommand>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	77fb      	strb	r3, [r7, #31]
							if(TCPIP_DATA_Send_Mode_state == true)
 8000fb2:	7ffb      	ldrb	r3, [r7, #31]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d110      	bne.n	8000fda <gsmtask+0x44a>
							{
								gsm.Flags.TCPIP_Data_Send_Mode =true;
 8000fb8:	4a3a      	ldr	r2, [pc, #232]	; (80010a4 <gsmtask+0x514>)
 8000fba:	7853      	ldrb	r3, [r2, #1]
 8000fbc:	f043 0320 	orr.w	r3, r3, #32
 8000fc0:	7053      	strb	r3, [r2, #1]
								gsm_state =TCP_RECEIVE_DATA;
 8000fc2:	4b41      	ldr	r3, [pc, #260]	; (80010c8 <gsmtask+0x538>)
 8000fc4:	2205      	movs	r2, #5
 8000fc6:	701a      	strb	r2, [r3, #0]
				                tcp_state =TCPIP_Start_Connection_Mode ;
 8000fc8:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <gsmtask+0x518>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]
				                gsm.Flags.Server_Response_Flag = false;
 8000fce:	4a35      	ldr	r2, [pc, #212]	; (80010a4 <gsmtask+0x514>)
 8000fd0:	7893      	ldrb	r3, [r2, #2]
 8000fd2:	f36f 0300 	bfc	r3, #0, #1
 8000fd6:	7093      	strb	r3, [r2, #2]
							{
								gsm.Flags.TCPIP_Data_Send_Mode =false;
								tcp_state =TCPIP_Send_Data_Mode;
							}
						}
						break;
 8000fd8:	e009      	b.n	8000fee <gsmtask+0x45e>
								gsm.Flags.TCPIP_Data_Send_Mode =false;
 8000fda:	4a32      	ldr	r2, [pc, #200]	; (80010a4 <gsmtask+0x514>)
 8000fdc:	7853      	ldrb	r3, [r2, #1]
 8000fde:	f36f 1345 	bfc	r3, #5, #1
 8000fe2:	7053      	strb	r3, [r2, #1]
								tcp_state =TCPIP_Send_Data_Mode;
 8000fe4:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <gsmtask+0x518>)
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	701a      	strb	r2, [r3, #0]
						break;
 8000fea:	e000      	b.n	8000fee <gsmtask+0x45e>
                                break;
 8000fec:	bf00      	nop
						}
				}
		}
		break;
 8000fee:	e050      	b.n	8001092 <gsmtask+0x502>
		case TCP_RECEIVE_DATA:
		{
			startTimer(&Response_Timer,5000, false);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f241 3188 	movw	r1, #5000	; 0x1388
 8000ff6:	4835      	ldr	r0, [pc, #212]	; (80010cc <gsmtask+0x53c>)
 8000ff8:	f000 fa66 	bl	80014c8 <startTimer>
			while (gsm.Flags.Server_Response_Flag == false)
 8000ffc:	e007      	b.n	800100e <gsmtask+0x47e>
			{
				if(isTimerComplete(Response_Timer))
 8000ffe:	4b33      	ldr	r3, [pc, #204]	; (80010cc <gsmtask+0x53c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f000 fac6 	bl	8001594 <isTimerComplete>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d107      	bne.n	800101e <gsmtask+0x48e>
			while (gsm.Flags.Server_Response_Flag == false)
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <gsmtask+0x514>)
 8001010:	789b      	ldrb	r3, [r3, #2]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0f0      	beq.n	8000ffe <gsmtask+0x46e>
 800101c:	e000      	b.n	8001020 <gsmtask+0x490>
				{
					break;
 800101e:	bf00      	nop
				}
			}
		    stopTimer(Response_Timer);
 8001020:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <gsmtask+0x53c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f000 fa8f 	bl	8001548 <stopTimer>
			//gsm.Flags.Server_Response_Flag = true;// for testing
			if(str_comp_dilimetr(gsm.RxData,"\r\nRECV FROM:13.126.165.4:4000\r\n+IPD", 0))
 800102a:	2200      	movs	r2, #0
 800102c:	4928      	ldr	r1, [pc, #160]	; (80010d0 <gsmtask+0x540>)
 800102e:	4824      	ldr	r0, [pc, #144]	; (80010c0 <gsmtask+0x530>)
 8001030:	f000 f980 	bl	8001334 <str_comp_dilimetr>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d013      	beq.n	8001062 <gsmtask+0x4d2>
			{
				gsm.Flags.Server_Response_Flag = false;
 800103a:	4a1a      	ldr	r2, [pc, #104]	; (80010a4 <gsmtask+0x514>)
 800103c:	7893      	ldrb	r3, [r2, #2]
 800103e:	f36f 0300 	bfc	r3, #0, #1
 8001042:	7093      	strb	r3, [r2, #2]
				Send_AT_Command(&TCPIP_END_Connection);
 8001044:	4823      	ldr	r0, [pc, #140]	; (80010d4 <gsmtask+0x544>)
 8001046:	f7ff fb8d 	bl	8000764 <Send_AT_Command>
				Send_AT_Command(&TCPIP_Close_Connection);
 800104a:	4823      	ldr	r0, [pc, #140]	; (80010d8 <gsmtask+0x548>)
 800104c:	f7ff fb8a 	bl	8000764 <Send_AT_Command>
				gsm.Flags.Receive_Data_Flag = true;
 8001050:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <gsmtask+0x514>)
 8001052:	7893      	ldrb	r3, [r2, #2]
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	7093      	strb	r3, [r2, #2]
				gsm_state = GSM_SLEEP;
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <gsmtask+0x538>)
 800105c:	2206      	movs	r2, #6
 800105e:	701a      	strb	r2, [r3, #0]
				gsm_state = GSM_TCPIP_STATE;
				tcp_state =TCPIP_Send_Data_Mode;
				break;
			}
		}
		break;
 8001060:	e018      	b.n	8001094 <gsmtask+0x504>
				gsm.Flags.Receive_Data_Flag = false;
 8001062:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <gsmtask+0x514>)
 8001064:	7893      	ldrb	r3, [r2, #2]
 8001066:	f36f 0341 	bfc	r3, #1, #1
 800106a:	7093      	strb	r3, [r2, #2]
				gsm_state = GSM_TCPIP_STATE;
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <gsmtask+0x538>)
 800106e:	2204      	movs	r2, #4
 8001070:	701a      	strb	r2, [r3, #0]
				tcp_state =TCPIP_Send_Data_Mode;
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <gsmtask+0x518>)
 8001074:	2204      	movs	r2, #4
 8001076:	701a      	strb	r2, [r3, #0]
				break;
 8001078:	e00c      	b.n	8001094 <gsmtask+0x504>
		case GSM_SLEEP:
		{
			gsm_state = GSM_RESET;
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <gsmtask+0x538>)
 800107c:	2207      	movs	r2, #7
 800107e:	701a      	strb	r2, [r3, #0]
		}

		case GSM_RESET:
		{
			gsm_state = GSM_INIT_STATE;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <gsmtask+0x538>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
		}
		default:
		break;
 8001086:	bf00      	nop
 8001088:	e004      	b.n	8001094 <gsmtask+0x504>
	    break;
 800108a:	bf00      	nop
 800108c:	e002      	b.n	8001094 <gsmtask+0x504>
		break;
 800108e:	bf00      	nop
 8001090:	e000      	b.n	8001094 <gsmtask+0x504>
		break;
 8001092:	bf00      	nop
	}
}
 8001094:	bf00      	nop
 8001096:	3724      	adds	r7, #36	; 0x24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd90      	pop	{r4, r7, pc}
 800109c:	200010e0 	.word	0x200010e0
 80010a0:	20001194 	.word	0x20001194
 80010a4:	200016b4 	.word	0x200016b4
 80010a8:	20001662 	.word	0x20001662
 80010ac:	20001248 	.word	0x20001248
 80010b0:	200012fc 	.word	0x200012fc
 80010b4:	20001518 	.word	0x20001518
 80010b8:	080035b0 	.word	0x080035b0
 80010bc:	20001572 	.word	0x20001572
 80010c0:	20001f30 	.word	0x20001f30
 80010c4:	20001674 	.word	0x20001674
 80010c8:	20001660 	.word	0x20001660
 80010cc:	2000165c 	.word	0x2000165c
 80010d0:	0800358c 	.word	0x0800358c
 80010d4:	20001464 	.word	0x20001464
 80010d8:	200013b0 	.word	0x200013b0

080010dc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	gsm.Flags.Server_Response_Flag = true;
 80010e4:	4a13      	ldr	r2, [pc, #76]	; (8001134 <HAL_UART_RxCpltCallback+0x58>)
 80010e6:	7893      	ldrb	r3, [r2, #2]
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	7093      	strb	r3, [r2, #2]
	gsm.RxData[gsm.RxDataCnt]=Uart_Rx_Buffer;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_UART_RxCpltCallback+0x58>)
 80010f0:	f8b3 3478 	ldrh.w	r3, [r3, #1144]	; 0x478
 80010f4:	4619      	mov	r1, r3
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <HAL_UART_RxCpltCallback+0x5c>)
 80010f8:	781a      	ldrb	r2, [r3, #0]
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <HAL_UART_RxCpltCallback+0x58>)
 80010fc:	440b      	add	r3, r1
 80010fe:	f883 287c 	strb.w	r2, [r3, #2172]	; 0x87c
	gsm.RxDataCnt=(1+ gsm.RxDataCnt) % MAX_Buff_Size;
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HAL_UART_RxCpltCallback+0x58>)
 8001104:	f8b3 3478 	ldrh.w	r3, [r3, #1144]	; 0x478
 8001108:	3301      	adds	r3, #1
 800110a:	425a      	negs	r2, r3
 800110c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001110:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001114:	bf58      	it	pl
 8001116:	4253      	negpl	r3, r2
 8001118:	b29a      	uxth	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_UART_RxCpltCallback+0x58>)
 800111c:	f8a3 2478 	strh.w	r2, [r3, #1144]	; 0x478
	HAL_UART_Receive_IT(&huart2,&Uart_Rx_Buffer, sizeof(Uart_Rx_Buffer));
 8001120:	2201      	movs	r2, #1
 8001122:	4905      	ldr	r1, [pc, #20]	; (8001138 <HAL_UART_RxCpltCallback+0x5c>)
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <HAL_UART_RxCpltCallback+0x60>)
 8001126:	f001 fb29 	bl	800277c <HAL_UART_Receive_IT>

}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200016b4 	.word	0x200016b4
 8001138:	20001671 	.word	0x20001671
 800113c:	20001674 	.word	0x20001674

08001140 <main>:




int main(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	  PeripheralInit();
 8001144:	f7ff f9c0 	bl	80004c8 <PeripheralInit>
	  gsmtask();
 8001148:	f7ff fd22 	bl	8000b90 <gsmtask>

	  while (true)
	  {
		   gsmtask();
 800114c:	f7ff fd20 	bl	8000b90 <gsmtask>
 8001150:	e7fc      	b.n	800114c <main+0xc>
	...

08001154 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b094      	sub	sp, #80	; 0x50
 8001158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115a:	f107 0320 	add.w	r3, r7, #32
 800115e:	2230      	movs	r2, #48	; 0x30
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f002 f992 	bl	800348c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <SystemClock_Config+0xb4>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	4a21      	ldr	r2, [pc, #132]	; (8001208 <SystemClock_Config+0xb4>)
 8001182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001186:	6413      	str	r3, [r2, #64]	; 0x40
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <SystemClock_Config+0xb4>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001194:	2300      	movs	r3, #0
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <SystemClock_Config+0xb8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a1b      	ldr	r2, [pc, #108]	; (800120c <SystemClock_Config+0xb8>)
 800119e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <SystemClock_Config+0xb8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b0:	2302      	movs	r3, #2
 80011b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b4:	2301      	movs	r3, #1
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b8:	2310      	movs	r3, #16
 80011ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011bc:	2300      	movs	r3, #0
 80011be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fd91 	bl	8001cec <HAL_RCC_OscConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80011d0:	f000 f81e 	bl	8001210 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d4:	230f      	movs	r3, #15
 80011d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 ffec 	bl	80021cc <HAL_RCC_ClockConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80011fa:	f000 f809 	bl	8001210 <Error_Handler>
  }
}
 80011fe:	bf00      	nop
 8001200:	3750      	adds	r7, #80	; 0x50
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800
 800120c:	40007000 	.word	0x40007000

08001210 <Error_Handler>:

}


void Error_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a1d      	ldr	r2, [pc, #116]	; (80012b4 <HAL_UART_MspInit+0x94>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d133      	bne.n	80012aa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <HAL_UART_MspInit+0x98>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <HAL_UART_MspInit+0x98>)
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <HAL_UART_MspInit+0x98>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_UART_MspInit+0x98>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a14      	ldr	r2, [pc, #80]	; (80012b8 <HAL_UART_MspInit+0x98>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_UART_MspInit+0x98>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800127a:	230c      	movs	r3, #12
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800128a:	2307      	movs	r3, #7
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4809      	ldr	r0, [pc, #36]	; (80012bc <HAL_UART_MspInit+0x9c>)
 8001296:	f000 fb75 	bl	8001984 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	2026      	movs	r0, #38	; 0x26
 80012a0:	f000 fb0a 	bl	80018b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012a4:	2026      	movs	r0, #38	; 0x26
 80012a6:	f000 fb23 	bl	80018f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	; 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40004400 	.word	0x40004400
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020000 	.word	0x40020000

080012c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <HardFault_Handler+0x4>

080012d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <MemManage_Handler+0x4>

080012da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <BusFault_Handler+0x4>

080012e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <UsageFault_Handler+0x4>

080012e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001314:	f000 f9c4 	bl	80016a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}

0800131c <USART2_IRQHandler>:
  * @brief This function handles USART2 global interrupt.
  */


void USART2_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */


    HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 8001320:	2026      	movs	r0, #38	; 0x26
 8001322:	f000 faff 	bl	8001924 <HAL_NVIC_ClearPendingIRQ>

  HAL_UART_IRQHandler(&huart2);
 8001326:	4802      	ldr	r0, [pc, #8]	; (8001330 <USART2_IRQHandler+0x14>)
 8001328:	f001 fa7e 	bl	8002828 <HAL_UART_IRQHandler>


  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20001674 	.word	0x20001674

08001334 <str_comp_dilimetr>:
}
return 1;
}

int str_comp_dilimetr(char* Source_Ram_address,char* Destination_Ram_address,char dili)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	4613      	mov	r3, r2
 8001340:	71fb      	strb	r3, [r7, #7]
	while(*Source_Ram_address != dili)
 8001342:	e00b      	b.n	800135c <str_comp_dilimetr+0x28>
	{
		if(*Source_Ram_address++ != *Destination_Ram_address++)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	60fa      	str	r2, [r7, #12]
 800134a:	781a      	ldrb	r2, [r3, #0]
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	1c59      	adds	r1, r3, #1
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d001      	beq.n	800135c <str_comp_dilimetr+0x28>
		{
			return 0;
 8001358:	2300      	movs	r3, #0
 800135a:	e005      	b.n	8001368 <str_comp_dilimetr+0x34>
	while(*Source_Ram_address != dili)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	79fa      	ldrb	r2, [r7, #7]
 8001362:	429a      	cmp	r2, r3
 8001364:	d1ee      	bne.n	8001344 <str_comp_dilimetr+0x10>
		}
	}
	return 1;
 8001366:	2301      	movs	r3, #1

}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800137c:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <_sbrk+0x5c>)
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <_sbrk+0x60>)
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d102      	bne.n	8001396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <_sbrk+0x64>)
 8001392:	4a12      	ldr	r2, [pc, #72]	; (80013dc <_sbrk+0x68>)
 8001394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <_sbrk+0x64>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d207      	bcs.n	80013b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a4:	f002 f840 	bl	8003428 <__errno>
 80013a8:	4602      	mov	r2, r0
 80013aa:	230c      	movs	r3, #12
 80013ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	e009      	b.n	80013c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <_sbrk+0x64>)
 80013c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013c6:	68fb      	ldr	r3, [r7, #12]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20020000 	.word	0x20020000
 80013d4:	00000400 	.word	0x00000400
 80013d8:	20001664 	.word	0x20001664
 80013dc:	20002340 	.word	0x20002340

080013e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <SystemInit+0x28>)
 80013e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ea:	4a07      	ldr	r2, [pc, #28]	; (8001408 <SystemInit+0x28>)
 80013ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <SystemInit+0x28>)
 80013f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013fa:	609a      	str	r2, [r3, #8]
#endif
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <searchTimerId>:

timerList *masterTimerList;
static int delayTimer;

int searchTimerId(void)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
    int id = 1;
 8001412:	2301      	movs	r3, #1
 8001414:	607b      	str	r3, [r7, #4]
    timerList *temp = masterTimerList;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <searchTimerId+0x44>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	603b      	str	r3, [r7, #0]
    if(!temp)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d107      	bne.n	8001432 <searchTimerId+0x26>
        return id;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	e00d      	b.n	8001442 <searchTimerId+0x36>
    else{
        while(temp->nextTimer != 0){
            temp = temp->nextTimer;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	603b      	str	r3, [r7, #0]
            id++;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3301      	adds	r3, #1
 8001430:	607b      	str	r3, [r7, #4]
        while(temp->nextTimer != 0){
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f5      	bne.n	8001426 <searchTimerId+0x1a>
        }
    }
    return ++id;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3301      	adds	r3, #1
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20002330 	.word	0x20002330

08001454 <addTimer>:

bool addTimer(int *id)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
    timerList *temp = masterTimerList;
 800145c:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <addTimer+0x70>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60fb      	str	r3, [r7, #12]
    timerList *timerptr = (timerList *)malloc(sizeof(timerList));
 8001462:	2014      	movs	r0, #20
 8001464:	f002 f80a 	bl	800347c <malloc>
 8001468:	4603      	mov	r3, r0
 800146a:	60bb      	str	r3, [r7, #8]
    if(!timerptr)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <addTimer+0x22>
        return false;
 8001472:	2300      	movs	r3, #0
 8001474:	e021      	b.n	80014ba <addTimer+0x66>

    timerptr->timer.start = false;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	2200      	movs	r2, #0
 800147a:	725a      	strb	r2, [r3, #9]
    //search for timer id
    timerptr->timer.timerId = searchTimerId();
 800147c:	f7ff ffc6 	bl	800140c <searchTimerId>
 8001480:	4602      	mov	r2, r0
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	601a      	str	r2, [r3, #0]
    *id = timerptr->timer.timerId;
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	601a      	str	r2, [r3, #0]
    timerptr->nextTimer = 0;
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
    if(!masterTimerList){
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <addTimer+0x70>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d106      	bne.n	80014aa <addTimer+0x56>
        masterTimerList = timerptr;
 800149c:	4a09      	ldr	r2, [pc, #36]	; (80014c4 <addTimer+0x70>)
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e009      	b.n	80014b8 <addTimer+0x64>
    }
    else{       //add the node to the end of the list
        while(temp->nextTimer != 0)
            temp = temp->nextTimer;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	60fb      	str	r3, [r7, #12]
        while(temp->nextTimer != 0)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f8      	bne.n	80014a4 <addTimer+0x50>
        temp->nextTimer = timerptr;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	611a      	str	r2, [r3, #16]
    }
    return true;
 80014b8:	2301      	movs	r3, #1
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20002330 	.word	0x20002330

080014c8 <startTimer>:

bool startTimer(int *id, uint32_t time, bool reload)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	4613      	mov	r3, r2
 80014d4:	71fb      	strb	r3, [r7, #7]
    if(!*id){
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d107      	bne.n	80014ee <startTimer+0x26>
        if(addTimer(id)==false)
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f7ff ffb8 	bl	8001454 <addTimer>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <startTimer+0x26>
            return false;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e026      	b.n	800153c <startTimer+0x74>
    }
    timerList *temp = masterTimerList;
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <startTimer+0x7c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	617b      	str	r3, [r7, #20]
    if(temp == 0)
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10a      	bne.n	8001510 <startTimer+0x48>
        return false;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e01e      	b.n	800153c <startTimer+0x74>
    while(temp->timer.timerId != *id){
        if(!temp->nextTimer)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <startTimer+0x42>
            return false;
 8001506:	2300      	movs	r3, #0
 8001508:	e018      	b.n	800153c <startTimer+0x74>
        temp = temp->nextTimer;
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	617b      	str	r3, [r7, #20]
    while(temp->timer.timerId != *id){
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	d1f0      	bne.n	80014fe <startTimer+0x36>
    }
    temp->timer.start = true;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2201      	movs	r2, #1
 8001520:	725a      	strb	r2, [r3, #9]
    temp->timer.runningPeriod = 0;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
    temp->timer.complete = false;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	2200      	movs	r2, #0
 800152c:	729a      	strb	r2, [r3, #10]
    temp->timer.period = time;
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	605a      	str	r2, [r3, #4]
    temp->timer.reload = reload;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	79fa      	ldrb	r2, [r7, #7]
 8001538:	721a      	strb	r2, [r3, #8]
    return true;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20002330 	.word	0x20002330

08001548 <stopTimer>:

bool stopTimer(int id)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
    timerList *temp = masterTimerList;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <stopTimer+0x48>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]
    if(temp == 0)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d10a      	bne.n	8001572 <stopTimer+0x2a>
        return false;
 800155c:	2300      	movs	r3, #0
 800155e:	e011      	b.n	8001584 <stopTimer+0x3c>
    while(temp->timer.timerId != id){
        if(!temp->nextTimer)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <stopTimer+0x24>
            return false;
 8001568:	2300      	movs	r3, #0
 800156a:	e00b      	b.n	8001584 <stopTimer+0x3c>
        temp = temp->nextTimer;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	60fb      	str	r3, [r7, #12]
    while(temp->timer.timerId != id){
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	d1f1      	bne.n	8001560 <stopTimer+0x18>
    }
    temp->timer.start = false;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2200      	movs	r2, #0
 8001580:	725a      	strb	r2, [r3, #9]
    return true;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	20002330 	.word	0x20002330

08001594 <isTimerComplete>:

int isTimerComplete(int id)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
    timerList *temp = masterTimerList;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <isTimerComplete+0x54>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]
    if(temp == 0)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10a      	bne.n	80015be <isTimerComplete+0x2a>
        return 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e017      	b.n	80015dc <isTimerComplete+0x48>
    while(temp->timer.timerId != id){
        if(!temp->nextTimer)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <isTimerComplete+0x24>
            return 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	e011      	b.n	80015dc <isTimerComplete+0x48>
        temp = temp->nextTimer;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	60fb      	str	r3, [r7, #12]
    while(temp->timer.timerId != id){
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d1f1      	bne.n	80015ac <isTimerComplete+0x18>
    }
    if(temp->timer.complete == true){
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	7a9b      	ldrb	r3, [r3, #10]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d104      	bne.n	80015da <isTimerComplete+0x46>
        temp->timer.complete = false;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	729a      	strb	r2, [r3, #10]
        return 1;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <isTimerComplete+0x48>
    }
    else
        return 0;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	20002330 	.word	0x20002330

080015ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001624 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015f2:	e003      	b.n	80015fc <LoopCopyDataInit>

080015f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015fa:	3104      	adds	r1, #4

080015fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015fc:	480b      	ldr	r0, [pc, #44]	; (800162c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001600:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001602:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001604:	d3f6      	bcc.n	80015f4 <CopyDataInit>
  ldr  r2, =_sbss
 8001606:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001608:	e002      	b.n	8001610 <LoopFillZerobss>

0800160a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800160a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800160c:	f842 3b04 	str.w	r3, [r2], #4

08001610 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001612:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001614:	d3f9      	bcc.n	800160a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001616:	f7ff fee3 	bl	80013e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161a:	f001 ff0b 	bl	8003434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800161e:	f7ff fd8f 	bl	8001140 <main>
  bx  lr    
 8001622:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001624:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001628:	080035e8 	.word	0x080035e8
  ldr  r0, =_sdata
 800162c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001630:	2000163c 	.word	0x2000163c
  ldr  r2, =_sbss
 8001634:	2000163c 	.word	0x2000163c
  ldr  r3, = _ebss
 8001638:	2000233c 	.word	0x2000233c

0800163c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800163c:	e7fe      	b.n	800163c <ADC_IRQHandler>
	...

08001640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_InitTick+0x54>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_InitTick+0x58>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001656:	fbb3 f3f1 	udiv	r3, r3, r1
 800165a:	fbb2 f3f3 	udiv	r3, r2, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f954 	bl	800190c <HAL_SYSTICK_Config>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e00e      	b.n	800168c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b0f      	cmp	r3, #15
 8001672:	d80a      	bhi.n	800168a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001674:	2200      	movs	r2, #0
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f000 f91c 	bl	80018b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001680:	4a06      	ldr	r2, [pc, #24]	; (800169c <HAL_InitTick+0x5c>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e000      	b.n	800168c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200015cc 	.word	0x200015cc
 8001698:	200015d4 	.word	0x200015d4
 800169c:	200015d0 	.word	0x200015d0

080016a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_IncTick+0x20>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_IncTick+0x24>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <HAL_IncTick+0x24>)
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	200015d4 	.word	0x200015d4
 80016c4:	20002334 	.word	0x20002334

080016c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return uwTick;
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <HAL_GetTick+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20002334 	.word	0x20002334

080016e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e8:	f7ff ffee 	bl	80016c8 <HAL_GetTick>
 80016ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f8:	d005      	beq.n	8001706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_Delay+0x40>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001706:	bf00      	nop
 8001708:	f7ff ffde 	bl	80016c8 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	429a      	cmp	r2, r3
 8001716:	d8f7      	bhi.n	8001708 <HAL_Delay+0x28>
  {
  }
}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200015d4 	.word	0x200015d4

08001724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <__NVIC_GetPriorityGrouping+0x18>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	f003 0307 	and.w	r3, r3, #7
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db0b      	blt.n	800176a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	4907      	ldr	r1, [pc, #28]	; (8001778 <__NVIC_EnableIRQ+0x38>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	2001      	movs	r0, #1
 8001762:	fa00 f202 	lsl.w	r2, r0, r2
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	2b00      	cmp	r3, #0
 800178c:	db0c      	blt.n	80017a8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	f003 021f 	and.w	r2, r3, #31
 8001794:	4907      	ldr	r1, [pc, #28]	; (80017b4 <__NVIC_ClearPendingIRQ+0x38>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	095b      	lsrs	r3, r3, #5
 800179c:	2001      	movs	r0, #1
 800179e:	fa00 f202 	lsl.w	r2, r0, r2
 80017a2:	3360      	adds	r3, #96	; 0x60
 80017a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000e100 	.word	0xe000e100

080017b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	db0a      	blt.n	80017e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	490c      	ldr	r1, [pc, #48]	; (8001804 <__NVIC_SetPriority+0x4c>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	440b      	add	r3, r1
 80017dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e0:	e00a      	b.n	80017f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4908      	ldr	r1, [pc, #32]	; (8001808 <__NVIC_SetPriority+0x50>)
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	3b04      	subs	r3, #4
 80017f0:	0112      	lsls	r2, r2, #4
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	440b      	add	r3, r1
 80017f6:	761a      	strb	r2, [r3, #24]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000e100 	.word	0xe000e100
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f1c3 0307 	rsb	r3, r3, #7
 8001826:	2b04      	cmp	r3, #4
 8001828:	bf28      	it	cs
 800182a:	2304      	movcs	r3, #4
 800182c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3304      	adds	r3, #4
 8001832:	2b06      	cmp	r3, #6
 8001834:	d902      	bls.n	800183c <NVIC_EncodePriority+0x30>
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3b03      	subs	r3, #3
 800183a:	e000      	b.n	800183e <NVIC_EncodePriority+0x32>
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	f04f 32ff 	mov.w	r2, #4294967295
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43da      	mvns	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	401a      	ands	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
 800185e:	43d9      	mvns	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	4313      	orrs	r3, r2
         );
}
 8001866:	4618      	mov	r0, r3
 8001868:	3724      	adds	r7, #36	; 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001884:	d301      	bcc.n	800188a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001886:	2301      	movs	r3, #1
 8001888:	e00f      	b.n	80018aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <SysTick_Config+0x40>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001892:	210f      	movs	r1, #15
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f7ff ff8e 	bl	80017b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <SysTick_Config+0x40>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <SysTick_Config+0x40>)
 80018a4:	2207      	movs	r2, #7
 80018a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	e000e010 	.word	0xe000e010

080018b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ca:	f7ff ff2b 	bl	8001724 <__NVIC_GetPriorityGrouping>
 80018ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	68b9      	ldr	r1, [r7, #8]
 80018d4:	6978      	ldr	r0, [r7, #20]
 80018d6:	f7ff ff99 	bl	800180c <NVIC_EncodePriority>
 80018da:	4602      	mov	r2, r0
 80018dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e0:	4611      	mov	r1, r2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ff68 	bl	80017b8 <__NVIC_SetPriority>
}
 80018e8:	bf00      	nop
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff1e 	bl	8001740 <__NVIC_EnableIRQ>
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ffad 	bl	8001874 <SysTick_Config>
 800191a:	4603      	mov	r3, r0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff ff22 	bl	800177c <__NVIC_ClearPendingIRQ>
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d004      	beq.n	800195e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e00c      	b.n	8001978 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2205      	movs	r2, #5
 8001962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0201 	bic.w	r2, r2, #1
 8001974:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	; 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	e16b      	b.n	8001c78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019a0:	2201      	movs	r2, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	f040 815a 	bne.w	8001c72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d00b      	beq.n	80019de <HAL_GPIO_Init+0x5a>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d007      	beq.n	80019de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019d2:	2b11      	cmp	r3, #17
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b12      	cmp	r3, #18
 80019dc:	d130      	bne.n	8001a40 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	2203      	movs	r2, #3
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a14:	2201      	movs	r2, #1
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	f003 0201 	and.w	r2, r3, #1
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0xfc>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b12      	cmp	r3, #18
 8001a7e:	d123      	bne.n	8001ac8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	08da      	lsrs	r2, r3, #3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3208      	adds	r2, #8
 8001a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	220f      	movs	r2, #15
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	08da      	lsrs	r2, r3, #3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3208      	adds	r2, #8
 8001ac2:	69b9      	ldr	r1, [r7, #24]
 8001ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0203 	and.w	r2, r3, #3
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 80b4 	beq.w	8001c72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b5f      	ldr	r3, [pc, #380]	; (8001c8c <HAL_GPIO_Init+0x308>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4a5e      	ldr	r2, [pc, #376]	; (8001c8c <HAL_GPIO_Init+0x308>)
 8001b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b18:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1a:	4b5c      	ldr	r3, [pc, #368]	; (8001c8c <HAL_GPIO_Init+0x308>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b26:	4a5a      	ldr	r2, [pc, #360]	; (8001c90 <HAL_GPIO_Init+0x30c>)
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a51      	ldr	r2, [pc, #324]	; (8001c94 <HAL_GPIO_Init+0x310>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d02b      	beq.n	8001baa <HAL_GPIO_Init+0x226>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a50      	ldr	r2, [pc, #320]	; (8001c98 <HAL_GPIO_Init+0x314>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d025      	beq.n	8001ba6 <HAL_GPIO_Init+0x222>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a4f      	ldr	r2, [pc, #316]	; (8001c9c <HAL_GPIO_Init+0x318>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d01f      	beq.n	8001ba2 <HAL_GPIO_Init+0x21e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a4e      	ldr	r2, [pc, #312]	; (8001ca0 <HAL_GPIO_Init+0x31c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d019      	beq.n	8001b9e <HAL_GPIO_Init+0x21a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a4d      	ldr	r2, [pc, #308]	; (8001ca4 <HAL_GPIO_Init+0x320>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d013      	beq.n	8001b9a <HAL_GPIO_Init+0x216>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4c      	ldr	r2, [pc, #304]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d00d      	beq.n	8001b96 <HAL_GPIO_Init+0x212>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4b      	ldr	r2, [pc, #300]	; (8001cac <HAL_GPIO_Init+0x328>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d007      	beq.n	8001b92 <HAL_GPIO_Init+0x20e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4a      	ldr	r2, [pc, #296]	; (8001cb0 <HAL_GPIO_Init+0x32c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d101      	bne.n	8001b8e <HAL_GPIO_Init+0x20a>
 8001b8a:	2307      	movs	r3, #7
 8001b8c:	e00e      	b.n	8001bac <HAL_GPIO_Init+0x228>
 8001b8e:	2308      	movs	r3, #8
 8001b90:	e00c      	b.n	8001bac <HAL_GPIO_Init+0x228>
 8001b92:	2306      	movs	r3, #6
 8001b94:	e00a      	b.n	8001bac <HAL_GPIO_Init+0x228>
 8001b96:	2305      	movs	r3, #5
 8001b98:	e008      	b.n	8001bac <HAL_GPIO_Init+0x228>
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	e006      	b.n	8001bac <HAL_GPIO_Init+0x228>
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e004      	b.n	8001bac <HAL_GPIO_Init+0x228>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e002      	b.n	8001bac <HAL_GPIO_Init+0x228>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_GPIO_Init+0x228>
 8001baa:	2300      	movs	r3, #0
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	f002 0203 	and.w	r2, r2, #3
 8001bb2:	0092      	lsls	r2, r2, #2
 8001bb4:	4093      	lsls	r3, r2
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bbc:	4934      	ldr	r1, [pc, #208]	; (8001c90 <HAL_GPIO_Init+0x30c>)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	089b      	lsrs	r3, r3, #2
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bca:	4b3a      	ldr	r3, [pc, #232]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bee:	4a31      	ldr	r2, [pc, #196]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bf4:	4b2f      	ldr	r3, [pc, #188]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c18:	4a26      	ldr	r2, [pc, #152]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c1e:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c42:	4a1c      	ldr	r2, [pc, #112]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c48:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c6c:	4a11      	ldr	r2, [pc, #68]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3301      	adds	r3, #1
 8001c76:	61fb      	str	r3, [r7, #28]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	2b0f      	cmp	r3, #15
 8001c7c:	f67f ae90 	bls.w	80019a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c80:	bf00      	nop
 8001c82:	3724      	adds	r7, #36	; 0x24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40013800 	.word	0x40013800
 8001c94:	40020000 	.word	0x40020000
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	40020800 	.word	0x40020800
 8001ca0:	40020c00 	.word	0x40020c00
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40021400 	.word	0x40021400
 8001cac:	40021800 	.word	0x40021800
 8001cb0:	40021c00 	.word	0x40021c00
 8001cb4:	40013c00 	.word	0x40013c00

08001cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc8:	787b      	ldrb	r3, [r7, #1]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cce:	887a      	ldrh	r2, [r7, #2]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cd4:	e003      	b.n	8001cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cd6:	887b      	ldrh	r3, [r7, #2]
 8001cd8:	041a      	lsls	r2, r3, #16
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	619a      	str	r2, [r3, #24]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e25b      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d075      	beq.n	8001df6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d0a:	4ba3      	ldr	r3, [pc, #652]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d00c      	beq.n	8001d30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d16:	4ba0      	ldr	r3, [pc, #640]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d112      	bne.n	8001d48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d22:	4b9d      	ldr	r3, [pc, #628]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d2e:	d10b      	bne.n	8001d48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	4b99      	ldr	r3, [pc, #612]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d05b      	beq.n	8001df4 <HAL_RCC_OscConfig+0x108>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d157      	bne.n	8001df4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e236      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d50:	d106      	bne.n	8001d60 <HAL_RCC_OscConfig+0x74>
 8001d52:	4b91      	ldr	r3, [pc, #580]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a90      	ldr	r2, [pc, #576]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e01d      	b.n	8001d9c <HAL_RCC_OscConfig+0xb0>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x98>
 8001d6a:	4b8b      	ldr	r3, [pc, #556]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a8a      	ldr	r2, [pc, #552]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	4b88      	ldr	r3, [pc, #544]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a87      	ldr	r2, [pc, #540]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e00b      	b.n	8001d9c <HAL_RCC_OscConfig+0xb0>
 8001d84:	4b84      	ldr	r3, [pc, #528]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a83      	ldr	r2, [pc, #524]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b81      	ldr	r3, [pc, #516]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a80      	ldr	r2, [pc, #512]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d013      	beq.n	8001dcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff fc90 	bl	80016c8 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dac:	f7ff fc8c 	bl	80016c8 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	; 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e1fb      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	4b76      	ldr	r3, [pc, #472]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0xc0>
 8001dca:	e014      	b.n	8001df6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fc7c 	bl	80016c8 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7ff fc78 	bl	80016c8 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	; 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e1e7      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de6:	4b6c      	ldr	r3, [pc, #432]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0xe8>
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d063      	beq.n	8001eca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e02:	4b65      	ldr	r3, [pc, #404]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00b      	beq.n	8001e26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e0e:	4b62      	ldr	r3, [pc, #392]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d11c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e1a:	4b5f      	ldr	r3, [pc, #380]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d116      	bne.n	8001e54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e26:	4b5c      	ldr	r3, [pc, #368]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <HAL_RCC_OscConfig+0x152>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d001      	beq.n	8001e3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e1bb      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3e:	4b56      	ldr	r3, [pc, #344]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4952      	ldr	r1, [pc, #328]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e52:	e03a      	b.n	8001eca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d020      	beq.n	8001e9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e5c:	4b4f      	ldr	r3, [pc, #316]	; (8001f9c <HAL_RCC_OscConfig+0x2b0>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e62:	f7ff fc31 	bl	80016c8 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7ff fc2d 	bl	80016c8 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e19c      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7c:	4b46      	ldr	r3, [pc, #280]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e88:	4b43      	ldr	r3, [pc, #268]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4940      	ldr	r1, [pc, #256]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]
 8001e9c:	e015      	b.n	8001eca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9e:	4b3f      	ldr	r3, [pc, #252]	; (8001f9c <HAL_RCC_OscConfig+0x2b0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7ff fc10 	bl	80016c8 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eac:	f7ff fc0c 	bl	80016c8 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e17b      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ebe:	4b36      	ldr	r3, [pc, #216]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d030      	beq.n	8001f38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d016      	beq.n	8001f0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ede:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <HAL_RCC_OscConfig+0x2b4>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7ff fbf0 	bl	80016c8 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eec:	f7ff fbec 	bl	80016c8 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e15b      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efe:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x200>
 8001f0a:	e015      	b.n	8001f38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f0c:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <HAL_RCC_OscConfig+0x2b4>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f12:	f7ff fbd9 	bl	80016c8 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f1a:	f7ff fbd5 	bl	80016c8 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e144      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f0      	bne.n	8001f1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80a0 	beq.w	8002086 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f46:	2300      	movs	r3, #0
 8001f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f4a:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10f      	bne.n	8001f76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f64:	6413      	str	r3, [r2, #64]	; 0x40
 8001f66:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f72:	2301      	movs	r3, #1
 8001f74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f76:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCC_OscConfig+0x2b8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d121      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f82:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <HAL_RCC_OscConfig+0x2b8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <HAL_RCC_OscConfig+0x2b8>)
 8001f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f8e:	f7ff fb9b 	bl	80016c8 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f94:	e011      	b.n	8001fba <HAL_RCC_OscConfig+0x2ce>
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	42470000 	.word	0x42470000
 8001fa0:	42470e80 	.word	0x42470e80
 8001fa4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa8:	f7ff fb8e 	bl	80016c8 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e0fd      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fba:	4b81      	ldr	r3, [pc, #516]	; (80021c0 <HAL_RCC_OscConfig+0x4d4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d106      	bne.n	8001fdc <HAL_RCC_OscConfig+0x2f0>
 8001fce:	4b7d      	ldr	r3, [pc, #500]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd2:	4a7c      	ldr	r2, [pc, #496]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fda:	e01c      	b.n	8002016 <HAL_RCC_OscConfig+0x32a>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	d10c      	bne.n	8001ffe <HAL_RCC_OscConfig+0x312>
 8001fe4:	4b77      	ldr	r3, [pc, #476]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe8:	4a76      	ldr	r2, [pc, #472]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 8001fea:	f043 0304 	orr.w	r3, r3, #4
 8001fee:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff0:	4b74      	ldr	r3, [pc, #464]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff4:	4a73      	ldr	r2, [pc, #460]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffc:	e00b      	b.n	8002016 <HAL_RCC_OscConfig+0x32a>
 8001ffe:	4b71      	ldr	r3, [pc, #452]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002002:	4a70      	ldr	r2, [pc, #448]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	6713      	str	r3, [r2, #112]	; 0x70
 800200a:	4b6e      	ldr	r3, [pc, #440]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 800200c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200e:	4a6d      	ldr	r2, [pc, #436]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 8002010:	f023 0304 	bic.w	r3, r3, #4
 8002014:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d015      	beq.n	800204a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201e:	f7ff fb53 	bl	80016c8 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002024:	e00a      	b.n	800203c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7ff fb4f 	bl	80016c8 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4293      	cmp	r3, r2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e0bc      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203c:	4b61      	ldr	r3, [pc, #388]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 800203e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0ee      	beq.n	8002026 <HAL_RCC_OscConfig+0x33a>
 8002048:	e014      	b.n	8002074 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204a:	f7ff fb3d 	bl	80016c8 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002050:	e00a      	b.n	8002068 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7ff fb39 	bl	80016c8 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002060:	4293      	cmp	r3, r2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e0a6      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002068:	4b56      	ldr	r3, [pc, #344]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 800206a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1ee      	bne.n	8002052 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d105      	bne.n	8002086 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800207a:	4b52      	ldr	r3, [pc, #328]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a51      	ldr	r2, [pc, #324]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 8002080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8092 	beq.w	80021b4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002090:	4b4c      	ldr	r3, [pc, #304]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b08      	cmp	r3, #8
 800209a:	d05c      	beq.n	8002156 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d141      	bne.n	8002128 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a4:	4b48      	ldr	r3, [pc, #288]	; (80021c8 <HAL_RCC_OscConfig+0x4dc>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7ff fb0d 	bl	80016c8 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b2:	f7ff fb09 	bl	80016c8 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e078      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c4:	4b3f      	ldr	r3, [pc, #252]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f0      	bne.n	80020b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69da      	ldr	r2, [r3, #28]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	019b      	lsls	r3, r3, #6
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e6:	085b      	lsrs	r3, r3, #1
 80020e8:	3b01      	subs	r3, #1
 80020ea:	041b      	lsls	r3, r3, #16
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f2:	061b      	lsls	r3, r3, #24
 80020f4:	4933      	ldr	r1, [pc, #204]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020fa:	4b33      	ldr	r3, [pc, #204]	; (80021c8 <HAL_RCC_OscConfig+0x4dc>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7ff fae2 	bl	80016c8 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002108:	f7ff fade 	bl	80016c8 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e04d      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211a:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x41c>
 8002126:	e045      	b.n	80021b4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002128:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <HAL_RCC_OscConfig+0x4dc>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7ff facb 	bl	80016c8 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002136:	f7ff fac7 	bl	80016c8 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e036      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002148:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f0      	bne.n	8002136 <HAL_RCC_OscConfig+0x44a>
 8002154:	e02e      	b.n	80021b4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e029      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002162:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	429a      	cmp	r2, r3
 8002174:	d11c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002180:	429a      	cmp	r2, r3
 8002182:	d115      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800218a:	4013      	ands	r3, r2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002190:	4293      	cmp	r3, r2
 8002192:	d10d      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800219e:	429a      	cmp	r2, r3
 80021a0:	d106      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40007000 	.word	0x40007000
 80021c4:	40023800 	.word	0x40023800
 80021c8:	42470060 	.word	0x42470060

080021cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0cc      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021e0:	4b68      	ldr	r3, [pc, #416]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d90c      	bls.n	8002208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b65      	ldr	r3, [pc, #404]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b63      	ldr	r3, [pc, #396]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0b8      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d020      	beq.n	8002256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002220:	4b59      	ldr	r3, [pc, #356]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	4a58      	ldr	r2, [pc, #352]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800222a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002238:	4b53      	ldr	r3, [pc, #332]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	4a52      	ldr	r2, [pc, #328]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002244:	4b50      	ldr	r3, [pc, #320]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	494d      	ldr	r1, [pc, #308]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	4313      	orrs	r3, r2
 8002254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d044      	beq.n	80022ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d107      	bne.n	800227a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226a:	4b47      	ldr	r3, [pc, #284]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d119      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e07f      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d003      	beq.n	800228a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002286:	2b03      	cmp	r3, #3
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228a:	4b3f      	ldr	r3, [pc, #252]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e06f      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229a:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e067      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022aa:	4b37      	ldr	r3, [pc, #220]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f023 0203 	bic.w	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4934      	ldr	r1, [pc, #208]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022bc:	f7ff fa04 	bl	80016c8 <HAL_GetTick>
 80022c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	e00a      	b.n	80022da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c4:	f7ff fa00 	bl	80016c8 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e04f      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	4b2b      	ldr	r3, [pc, #172]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 020c 	and.w	r2, r3, #12
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d1eb      	bne.n	80022c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ec:	4b25      	ldr	r3, [pc, #148]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d20c      	bcs.n	8002314 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b22      	ldr	r3, [pc, #136]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b20      	ldr	r3, [pc, #128]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e032      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d008      	beq.n	8002332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002320:	4b19      	ldr	r3, [pc, #100]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4916      	ldr	r1, [pc, #88]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d009      	beq.n	8002352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800233e:	4b12      	ldr	r3, [pc, #72]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	490e      	ldr	r1, [pc, #56]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002352:	f000 f821 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8002356:	4601      	mov	r1, r0
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	4a0a      	ldr	r2, [pc, #40]	; (800238c <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	5cd3      	ldrb	r3, [r2, r3]
 8002366:	fa21 f303 	lsr.w	r3, r1, r3
 800236a:	4a09      	ldr	r2, [pc, #36]	; (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <HAL_RCC_ClockConfig+0x1c8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff f964 	bl	8001640 <HAL_InitTick>

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023c00 	.word	0x40023c00
 8002388:	40023800 	.word	0x40023800
 800238c:	080035c0 	.word	0x080035c0
 8002390:	200015cc 	.word	0x200015cc
 8002394:	200015d0 	.word	0x200015d0

08002398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	2300      	movs	r3, #0
 80023a8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023ae:	4b63      	ldr	r3, [pc, #396]	; (800253c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d007      	beq.n	80023ca <HAL_RCC_GetSysClockFreq+0x32>
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d008      	beq.n	80023d0 <HAL_RCC_GetSysClockFreq+0x38>
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f040 80b4 	bne.w	800252c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023c4:	4b5e      	ldr	r3, [pc, #376]	; (8002540 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80023c6:	60bb      	str	r3, [r7, #8]
       break;
 80023c8:	e0b3      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ca:	4b5e      	ldr	r3, [pc, #376]	; (8002544 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80023cc:	60bb      	str	r3, [r7, #8]
      break;
 80023ce:	e0b0      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023d0:	4b5a      	ldr	r3, [pc, #360]	; (800253c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023da:	4b58      	ldr	r3, [pc, #352]	; (800253c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d04a      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e6:	4b55      	ldr	r3, [pc, #340]	; (800253c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	099b      	lsrs	r3, r3, #6
 80023ec:	f04f 0400 	mov.w	r4, #0
 80023f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	ea03 0501 	and.w	r5, r3, r1
 80023fc:	ea04 0602 	and.w	r6, r4, r2
 8002400:	4629      	mov	r1, r5
 8002402:	4632      	mov	r2, r6
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	f04f 0400 	mov.w	r4, #0
 800240c:	0154      	lsls	r4, r2, #5
 800240e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002412:	014b      	lsls	r3, r1, #5
 8002414:	4619      	mov	r1, r3
 8002416:	4622      	mov	r2, r4
 8002418:	1b49      	subs	r1, r1, r5
 800241a:	eb62 0206 	sbc.w	r2, r2, r6
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	f04f 0400 	mov.w	r4, #0
 8002426:	0194      	lsls	r4, r2, #6
 8002428:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800242c:	018b      	lsls	r3, r1, #6
 800242e:	1a5b      	subs	r3, r3, r1
 8002430:	eb64 0402 	sbc.w	r4, r4, r2
 8002434:	f04f 0100 	mov.w	r1, #0
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	00e2      	lsls	r2, r4, #3
 800243e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002442:	00d9      	lsls	r1, r3, #3
 8002444:	460b      	mov	r3, r1
 8002446:	4614      	mov	r4, r2
 8002448:	195b      	adds	r3, r3, r5
 800244a:	eb44 0406 	adc.w	r4, r4, r6
 800244e:	f04f 0100 	mov.w	r1, #0
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	0262      	lsls	r2, r4, #9
 8002458:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800245c:	0259      	lsls	r1, r3, #9
 800245e:	460b      	mov	r3, r1
 8002460:	4614      	mov	r4, r2
 8002462:	4618      	mov	r0, r3
 8002464:	4621      	mov	r1, r4
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f04f 0400 	mov.w	r4, #0
 800246c:	461a      	mov	r2, r3
 800246e:	4623      	mov	r3, r4
 8002470:	f7fd feaa 	bl	80001c8 <__aeabi_uldivmod>
 8002474:	4603      	mov	r3, r0
 8002476:	460c      	mov	r4, r1
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	e049      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247c:	4b2f      	ldr	r3, [pc, #188]	; (800253c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	099b      	lsrs	r3, r3, #6
 8002482:	f04f 0400 	mov.w	r4, #0
 8002486:	f240 11ff 	movw	r1, #511	; 0x1ff
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	ea03 0501 	and.w	r5, r3, r1
 8002492:	ea04 0602 	and.w	r6, r4, r2
 8002496:	4629      	mov	r1, r5
 8002498:	4632      	mov	r2, r6
 800249a:	f04f 0300 	mov.w	r3, #0
 800249e:	f04f 0400 	mov.w	r4, #0
 80024a2:	0154      	lsls	r4, r2, #5
 80024a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024a8:	014b      	lsls	r3, r1, #5
 80024aa:	4619      	mov	r1, r3
 80024ac:	4622      	mov	r2, r4
 80024ae:	1b49      	subs	r1, r1, r5
 80024b0:	eb62 0206 	sbc.w	r2, r2, r6
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	f04f 0400 	mov.w	r4, #0
 80024bc:	0194      	lsls	r4, r2, #6
 80024be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80024c2:	018b      	lsls	r3, r1, #6
 80024c4:	1a5b      	subs	r3, r3, r1
 80024c6:	eb64 0402 	sbc.w	r4, r4, r2
 80024ca:	f04f 0100 	mov.w	r1, #0
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	00e2      	lsls	r2, r4, #3
 80024d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024d8:	00d9      	lsls	r1, r3, #3
 80024da:	460b      	mov	r3, r1
 80024dc:	4614      	mov	r4, r2
 80024de:	195b      	adds	r3, r3, r5
 80024e0:	eb44 0406 	adc.w	r4, r4, r6
 80024e4:	f04f 0100 	mov.w	r1, #0
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	02a2      	lsls	r2, r4, #10
 80024ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80024f2:	0299      	lsls	r1, r3, #10
 80024f4:	460b      	mov	r3, r1
 80024f6:	4614      	mov	r4, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	4621      	mov	r1, r4
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f04f 0400 	mov.w	r4, #0
 8002502:	461a      	mov	r2, r3
 8002504:	4623      	mov	r3, r4
 8002506:	f7fd fe5f 	bl	80001c8 <__aeabi_uldivmod>
 800250a:	4603      	mov	r3, r0
 800250c:	460c      	mov	r4, r1
 800250e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002510:	4b0a      	ldr	r3, [pc, #40]	; (800253c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	0c1b      	lsrs	r3, r3, #16
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	3301      	adds	r3, #1
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	fbb2 f3f3 	udiv	r3, r2, r3
 8002528:	60bb      	str	r3, [r7, #8]
      break;
 800252a:	e002      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800252e:	60bb      	str	r3, [r7, #8]
      break;
 8002530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002532:	68bb      	ldr	r3, [r7, #8]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800253c:	40023800 	.word	0x40023800
 8002540:	00f42400 	.word	0x00f42400
 8002544:	007a1200 	.word	0x007a1200

08002548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800254c:	4b03      	ldr	r3, [pc, #12]	; (800255c <HAL_RCC_GetHCLKFreq+0x14>)
 800254e:	681b      	ldr	r3, [r3, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	200015cc 	.word	0x200015cc

08002560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002564:	f7ff fff0 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 8002568:	4601      	mov	r1, r0
 800256a:	4b05      	ldr	r3, [pc, #20]	; (8002580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	0a9b      	lsrs	r3, r3, #10
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	4a03      	ldr	r2, [pc, #12]	; (8002584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002576:	5cd3      	ldrb	r3, [r2, r3]
 8002578:	fa21 f303 	lsr.w	r3, r1, r3
}
 800257c:	4618      	mov	r0, r3
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40023800 	.word	0x40023800
 8002584:	080035d0 	.word	0x080035d0

08002588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800258c:	f7ff ffdc 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 8002590:	4601      	mov	r1, r0
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	0b5b      	lsrs	r3, r3, #13
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	4a03      	ldr	r2, [pc, #12]	; (80025ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800259e:	5cd3      	ldrb	r3, [r2, r3]
 80025a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40023800 	.word	0x40023800
 80025ac:	080035d0 	.word	0x080035d0

080025b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e03f      	b.n	8002642 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d106      	bne.n	80025dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7fe fe22 	bl	8001220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2224      	movs	r2, #36	; 0x24
 80025e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 fb9b 	bl	8002d30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002608:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002618:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002628:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b088      	sub	sp, #32
 800264e:	af02      	add	r7, sp, #8
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	603b      	str	r3, [r7, #0]
 8002656:	4613      	mov	r3, r2
 8002658:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b20      	cmp	r3, #32
 8002668:	f040 8083 	bne.w	8002772 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <HAL_UART_Transmit+0x2e>
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e07b      	b.n	8002774 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_UART_Transmit+0x40>
 8002686:	2302      	movs	r3, #2
 8002688:	e074      	b.n	8002774 <HAL_UART_Transmit+0x12a>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2221      	movs	r2, #33	; 0x21
 800269c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80026a0:	f7ff f812 	bl	80016c8 <HAL_GetTick>
 80026a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	88fa      	ldrh	r2, [r7, #6]
 80026aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	88fa      	ldrh	r2, [r7, #6]
 80026b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80026ba:	e042      	b.n	8002742 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d2:	d122      	bne.n	800271a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	2200      	movs	r2, #0
 80026dc:	2180      	movs	r1, #128	; 0x80
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f9b6 	bl	8002a50 <UART_WaitOnFlagUntilTimeout>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e042      	b.n	8002774 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002700:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d103      	bne.n	8002712 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	3302      	adds	r3, #2
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	e017      	b.n	8002742 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	3301      	adds	r3, #1
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	e013      	b.n	8002742 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2200      	movs	r2, #0
 8002722:	2180      	movs	r1, #128	; 0x80
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f993 	bl	8002a50 <UART_WaitOnFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e01f      	b.n	8002774 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	60ba      	str	r2, [r7, #8]
 800273a:	781a      	ldrb	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002746:	b29b      	uxth	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1b7      	bne.n	80026bc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2200      	movs	r2, #0
 8002754:	2140      	movs	r1, #64	; 0x40
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f97a 	bl	8002a50 <UART_WaitOnFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e006      	b.n	8002774 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	e000      	b.n	8002774 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002772:	2302      	movs	r3, #2
  }
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	4613      	mov	r3, r2
 8002788:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b20      	cmp	r3, #32
 8002794:	d140      	bne.n	8002818 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <HAL_UART_Receive_IT+0x26>
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e039      	b.n	800281a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_UART_Receive_IT+0x38>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e032      	b.n	800281a <HAL_UART_Receive_IT+0x9e>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38


    huart->pRxBuffPtr = pData;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	88fa      	ldrh	r2, [r7, #6]
 80027c6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	88fa      	ldrh	r2, [r7, #6]
 80027cc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2222      	movs	r2, #34	; 0x22
 80027d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027f2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0220 	orr.w	r2, r2, #32
 8002812:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	e000      	b.n	800281a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002818:	2302      	movs	r3, #2
  }
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002848:	2300      	movs	r3, #0
 800284a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10d      	bne.n	800287a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f003 0320 	and.w	r3, r3, #32
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_UART_IRQHandler+0x52>
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	f003 0320 	and.w	r3, r3, #32
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f9d6 	bl	8002c24 <UART_Receive_IT>
      return;
 8002878:	e0d1      	b.n	8002a1e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 80b0 	beq.w	80029e2 <HAL_UART_IRQHandler+0x1ba>
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d105      	bne.n	8002898 <HAL_UART_IRQHandler+0x70>
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 80a5 	beq.w	80029e2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HAL_UART_IRQHandler+0x90>
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b0:	f043 0201 	orr.w	r2, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_UART_IRQHandler+0xb0>
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d0:	f043 0202 	orr.w	r2, r3, #2
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <HAL_UART_IRQHandler+0xd0>
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	f043 0204 	orr.w	r2, r3, #4
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00f      	beq.n	8002922 <HAL_UART_IRQHandler+0xfa>
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b00      	cmp	r3, #0
 800290a:	d104      	bne.n	8002916 <HAL_UART_IRQHandler+0xee>
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291a:	f043 0208 	orr.w	r2, r3, #8
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	2b00      	cmp	r3, #0
 8002928:	d078      	beq.n	8002a1c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f003 0320 	and.w	r3, r3, #32
 8002930:	2b00      	cmp	r3, #0
 8002932:	d007      	beq.n	8002944 <HAL_UART_IRQHandler+0x11c>
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f970 	bl	8002c24 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	2b40      	cmp	r3, #64	; 0x40
 8002950:	bf0c      	ite	eq
 8002952:	2301      	moveq	r3, #1
 8002954:	2300      	movne	r3, #0
 8002956:	b2db      	uxtb	r3, r3
 8002958:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d102      	bne.n	800296c <HAL_UART_IRQHandler+0x144>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d031      	beq.n	80029d0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f8b9 	bl	8002ae4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297c:	2b40      	cmp	r3, #64	; 0x40
 800297e:	d123      	bne.n	80029c8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800298e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002994:	2b00      	cmp	r3, #0
 8002996:	d013      	beq.n	80029c0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299c:	4a21      	ldr	r2, [pc, #132]	; (8002a24 <HAL_UART_IRQHandler+0x1fc>)
 800299e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fe ffcb 	bl	8001940 <HAL_DMA_Abort_IT>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d016      	beq.n	80029de <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029ba:	4610      	mov	r0, r2
 80029bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029be:	e00e      	b.n	80029de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f83b 	bl	8002a3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c6:	e00a      	b.n	80029de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f837 	bl	8002a3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ce:	e006      	b.n	80029de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f833 	bl	8002a3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80029dc:	e01e      	b.n	8002a1c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029de:	bf00      	nop
    return;
 80029e0:	e01c      	b.n	8002a1c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_UART_IRQHandler+0x1d6>
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f8a6 	bl	8002b48 <UART_Transmit_IT>
    return;
 80029fc:	e00f      	b.n	8002a1e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <HAL_UART_IRQHandler+0x1f6>
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f8ee 	bl	8002bf4 <UART_EndTransmit_IT>
    return;
 8002a18:	bf00      	nop
 8002a1a:	e000      	b.n	8002a1e <HAL_UART_IRQHandler+0x1f6>
    return;
 8002a1c:	bf00      	nop
  }
}
 8002a1e:	3720      	adds	r7, #32
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	08002b21 	.word	0x08002b21

08002a28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a60:	e02c      	b.n	8002abc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d028      	beq.n	8002abc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d007      	beq.n	8002a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a70:	f7fe fe2a 	bl	80016c8 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d21d      	bcs.n	8002abc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a8e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e00f      	b.n	8002adc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	bf0c      	ite	eq
 8002acc:	2301      	moveq	r3, #1
 8002ace:	2300      	movne	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d0c3      	beq.n	8002a62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002afa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0201 	bic.w	r2, r2, #1
 8002b0a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f7ff ff7e 	bl	8002a3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b21      	cmp	r3, #33	; 0x21
 8002b5a:	d144      	bne.n	8002be6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b64:	d11a      	bne.n	8002b9c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b7a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d105      	bne.n	8002b90 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	1c9a      	adds	r2, r3, #2
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	621a      	str	r2, [r3, #32]
 8002b8e:	e00e      	b.n	8002bae <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	621a      	str	r2, [r3, #32]
 8002b9a:	e008      	b.n	8002bae <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	1c59      	adds	r1, r3, #1
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6211      	str	r1, [r2, #32]
 8002ba6:	781a      	ldrb	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10f      	bne.n	8002be2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bd0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002be0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e000      	b.n	8002be8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002be6:	2302      	movs	r3, #2
  }
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c0a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff ff07 	bl	8002a28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
	//_//_HAL_UART_FLUSH_DRREGISTER(&huart2);

  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b22      	cmp	r3, #34	; 0x22
 8002c36:	d175      	bne.n	8002d24 <UART_Receive_IT+0x100>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c40:	d123      	bne.n	8002c8a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10e      	bne.n	8002c6e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	1c9a      	adds	r2, r3, #2
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	629a      	str	r2, [r3, #40]	; 0x28
 8002c6c:	e026      	b.n	8002cbc <UART_Receive_IT+0x98>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	629a      	str	r2, [r3, #40]	; 0x28
 8002c88:	e018      	b.n	8002cbc <UART_Receive_IT+0x98>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d107      	bne.n	8002ca2 <UART_Receive_IT+0x7e>
      {

       *huart->pRxBuffPtr = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	701a      	strb	r2, [r3, #0]
 8002ca0:	e00c      	b.n	8002cbc <UART_Receive_IT+0x98>
//        	Rx_Count++;

   }
      else
      {
       *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cae:	1c58      	adds	r0, r3, #1
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	6288      	str	r0, [r1, #40]	; 0x28
 8002cb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	701a      	strb	r2, [r3, #0]
      }
    }
    huart->pRxBuffPtr++;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferCount--;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	85da      	strh	r2, [r3, #46]	; 0x2e
    if ( huart->RxXferCount == 0U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d120      	bne.n	8002d20 <UART_Receive_IT+0xfc>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0220 	bic.w	r2, r2, #32
 8002cec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cfc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695a      	ldr	r2, [r3, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0201 	bic.w	r2, r2, #1
 8002d0c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fe f9e0 	bl	80010dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e002      	b.n	8002d26 <UART_Receive_IT+0x102>
    }
    return HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e000      	b.n	8002d26 <UART_Receive_IT+0x102>
  }
  else
  {
    return HAL_BUSY;
 8002d24:	2302      	movs	r3, #2
  }
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d34:	b085      	sub	sp, #20
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002d72:	f023 030c 	bic.w	r3, r3, #12
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	68f9      	ldr	r1, [r7, #12]
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699a      	ldr	r2, [r3, #24]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d9e:	f040 818b 	bne.w	80030b8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4ac1      	ldr	r2, [pc, #772]	; (80030ac <UART_SetConfig+0x37c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d005      	beq.n	8002db8 <UART_SetConfig+0x88>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4abf      	ldr	r2, [pc, #764]	; (80030b0 <UART_SetConfig+0x380>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	f040 80bd 	bne.w	8002f32 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002db8:	f7ff fbe6 	bl	8002588 <HAL_RCC_GetPCLK2Freq>
 8002dbc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	461d      	mov	r5, r3
 8002dc2:	f04f 0600 	mov.w	r6, #0
 8002dc6:	46a8      	mov	r8, r5
 8002dc8:	46b1      	mov	r9, r6
 8002dca:	eb18 0308 	adds.w	r3, r8, r8
 8002dce:	eb49 0409 	adc.w	r4, r9, r9
 8002dd2:	4698      	mov	r8, r3
 8002dd4:	46a1      	mov	r9, r4
 8002dd6:	eb18 0805 	adds.w	r8, r8, r5
 8002dda:	eb49 0906 	adc.w	r9, r9, r6
 8002dde:	f04f 0100 	mov.w	r1, #0
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002dea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002dee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002df2:	4688      	mov	r8, r1
 8002df4:	4691      	mov	r9, r2
 8002df6:	eb18 0005 	adds.w	r0, r8, r5
 8002dfa:	eb49 0106 	adc.w	r1, r9, r6
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	461d      	mov	r5, r3
 8002e04:	f04f 0600 	mov.w	r6, #0
 8002e08:	196b      	adds	r3, r5, r5
 8002e0a:	eb46 0406 	adc.w	r4, r6, r6
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4623      	mov	r3, r4
 8002e12:	f7fd f9d9 	bl	80001c8 <__aeabi_uldivmod>
 8002e16:	4603      	mov	r3, r0
 8002e18:	460c      	mov	r4, r1
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4ba5      	ldr	r3, [pc, #660]	; (80030b4 <UART_SetConfig+0x384>)
 8002e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	461d      	mov	r5, r3
 8002e2c:	f04f 0600 	mov.w	r6, #0
 8002e30:	46a9      	mov	r9, r5
 8002e32:	46b2      	mov	sl, r6
 8002e34:	eb19 0309 	adds.w	r3, r9, r9
 8002e38:	eb4a 040a 	adc.w	r4, sl, sl
 8002e3c:	4699      	mov	r9, r3
 8002e3e:	46a2      	mov	sl, r4
 8002e40:	eb19 0905 	adds.w	r9, r9, r5
 8002e44:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e48:	f04f 0100 	mov.w	r1, #0
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e5c:	4689      	mov	r9, r1
 8002e5e:	4692      	mov	sl, r2
 8002e60:	eb19 0005 	adds.w	r0, r9, r5
 8002e64:	eb4a 0106 	adc.w	r1, sl, r6
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	461d      	mov	r5, r3
 8002e6e:	f04f 0600 	mov.w	r6, #0
 8002e72:	196b      	adds	r3, r5, r5
 8002e74:	eb46 0406 	adc.w	r4, r6, r6
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4623      	mov	r3, r4
 8002e7c:	f7fd f9a4 	bl	80001c8 <__aeabi_uldivmod>
 8002e80:	4603      	mov	r3, r0
 8002e82:	460c      	mov	r4, r1
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b8b      	ldr	r3, [pc, #556]	; (80030b4 <UART_SetConfig+0x384>)
 8002e88:	fba3 1302 	umull	r1, r3, r3, r2
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	2164      	movs	r1, #100	; 0x64
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	3332      	adds	r3, #50	; 0x32
 8002e9a:	4a86      	ldr	r2, [pc, #536]	; (80030b4 <UART_SetConfig+0x384>)
 8002e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea0:	095b      	lsrs	r3, r3, #5
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ea8:	4498      	add	r8, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	461d      	mov	r5, r3
 8002eae:	f04f 0600 	mov.w	r6, #0
 8002eb2:	46a9      	mov	r9, r5
 8002eb4:	46b2      	mov	sl, r6
 8002eb6:	eb19 0309 	adds.w	r3, r9, r9
 8002eba:	eb4a 040a 	adc.w	r4, sl, sl
 8002ebe:	4699      	mov	r9, r3
 8002ec0:	46a2      	mov	sl, r4
 8002ec2:	eb19 0905 	adds.w	r9, r9, r5
 8002ec6:	eb4a 0a06 	adc.w	sl, sl, r6
 8002eca:	f04f 0100 	mov.w	r1, #0
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ed6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002eda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ede:	4689      	mov	r9, r1
 8002ee0:	4692      	mov	sl, r2
 8002ee2:	eb19 0005 	adds.w	r0, r9, r5
 8002ee6:	eb4a 0106 	adc.w	r1, sl, r6
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	461d      	mov	r5, r3
 8002ef0:	f04f 0600 	mov.w	r6, #0
 8002ef4:	196b      	adds	r3, r5, r5
 8002ef6:	eb46 0406 	adc.w	r4, r6, r6
 8002efa:	461a      	mov	r2, r3
 8002efc:	4623      	mov	r3, r4
 8002efe:	f7fd f963 	bl	80001c8 <__aeabi_uldivmod>
 8002f02:	4603      	mov	r3, r0
 8002f04:	460c      	mov	r4, r1
 8002f06:	461a      	mov	r2, r3
 8002f08:	4b6a      	ldr	r3, [pc, #424]	; (80030b4 <UART_SetConfig+0x384>)
 8002f0a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	2164      	movs	r1, #100	; 0x64
 8002f12:	fb01 f303 	mul.w	r3, r1, r3
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	3332      	adds	r3, #50	; 0x32
 8002f1c:	4a65      	ldr	r2, [pc, #404]	; (80030b4 <UART_SetConfig+0x384>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	f003 0207 	and.w	r2, r3, #7
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4442      	add	r2, r8
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	e26f      	b.n	8003412 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f32:	f7ff fb15 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8002f36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	461d      	mov	r5, r3
 8002f3c:	f04f 0600 	mov.w	r6, #0
 8002f40:	46a8      	mov	r8, r5
 8002f42:	46b1      	mov	r9, r6
 8002f44:	eb18 0308 	adds.w	r3, r8, r8
 8002f48:	eb49 0409 	adc.w	r4, r9, r9
 8002f4c:	4698      	mov	r8, r3
 8002f4e:	46a1      	mov	r9, r4
 8002f50:	eb18 0805 	adds.w	r8, r8, r5
 8002f54:	eb49 0906 	adc.w	r9, r9, r6
 8002f58:	f04f 0100 	mov.w	r1, #0
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f6c:	4688      	mov	r8, r1
 8002f6e:	4691      	mov	r9, r2
 8002f70:	eb18 0005 	adds.w	r0, r8, r5
 8002f74:	eb49 0106 	adc.w	r1, r9, r6
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	461d      	mov	r5, r3
 8002f7e:	f04f 0600 	mov.w	r6, #0
 8002f82:	196b      	adds	r3, r5, r5
 8002f84:	eb46 0406 	adc.w	r4, r6, r6
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4623      	mov	r3, r4
 8002f8c:	f7fd f91c 	bl	80001c8 <__aeabi_uldivmod>
 8002f90:	4603      	mov	r3, r0
 8002f92:	460c      	mov	r4, r1
 8002f94:	461a      	mov	r2, r3
 8002f96:	4b47      	ldr	r3, [pc, #284]	; (80030b4 <UART_SetConfig+0x384>)
 8002f98:	fba3 2302 	umull	r2, r3, r3, r2
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	461d      	mov	r5, r3
 8002fa6:	f04f 0600 	mov.w	r6, #0
 8002faa:	46a9      	mov	r9, r5
 8002fac:	46b2      	mov	sl, r6
 8002fae:	eb19 0309 	adds.w	r3, r9, r9
 8002fb2:	eb4a 040a 	adc.w	r4, sl, sl
 8002fb6:	4699      	mov	r9, r3
 8002fb8:	46a2      	mov	sl, r4
 8002fba:	eb19 0905 	adds.w	r9, r9, r5
 8002fbe:	eb4a 0a06 	adc.w	sl, sl, r6
 8002fc2:	f04f 0100 	mov.w	r1, #0
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fd6:	4689      	mov	r9, r1
 8002fd8:	4692      	mov	sl, r2
 8002fda:	eb19 0005 	adds.w	r0, r9, r5
 8002fde:	eb4a 0106 	adc.w	r1, sl, r6
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	461d      	mov	r5, r3
 8002fe8:	f04f 0600 	mov.w	r6, #0
 8002fec:	196b      	adds	r3, r5, r5
 8002fee:	eb46 0406 	adc.w	r4, r6, r6
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4623      	mov	r3, r4
 8002ff6:	f7fd f8e7 	bl	80001c8 <__aeabi_uldivmod>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	460c      	mov	r4, r1
 8002ffe:	461a      	mov	r2, r3
 8003000:	4b2c      	ldr	r3, [pc, #176]	; (80030b4 <UART_SetConfig+0x384>)
 8003002:	fba3 1302 	umull	r1, r3, r3, r2
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	2164      	movs	r1, #100	; 0x64
 800300a:	fb01 f303 	mul.w	r3, r1, r3
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	3332      	adds	r3, #50	; 0x32
 8003014:	4a27      	ldr	r2, [pc, #156]	; (80030b4 <UART_SetConfig+0x384>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003022:	4498      	add	r8, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	461d      	mov	r5, r3
 8003028:	f04f 0600 	mov.w	r6, #0
 800302c:	46a9      	mov	r9, r5
 800302e:	46b2      	mov	sl, r6
 8003030:	eb19 0309 	adds.w	r3, r9, r9
 8003034:	eb4a 040a 	adc.w	r4, sl, sl
 8003038:	4699      	mov	r9, r3
 800303a:	46a2      	mov	sl, r4
 800303c:	eb19 0905 	adds.w	r9, r9, r5
 8003040:	eb4a 0a06 	adc.w	sl, sl, r6
 8003044:	f04f 0100 	mov.w	r1, #0
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003050:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003054:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003058:	4689      	mov	r9, r1
 800305a:	4692      	mov	sl, r2
 800305c:	eb19 0005 	adds.w	r0, r9, r5
 8003060:	eb4a 0106 	adc.w	r1, sl, r6
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	461d      	mov	r5, r3
 800306a:	f04f 0600 	mov.w	r6, #0
 800306e:	196b      	adds	r3, r5, r5
 8003070:	eb46 0406 	adc.w	r4, r6, r6
 8003074:	461a      	mov	r2, r3
 8003076:	4623      	mov	r3, r4
 8003078:	f7fd f8a6 	bl	80001c8 <__aeabi_uldivmod>
 800307c:	4603      	mov	r3, r0
 800307e:	460c      	mov	r4, r1
 8003080:	461a      	mov	r2, r3
 8003082:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <UART_SetConfig+0x384>)
 8003084:	fba3 1302 	umull	r1, r3, r3, r2
 8003088:	095b      	lsrs	r3, r3, #5
 800308a:	2164      	movs	r1, #100	; 0x64
 800308c:	fb01 f303 	mul.w	r3, r1, r3
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	3332      	adds	r3, #50	; 0x32
 8003096:	4a07      	ldr	r2, [pc, #28]	; (80030b4 <UART_SetConfig+0x384>)
 8003098:	fba2 2303 	umull	r2, r3, r2, r3
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	f003 0207 	and.w	r2, r3, #7
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4442      	add	r2, r8
 80030a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80030aa:	e1b2      	b.n	8003412 <UART_SetConfig+0x6e2>
 80030ac:	40011000 	.word	0x40011000
 80030b0:	40011400 	.word	0x40011400
 80030b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4ad7      	ldr	r2, [pc, #860]	; (800341c <UART_SetConfig+0x6ec>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d005      	beq.n	80030ce <UART_SetConfig+0x39e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4ad6      	ldr	r2, [pc, #856]	; (8003420 <UART_SetConfig+0x6f0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	f040 80d1 	bne.w	8003270 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80030ce:	f7ff fa5b 	bl	8002588 <HAL_RCC_GetPCLK2Freq>
 80030d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	469a      	mov	sl, r3
 80030d8:	f04f 0b00 	mov.w	fp, #0
 80030dc:	46d0      	mov	r8, sl
 80030de:	46d9      	mov	r9, fp
 80030e0:	eb18 0308 	adds.w	r3, r8, r8
 80030e4:	eb49 0409 	adc.w	r4, r9, r9
 80030e8:	4698      	mov	r8, r3
 80030ea:	46a1      	mov	r9, r4
 80030ec:	eb18 080a 	adds.w	r8, r8, sl
 80030f0:	eb49 090b 	adc.w	r9, r9, fp
 80030f4:	f04f 0100 	mov.w	r1, #0
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003100:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003104:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003108:	4688      	mov	r8, r1
 800310a:	4691      	mov	r9, r2
 800310c:	eb1a 0508 	adds.w	r5, sl, r8
 8003110:	eb4b 0609 	adc.w	r6, fp, r9
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4619      	mov	r1, r3
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	f04f 0400 	mov.w	r4, #0
 8003126:	0094      	lsls	r4, r2, #2
 8003128:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800312c:	008b      	lsls	r3, r1, #2
 800312e:	461a      	mov	r2, r3
 8003130:	4623      	mov	r3, r4
 8003132:	4628      	mov	r0, r5
 8003134:	4631      	mov	r1, r6
 8003136:	f7fd f847 	bl	80001c8 <__aeabi_uldivmod>
 800313a:	4603      	mov	r3, r0
 800313c:	460c      	mov	r4, r1
 800313e:	461a      	mov	r2, r3
 8003140:	4bb8      	ldr	r3, [pc, #736]	; (8003424 <UART_SetConfig+0x6f4>)
 8003142:	fba3 2302 	umull	r2, r3, r3, r2
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	469b      	mov	fp, r3
 8003150:	f04f 0c00 	mov.w	ip, #0
 8003154:	46d9      	mov	r9, fp
 8003156:	46e2      	mov	sl, ip
 8003158:	eb19 0309 	adds.w	r3, r9, r9
 800315c:	eb4a 040a 	adc.w	r4, sl, sl
 8003160:	4699      	mov	r9, r3
 8003162:	46a2      	mov	sl, r4
 8003164:	eb19 090b 	adds.w	r9, r9, fp
 8003168:	eb4a 0a0c 	adc.w	sl, sl, ip
 800316c:	f04f 0100 	mov.w	r1, #0
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003178:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800317c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003180:	4689      	mov	r9, r1
 8003182:	4692      	mov	sl, r2
 8003184:	eb1b 0509 	adds.w	r5, fp, r9
 8003188:	eb4c 060a 	adc.w	r6, ip, sl
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	4619      	mov	r1, r3
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	f04f 0400 	mov.w	r4, #0
 800319e:	0094      	lsls	r4, r2, #2
 80031a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031a4:	008b      	lsls	r3, r1, #2
 80031a6:	461a      	mov	r2, r3
 80031a8:	4623      	mov	r3, r4
 80031aa:	4628      	mov	r0, r5
 80031ac:	4631      	mov	r1, r6
 80031ae:	f7fd f80b 	bl	80001c8 <__aeabi_uldivmod>
 80031b2:	4603      	mov	r3, r0
 80031b4:	460c      	mov	r4, r1
 80031b6:	461a      	mov	r2, r3
 80031b8:	4b9a      	ldr	r3, [pc, #616]	; (8003424 <UART_SetConfig+0x6f4>)
 80031ba:	fba3 1302 	umull	r1, r3, r3, r2
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	2164      	movs	r1, #100	; 0x64
 80031c2:	fb01 f303 	mul.w	r3, r1, r3
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	3332      	adds	r3, #50	; 0x32
 80031cc:	4a95      	ldr	r2, [pc, #596]	; (8003424 <UART_SetConfig+0x6f4>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031d8:	4498      	add	r8, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	469b      	mov	fp, r3
 80031de:	f04f 0c00 	mov.w	ip, #0
 80031e2:	46d9      	mov	r9, fp
 80031e4:	46e2      	mov	sl, ip
 80031e6:	eb19 0309 	adds.w	r3, r9, r9
 80031ea:	eb4a 040a 	adc.w	r4, sl, sl
 80031ee:	4699      	mov	r9, r3
 80031f0:	46a2      	mov	sl, r4
 80031f2:	eb19 090b 	adds.w	r9, r9, fp
 80031f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031fa:	f04f 0100 	mov.w	r1, #0
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003206:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800320a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800320e:	4689      	mov	r9, r1
 8003210:	4692      	mov	sl, r2
 8003212:	eb1b 0509 	adds.w	r5, fp, r9
 8003216:	eb4c 060a 	adc.w	r6, ip, sl
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	4619      	mov	r1, r3
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	f04f 0400 	mov.w	r4, #0
 800322c:	0094      	lsls	r4, r2, #2
 800322e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003232:	008b      	lsls	r3, r1, #2
 8003234:	461a      	mov	r2, r3
 8003236:	4623      	mov	r3, r4
 8003238:	4628      	mov	r0, r5
 800323a:	4631      	mov	r1, r6
 800323c:	f7fc ffc4 	bl	80001c8 <__aeabi_uldivmod>
 8003240:	4603      	mov	r3, r0
 8003242:	460c      	mov	r4, r1
 8003244:	461a      	mov	r2, r3
 8003246:	4b77      	ldr	r3, [pc, #476]	; (8003424 <UART_SetConfig+0x6f4>)
 8003248:	fba3 1302 	umull	r1, r3, r3, r2
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	2164      	movs	r1, #100	; 0x64
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	3332      	adds	r3, #50	; 0x32
 800325a:	4a72      	ldr	r2, [pc, #456]	; (8003424 <UART_SetConfig+0x6f4>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	f003 020f 	and.w	r2, r3, #15
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4442      	add	r2, r8
 800326c:	609a      	str	r2, [r3, #8]
 800326e:	e0d0      	b.n	8003412 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003270:	f7ff f976 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8003274:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	469a      	mov	sl, r3
 800327a:	f04f 0b00 	mov.w	fp, #0
 800327e:	46d0      	mov	r8, sl
 8003280:	46d9      	mov	r9, fp
 8003282:	eb18 0308 	adds.w	r3, r8, r8
 8003286:	eb49 0409 	adc.w	r4, r9, r9
 800328a:	4698      	mov	r8, r3
 800328c:	46a1      	mov	r9, r4
 800328e:	eb18 080a 	adds.w	r8, r8, sl
 8003292:	eb49 090b 	adc.w	r9, r9, fp
 8003296:	f04f 0100 	mov.w	r1, #0
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032aa:	4688      	mov	r8, r1
 80032ac:	4691      	mov	r9, r2
 80032ae:	eb1a 0508 	adds.w	r5, sl, r8
 80032b2:	eb4b 0609 	adc.w	r6, fp, r9
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	4619      	mov	r1, r3
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	f04f 0400 	mov.w	r4, #0
 80032c8:	0094      	lsls	r4, r2, #2
 80032ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032ce:	008b      	lsls	r3, r1, #2
 80032d0:	461a      	mov	r2, r3
 80032d2:	4623      	mov	r3, r4
 80032d4:	4628      	mov	r0, r5
 80032d6:	4631      	mov	r1, r6
 80032d8:	f7fc ff76 	bl	80001c8 <__aeabi_uldivmod>
 80032dc:	4603      	mov	r3, r0
 80032de:	460c      	mov	r4, r1
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b50      	ldr	r3, [pc, #320]	; (8003424 <UART_SetConfig+0x6f4>)
 80032e4:	fba3 2302 	umull	r2, r3, r3, r2
 80032e8:	095b      	lsrs	r3, r3, #5
 80032ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	469b      	mov	fp, r3
 80032f2:	f04f 0c00 	mov.w	ip, #0
 80032f6:	46d9      	mov	r9, fp
 80032f8:	46e2      	mov	sl, ip
 80032fa:	eb19 0309 	adds.w	r3, r9, r9
 80032fe:	eb4a 040a 	adc.w	r4, sl, sl
 8003302:	4699      	mov	r9, r3
 8003304:	46a2      	mov	sl, r4
 8003306:	eb19 090b 	adds.w	r9, r9, fp
 800330a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800330e:	f04f 0100 	mov.w	r1, #0
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800331a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800331e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003322:	4689      	mov	r9, r1
 8003324:	4692      	mov	sl, r2
 8003326:	eb1b 0509 	adds.w	r5, fp, r9
 800332a:	eb4c 060a 	adc.w	r6, ip, sl
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	4619      	mov	r1, r3
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	f04f 0400 	mov.w	r4, #0
 8003340:	0094      	lsls	r4, r2, #2
 8003342:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003346:	008b      	lsls	r3, r1, #2
 8003348:	461a      	mov	r2, r3
 800334a:	4623      	mov	r3, r4
 800334c:	4628      	mov	r0, r5
 800334e:	4631      	mov	r1, r6
 8003350:	f7fc ff3a 	bl	80001c8 <__aeabi_uldivmod>
 8003354:	4603      	mov	r3, r0
 8003356:	460c      	mov	r4, r1
 8003358:	461a      	mov	r2, r3
 800335a:	4b32      	ldr	r3, [pc, #200]	; (8003424 <UART_SetConfig+0x6f4>)
 800335c:	fba3 1302 	umull	r1, r3, r3, r2
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	2164      	movs	r1, #100	; 0x64
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	3332      	adds	r3, #50	; 0x32
 800336e:	4a2d      	ldr	r2, [pc, #180]	; (8003424 <UART_SetConfig+0x6f4>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	095b      	lsrs	r3, r3, #5
 8003376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800337a:	4498      	add	r8, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	469b      	mov	fp, r3
 8003380:	f04f 0c00 	mov.w	ip, #0
 8003384:	46d9      	mov	r9, fp
 8003386:	46e2      	mov	sl, ip
 8003388:	eb19 0309 	adds.w	r3, r9, r9
 800338c:	eb4a 040a 	adc.w	r4, sl, sl
 8003390:	4699      	mov	r9, r3
 8003392:	46a2      	mov	sl, r4
 8003394:	eb19 090b 	adds.w	r9, r9, fp
 8003398:	eb4a 0a0c 	adc.w	sl, sl, ip
 800339c:	f04f 0100 	mov.w	r1, #0
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033b0:	4689      	mov	r9, r1
 80033b2:	4692      	mov	sl, r2
 80033b4:	eb1b 0509 	adds.w	r5, fp, r9
 80033b8:	eb4c 060a 	adc.w	r6, ip, sl
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	4619      	mov	r1, r3
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	f04f 0400 	mov.w	r4, #0
 80033ce:	0094      	lsls	r4, r2, #2
 80033d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033d4:	008b      	lsls	r3, r1, #2
 80033d6:	461a      	mov	r2, r3
 80033d8:	4623      	mov	r3, r4
 80033da:	4628      	mov	r0, r5
 80033dc:	4631      	mov	r1, r6
 80033de:	f7fc fef3 	bl	80001c8 <__aeabi_uldivmod>
 80033e2:	4603      	mov	r3, r0
 80033e4:	460c      	mov	r4, r1
 80033e6:	461a      	mov	r2, r3
 80033e8:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <UART_SetConfig+0x6f4>)
 80033ea:	fba3 1302 	umull	r1, r3, r3, r2
 80033ee:	095b      	lsrs	r3, r3, #5
 80033f0:	2164      	movs	r1, #100	; 0x64
 80033f2:	fb01 f303 	mul.w	r3, r1, r3
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	3332      	adds	r3, #50	; 0x32
 80033fc:	4a09      	ldr	r2, [pc, #36]	; (8003424 <UART_SetConfig+0x6f4>)
 80033fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	f003 020f 	and.w	r2, r3, #15
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4442      	add	r2, r8
 800340e:	609a      	str	r2, [r3, #8]
}
 8003410:	e7ff      	b.n	8003412 <UART_SetConfig+0x6e2>
 8003412:	bf00      	nop
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800341c:	40011000 	.word	0x40011000
 8003420:	40011400 	.word	0x40011400
 8003424:	51eb851f 	.word	0x51eb851f

08003428 <__errno>:
 8003428:	4b01      	ldr	r3, [pc, #4]	; (8003430 <__errno+0x8>)
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	200015d8 	.word	0x200015d8

08003434 <__libc_init_array>:
 8003434:	b570      	push	{r4, r5, r6, lr}
 8003436:	4e0d      	ldr	r6, [pc, #52]	; (800346c <__libc_init_array+0x38>)
 8003438:	4c0d      	ldr	r4, [pc, #52]	; (8003470 <__libc_init_array+0x3c>)
 800343a:	1ba4      	subs	r4, r4, r6
 800343c:	10a4      	asrs	r4, r4, #2
 800343e:	2500      	movs	r5, #0
 8003440:	42a5      	cmp	r5, r4
 8003442:	d109      	bne.n	8003458 <__libc_init_array+0x24>
 8003444:	4e0b      	ldr	r6, [pc, #44]	; (8003474 <__libc_init_array+0x40>)
 8003446:	4c0c      	ldr	r4, [pc, #48]	; (8003478 <__libc_init_array+0x44>)
 8003448:	f000 f894 	bl	8003574 <_init>
 800344c:	1ba4      	subs	r4, r4, r6
 800344e:	10a4      	asrs	r4, r4, #2
 8003450:	2500      	movs	r5, #0
 8003452:	42a5      	cmp	r5, r4
 8003454:	d105      	bne.n	8003462 <__libc_init_array+0x2e>
 8003456:	bd70      	pop	{r4, r5, r6, pc}
 8003458:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800345c:	4798      	blx	r3
 800345e:	3501      	adds	r5, #1
 8003460:	e7ee      	b.n	8003440 <__libc_init_array+0xc>
 8003462:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003466:	4798      	blx	r3
 8003468:	3501      	adds	r5, #1
 800346a:	e7f2      	b.n	8003452 <__libc_init_array+0x1e>
 800346c:	080035e0 	.word	0x080035e0
 8003470:	080035e0 	.word	0x080035e0
 8003474:	080035e0 	.word	0x080035e0
 8003478:	080035e4 	.word	0x080035e4

0800347c <malloc>:
 800347c:	4b02      	ldr	r3, [pc, #8]	; (8003488 <malloc+0xc>)
 800347e:	4601      	mov	r1, r0
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	f000 b80b 	b.w	800349c <_malloc_r>
 8003486:	bf00      	nop
 8003488:	200015d8 	.word	0x200015d8

0800348c <memset>:
 800348c:	4402      	add	r2, r0
 800348e:	4603      	mov	r3, r0
 8003490:	4293      	cmp	r3, r2
 8003492:	d100      	bne.n	8003496 <memset+0xa>
 8003494:	4770      	bx	lr
 8003496:	f803 1b01 	strb.w	r1, [r3], #1
 800349a:	e7f9      	b.n	8003490 <memset+0x4>

0800349c <_malloc_r>:
 800349c:	b570      	push	{r4, r5, r6, lr}
 800349e:	1ccd      	adds	r5, r1, #3
 80034a0:	f025 0503 	bic.w	r5, r5, #3
 80034a4:	3508      	adds	r5, #8
 80034a6:	2d0c      	cmp	r5, #12
 80034a8:	bf38      	it	cc
 80034aa:	250c      	movcc	r5, #12
 80034ac:	2d00      	cmp	r5, #0
 80034ae:	4606      	mov	r6, r0
 80034b0:	db01      	blt.n	80034b6 <_malloc_r+0x1a>
 80034b2:	42a9      	cmp	r1, r5
 80034b4:	d903      	bls.n	80034be <_malloc_r+0x22>
 80034b6:	230c      	movs	r3, #12
 80034b8:	6033      	str	r3, [r6, #0]
 80034ba:	2000      	movs	r0, #0
 80034bc:	bd70      	pop	{r4, r5, r6, pc}
 80034be:	f000 f857 	bl	8003570 <__malloc_lock>
 80034c2:	4a21      	ldr	r2, [pc, #132]	; (8003548 <_malloc_r+0xac>)
 80034c4:	6814      	ldr	r4, [r2, #0]
 80034c6:	4621      	mov	r1, r4
 80034c8:	b991      	cbnz	r1, 80034f0 <_malloc_r+0x54>
 80034ca:	4c20      	ldr	r4, [pc, #128]	; (800354c <_malloc_r+0xb0>)
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	b91b      	cbnz	r3, 80034d8 <_malloc_r+0x3c>
 80034d0:	4630      	mov	r0, r6
 80034d2:	f000 f83d 	bl	8003550 <_sbrk_r>
 80034d6:	6020      	str	r0, [r4, #0]
 80034d8:	4629      	mov	r1, r5
 80034da:	4630      	mov	r0, r6
 80034dc:	f000 f838 	bl	8003550 <_sbrk_r>
 80034e0:	1c43      	adds	r3, r0, #1
 80034e2:	d124      	bne.n	800352e <_malloc_r+0x92>
 80034e4:	230c      	movs	r3, #12
 80034e6:	6033      	str	r3, [r6, #0]
 80034e8:	4630      	mov	r0, r6
 80034ea:	f000 f842 	bl	8003572 <__malloc_unlock>
 80034ee:	e7e4      	b.n	80034ba <_malloc_r+0x1e>
 80034f0:	680b      	ldr	r3, [r1, #0]
 80034f2:	1b5b      	subs	r3, r3, r5
 80034f4:	d418      	bmi.n	8003528 <_malloc_r+0x8c>
 80034f6:	2b0b      	cmp	r3, #11
 80034f8:	d90f      	bls.n	800351a <_malloc_r+0x7e>
 80034fa:	600b      	str	r3, [r1, #0]
 80034fc:	50cd      	str	r5, [r1, r3]
 80034fe:	18cc      	adds	r4, r1, r3
 8003500:	4630      	mov	r0, r6
 8003502:	f000 f836 	bl	8003572 <__malloc_unlock>
 8003506:	f104 000b 	add.w	r0, r4, #11
 800350a:	1d23      	adds	r3, r4, #4
 800350c:	f020 0007 	bic.w	r0, r0, #7
 8003510:	1ac3      	subs	r3, r0, r3
 8003512:	d0d3      	beq.n	80034bc <_malloc_r+0x20>
 8003514:	425a      	negs	r2, r3
 8003516:	50e2      	str	r2, [r4, r3]
 8003518:	e7d0      	b.n	80034bc <_malloc_r+0x20>
 800351a:	428c      	cmp	r4, r1
 800351c:	684b      	ldr	r3, [r1, #4]
 800351e:	bf16      	itet	ne
 8003520:	6063      	strne	r3, [r4, #4]
 8003522:	6013      	streq	r3, [r2, #0]
 8003524:	460c      	movne	r4, r1
 8003526:	e7eb      	b.n	8003500 <_malloc_r+0x64>
 8003528:	460c      	mov	r4, r1
 800352a:	6849      	ldr	r1, [r1, #4]
 800352c:	e7cc      	b.n	80034c8 <_malloc_r+0x2c>
 800352e:	1cc4      	adds	r4, r0, #3
 8003530:	f024 0403 	bic.w	r4, r4, #3
 8003534:	42a0      	cmp	r0, r4
 8003536:	d005      	beq.n	8003544 <_malloc_r+0xa8>
 8003538:	1a21      	subs	r1, r4, r0
 800353a:	4630      	mov	r0, r6
 800353c:	f000 f808 	bl	8003550 <_sbrk_r>
 8003540:	3001      	adds	r0, #1
 8003542:	d0cf      	beq.n	80034e4 <_malloc_r+0x48>
 8003544:	6025      	str	r5, [r4, #0]
 8003546:	e7db      	b.n	8003500 <_malloc_r+0x64>
 8003548:	20001668 	.word	0x20001668
 800354c:	2000166c 	.word	0x2000166c

08003550 <_sbrk_r>:
 8003550:	b538      	push	{r3, r4, r5, lr}
 8003552:	4c06      	ldr	r4, [pc, #24]	; (800356c <_sbrk_r+0x1c>)
 8003554:	2300      	movs	r3, #0
 8003556:	4605      	mov	r5, r0
 8003558:	4608      	mov	r0, r1
 800355a:	6023      	str	r3, [r4, #0]
 800355c:	f7fd ff0a 	bl	8001374 <_sbrk>
 8003560:	1c43      	adds	r3, r0, #1
 8003562:	d102      	bne.n	800356a <_sbrk_r+0x1a>
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	b103      	cbz	r3, 800356a <_sbrk_r+0x1a>
 8003568:	602b      	str	r3, [r5, #0]
 800356a:	bd38      	pop	{r3, r4, r5, pc}
 800356c:	20002338 	.word	0x20002338

08003570 <__malloc_lock>:
 8003570:	4770      	bx	lr

08003572 <__malloc_unlock>:
 8003572:	4770      	bx	lr

08003574 <_init>:
 8003574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003576:	bf00      	nop
 8003578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357a:	bc08      	pop	{r3}
 800357c:	469e      	mov	lr, r3
 800357e:	4770      	bx	lr

08003580 <_fini>:
 8003580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003582:	bf00      	nop
 8003584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003586:	bc08      	pop	{r3}
 8003588:	469e      	mov	lr, r3
 800358a:	4770      	bx	lr
